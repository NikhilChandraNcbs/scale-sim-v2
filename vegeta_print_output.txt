alpha, beta, macs, rows, cols
4 | 2 | 512 | 16.0 | 4.0
row in load_array_gemm
Layer Name, M, N, K,

row in load_array_gemm
GEMM_1, 1, 5, 16,

printing entry
['GEMM_1', 1, 16, 1, 16, 1, 5, 1, 1, array([[1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1],
       [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1],
       [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0],
       [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0],
       [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1]])]
topo arrays after append_topo_arrays
[['GEMM_1', 1, 16, 1, 16, 1, 5, 1, 1, array([[1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1],
       [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1],
       [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0],
       [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0],
       [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1]])]]
====================================================
******************* SCALE SIM **********************
====================================================
Array Size: 	4x4
SRAM IFMAP (kB): 	4
SRAM Filter (kB): 	4
SRAM OFMAP (kB): 	4
Dataflow: 	Weight Stationary
CSV file path: 	topologies/sparsity/gemm_mix.csv
Bandwidth: 	50
Working in USE USER BANDWIDTH mode.
====================================================

Running Layer 0
INSIDE INPUT FILTER DEMAND MATRIX CREATION FUNCTION
self.batch_size in ifmap function is  1
row_indices
[0]
col_indices
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15]
i meshgrid
[[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
j meshgrid
[[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15]]
self.ifmap_addr_matrix
[[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15]]
self.ifmap_addr_matrix for sparsity
[[0 1 2 3 4 5 6 7]]
row_indices
[[ 0]
 [ 1]
 [ 2]
 [ 3]
 [ 4]
 [ 5]
 [ 6]
 [ 7]
 [ 8]
 [ 9]
 [10]
 [11]
 [12]
 [13]
 [14]
 [15]]
col_indices
[0 1 2 3 4]
self.filter_addr_matrix
[[100 116 132 148 164]
 [101 117 133 149 165]
 [102 118 134 150 166]
 [103 119 135 151 167]
 [104 120 136 152 168]
 [105 121 137 153 169]
 [106 122 138 154 170]
 [107 123 139 155 171]
 [108 124 140 156 172]
 [109 125 141 157 173]
 [110 126 142 158 174]
 [111 127 143 159 175]
 [112 128 144 160 176]
 [113 129 145 161 177]
 [114 130 146 162 178]
 [115 131 147 163 179]]
SPARSITY INSIDE FILTER DEMAND MATRIX CREATION
(16, 5) (16, 5)
after reshape
[[1 0 0 0 0]
 [0 0 0 0 0]
 [1 1 0 0 1]
 [0 0 1 1 0]
 [0 0 0 0 0]
 [0 0 0 0 0]
 [1 0 1 1 0]
 [1 1 0 0 1]
 [1 0 0 0 0]
 [0 0 0 0 0]
 [1 1 0 0 1]
 [0 0 1 1 0]
 [0 0 0 0 0]
 [0 0 0 0 0]
 [1 0 1 1 0]
 [1 1 0 0 1]]
after multiplying and transposing
[[100   0 102   0   0   0 106 107 108   0 110   0   0   0 114 115]
 [  0   0 118   0   0   0   0 123   0   0 126   0   0   0   0 131]
 [  0   0   0 135   0   0 138   0   0   0   0 143   0   0 146   0]
 [  0   0   0 151   0   0 154   0   0   0   0 159   0   0 162   0]
 [  0   0 166   0   0   0   0 171   0   0 174   0   0   0   0 179]]
after reducing the filter array based on sparsity
[[100 102 106 107]
 [118  -1 123  -1]
 [135  -1 138  -1]
 [151  -1 154  -1]
 [166  -1 171  -1]]
after transpose
[[100 118 135 151 166]
 [102  -1  -1  -1  -1]
 [106 123 138 154 171]
 [107  -1  -1  -1  -1]]
Final
[[100 118 135 151 166]
 [102  -1  -1  -1  -1]
 [106 123 138 154 171]
 [107  -1  -1  -1  -1]
 [100 118 135 151 166]
 [102  -1  -1  -1  -1]
 [106 123 138 154 171]
 [107  -1  -1  -1  -1]]
col_indices
[0 1 2 3 4]
self.ofmap_addr_matrix
[[200 201 202 203 204]]
these are the demand matrices
[[0 1 2 3 4 5 6 7]]
[[100 118 135 151 166]
 [102  -1  -1  -1  -1]
 [106 123 138 154 171]
 [107  -1  -1  -1  -1]
 [100 118 135 151 166]
 [102  -1  -1  -1  -1]
 [106 123 138 154 171]
 [107  -1  -1  -1  -1]]
[[200 201 202 203 204]]
layer_calc_params[0] * layer_calc_params[1] * num_filters =  1 1 5
self.num_compute = self.topo.get_layer_num_ofmap_px(self.layer_id) * self.topo.get_layer_window_size(self.layer_id)
Nofmap: Number of OFMAP pixels generated by filter
layer_calc_params[0] * layer_calc_params[1] * num_filters =  1 1 5
80 = 5 * 16
self.layer_id  0
filter matrix in create_filter_prefetch_mat
[[100 118 135 151 166]
 [102  -1  -1  -1  -1]
 [106 123 138 154 171]
 [107  -1  -1  -1  -1]
 [100 118 135 151 166]
 [102  -1  -1  -1  -1]
 [106 123 138 154 171]
 [107  -1  -1  -1  -1]]
End
Compute cycles: 44
Stall cycles: 0
Overall utilization: 11.36%
Mapping efficiency: 37.50%
Average IFMAP SRAM BW: 0.727 words/cycle
Average Filter SRAM BW: 0.909 words/cycle
Average Filter Metadata SRAM BW: 0.932 words/cycle
Average OFMAP SRAM BW: 0.227 words/cycle
Average IFMAP DRAM BW: 50.000 words/cycle
Average Filter DRAM BW: 50.000 words/cycle
Average OFMAP DRAM BW: 10.000 words/cycle
************ SCALE SIM Run Complete ****************
