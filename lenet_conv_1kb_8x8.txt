printing entry
['Convolution Layer 1', 30, 30, 5, 5, 1, 6, 1, 1, None]
printing entry
['Convolution Layer 2', 10, 10, 5, 5, 6, 16, 1, 1, None]
====================================================
******************* SCALE SIM **********************
====================================================
Array Size: 	8x8
SRAM IFMAP (kB): 	1
SRAM Filter (kB): 	1
SRAM OFMAP (kB): 	1
Dataflow: 	Weight Stationary
CSV file path: 	topologies/sparsity/lenet_conv.csv
Bandwidth: 	50
Working in USE USER BANDWIDTH mode.
====================================================

Running Layer 0
self.filter_addr_matrix
(25, 6)
[[100 125 150 175 200 225]
 [101 126 151 176 201 226]
 [102 127 152 177 202 227]
 [103 128 153 178 203 228]
 [104 129 154 179 204 229]
 [105 130 155 180 205 230]
 [106 131 156 181 206 231]
 [107 132 157 182 207 232]
 [108 133 158 183 208 233]
 [109 134 159 184 209 234]
 [110 135 160 185 210 235]
 [111 136 161 186 211 236]
 [112 137 162 187 212 237]
 [113 138 163 188 213 238]
 [114 139 164 189 214 239]
 [115 140 165 190 215 240]
 [116 141 166 191 216 241]
 [117 142 167 192 217 242]
 [118 143 168 193 218 243]
 [119 144 169 194 219 244]
 [120 145 170 195 220 245]
 [121 146 171 196 221 246]
 [122 147 172 197 222 247]
 [123 148 173 198 223 248]
 [124 149 174 199 224 249]]
INSIDE INPUT FILTER DEMAND MATRIX CREATION FUNCTION
self.batch_size in ifmap function is  1
self.ifmap_addr_matrix
(676, 25)
[[  0   1   2 ... 122 123 124]
 [  1   2   3 ... 123 124 125]
 [  2   3   4 ... 124 125 126]
 ...
 [773 774 775 ... 895 896 897]
 [774 775 776 ... 896 897 898]
 [775 776 777 ... 897 898 899]]
col_indices
[0 1 2 3 4 5]
self.ofmap_addr_matrix
[[ 200  201  202  203  204  205]
 [ 206  207  208  209  210  211]
 [ 212  213  214  215  216  217]
 ...
 [4238 4239 4240 4241 4242 4243]
 [4244 4245 4246 4247 4248 4249]
 [4250 4251 4252 4253 4254 4255]]
these are the operand matrices
(676, 25)
(25, 6)
(676, 6)
[[  0   1   2 ... 122 123 124]
 [  1   2   3 ... 123 124 125]
 [  2   3   4 ... 124 125 126]
 ...
 [773 774 775 ... 895 896 897]
 [774 775 776 ... 896 897 898]
 [775 776 777 ... 897 898 899]]
[[100 125 150 175 200 225]
 [101 126 151 176 201 226]
 [102 127 152 177 202 227]
 [103 128 153 178 203 228]
 [104 129 154 179 204 229]
 [105 130 155 180 205 230]
 [106 131 156 181 206 231]
 [107 132 157 182 207 232]
 [108 133 158 183 208 233]
 [109 134 159 184 209 234]
 [110 135 160 185 210 235]
 [111 136 161 186 211 236]
 [112 137 162 187 212 237]
 [113 138 163 188 213 238]
 [114 139 164 189 214 239]
 [115 140 165 190 215 240]
 [116 141 166 191 216 241]
 [117 142 167 192 217 242]
 [118 143 168 193 218 243]
 [119 144 169 194 219 244]
 [120 145 170 195 220 245]
 [121 146 171 196 221 246]
 [122 147 172 197 222 247]
 [123 148 173 198 223 248]
 [124 149 174 199 224 249]]
[[ 200  201  202  203  204  205]
 [ 206  207  208  209  210  211]
 [ 212  213  214  215  216  217]
 ...
 [4238 4239 4240 4241 4242 4243]
 [4244 4245 4246 4247 4248 4249]
 [4250 4251 4252 4253 4254 4255]]
layer_calc_params[0] * layer_calc_params[1] * num_filters =  26 26 6
self.num_compute = self.topo.get_layer_num_ofmap_px(self.layer_id) * self.topo.get_layer_window_size(self.layer_id)
Nofmap: Number of OFMAP pixels generated by filter
layer_calc_params[0] * layer_calc_params[1] * num_filters =  26 26 6
101400 = 4056 * 25
self.layer_id  0
filter matrix in create_filter_prefetch_mat
[[100 125 150 175 200 225]
 [101 126 151 176 201 226]
 [102 127 152 177 202 227]
 [103 128 153 178 203 228]
 [104 129 154 179 204 229]
 [105 130 155 180 205 230]
 [106 131 156 181 206 231]
 [107 132 157 182 207 232]
 [108 133 158 183 208 233]
 [109 134 159 184 209 234]
 [110 135 160 185 210 235]
 [111 136 161 186 211 236]
 [112 137 162 187 212 237]
 [113 138 163 188 213 238]
 [114 139 164 189 214 239]
 [115 140 165 190 215 240]
 [116 141 166 191 216 241]
 [117 142 167 192 217 242]
 [118 143 168 193 218 243]
 [119 144 169 194 219 244]
 [120 145 170 195 220 245]
 [121 146 171 196 221 246]
 [122 147 172 197 222 247]
 [123 148 173 198 223 248]
 [124 149 174 199 224 249]]
End
These are the demand matrices
[[-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 ...
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]]
[[107. 132. 157. ... 232.  -1.  -1.]
 [106. 131. 156. ... 231.  -1.  -1.]
 [105. 130. 155. ... 230.  -1.  -1.]
 ...
 [ -1.  -1.  -1. ...  -1.  -1.  -1.]
 [ -1.  -1.  -1. ...  -1.  -1.  -1.]
 [ -1.  -1.  -1. ...  -1.  -1.  -1.]]
[[-1.000e+00 -1.000e+00 -1.000e+00 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [-1.000e+00 -1.000e+00 -1.000e+00 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [-1.000e+00 -1.000e+00 -1.000e+00 ... -1.000e+00 -1.000e+00 -1.000e+00]
 ...
 [-1.000e+00 -1.000e+00 -1.000e+00 ...  4.255e+03 -1.000e+00 -1.000e+00]
 [-1.000e+00 -1.000e+00 -1.000e+00 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [-1.000e+00 -1.000e+00 -1.000e+00 ... -1.000e+00 -1.000e+00 -1.000e+00]]
Compute cycles: 2791
Stall cycles: 0
Overall utilization: 56.77%
Mapping efficiency: 58.59%
Average IFMAP SRAM BW: 30.276 words/cycle
Average Filter SRAM BW: 0.054 words/cycle
Average Filter Metadata SRAM BW: 0.000 words/cycle
Average OFMAP SRAM BW: 5.813 words/cycle
Average IFMAP DRAM BW: 45.949 words/cycle
Average Filter DRAM BW: 50.000 words/cycle
Average OFMAP DRAM BW: 6.018 words/cycle

Running Layer 1
self.filter_addr_matrix
(150, 16)
[[ 100  250  400 ... 2050 2200 2350]
 [ 101  251  401 ... 2051 2201 2351]
 [ 102  252  402 ... 2052 2202 2352]
 ...
 [ 247  397  547 ... 2197 2347 2497]
 [ 248  398  548 ... 2198 2348 2498]
 [ 249  399  549 ... 2199 2349 2499]]
INSIDE INPUT FILTER DEMAND MATRIX CREATION FUNCTION
self.batch_size in ifmap function is  1
self.ifmap_addr_matrix
(36, 150)
[[  0   1   2 ... 267 268 269]
 [  6   7   8 ... 273 274 275]
 [ 12  13  14 ... 279 280 281]
 ...
 [318 319 320 ... 585 586 587]
 [324 325 326 ... 591 592 593]
 [330 331 332 ... 597 598 599]]
col_indices
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15]
self.ofmap_addr_matrix
[[200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215]
 [216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231]
 [232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247]
 [248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263]
 [264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279]
 [280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295]
 [296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311]
 [312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327]
 [328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343]
 [344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359]
 [360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375]
 [376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391]
 [392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407]
 [408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423]
 [424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439]
 [440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455]
 [456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471]
 [472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487]
 [488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503]
 [504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519]
 [520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535]
 [536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551]
 [552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567]
 [568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583]
 [584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599]
 [600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615]
 [616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631]
 [632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647]
 [648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663]
 [664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679]
 [680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695]
 [696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711]
 [712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727]
 [728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743]
 [744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759]
 [760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775]]
these are the operand matrices
(36, 150)
(150, 16)
(36, 16)
[[  0   1   2 ... 267 268 269]
 [  6   7   8 ... 273 274 275]
 [ 12  13  14 ... 279 280 281]
 ...
 [318 319 320 ... 585 586 587]
 [324 325 326 ... 591 592 593]
 [330 331 332 ... 597 598 599]]
[[ 100  250  400 ... 2050 2200 2350]
 [ 101  251  401 ... 2051 2201 2351]
 [ 102  252  402 ... 2052 2202 2352]
 ...
 [ 247  397  547 ... 2197 2347 2497]
 [ 248  398  548 ... 2198 2348 2498]
 [ 249  399  549 ... 2199 2349 2499]]
[[200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215]
 [216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231]
 [232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247]
 [248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263]
 [264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279]
 [280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295]
 [296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311]
 [312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327]
 [328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343]
 [344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359]
 [360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375]
 [376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391]
 [392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407]
 [408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423]
 [424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439]
 [440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455]
 [456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471]
 [472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487]
 [488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503]
 [504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519]
 [520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535]
 [536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551]
 [552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567]
 [568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583]
 [584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599]
 [600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615]
 [616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631]
 [632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647]
 [648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663]
 [664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679]
 [680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695]
 [696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711]
 [712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727]
 [728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743]
 [744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759]
 [760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775]]
layer_calc_params[0] * layer_calc_params[1] * num_filters =  6 6 16
self.num_compute = self.topo.get_layer_num_ofmap_px(self.layer_id) * self.topo.get_layer_window_size(self.layer_id)
Nofmap: Number of OFMAP pixels generated by filter
layer_calc_params[0] * layer_calc_params[1] * num_filters =  6 6 16
86400 = 576 * 150
self.layer_id  1
filter matrix in create_filter_prefetch_mat
[[ 100  250  400 ... 2050 2200 2350]
 [ 101  251  401 ... 2051 2201 2351]
 [ 102  252  402 ... 2052 2202 2352]
 ...
 [ 247  397  547 ... 2197 2347 2497]
 [ 248  398  548 ... 2198 2348 2498]
 [ 249  399  549 ... 2199 2349 2499]]
End
These are the demand matrices
[[-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 ...
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]]
[[ 1.070e+02  2.570e+02  4.070e+02 ...  8.570e+02  1.007e+03  1.157e+03]
 [ 1.060e+02  2.560e+02  4.060e+02 ...  8.560e+02  1.006e+03  1.156e+03]
 [ 1.050e+02  2.550e+02  4.050e+02 ...  8.550e+02  1.005e+03  1.155e+03]
 ...
 [-1.000e+00 -1.000e+00 -1.000e+00 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [-1.000e+00 -1.000e+00 -1.000e+00 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [-1.000e+00 -1.000e+00 -1.000e+00 ... -1.000e+00 -1.000e+00 -1.000e+00]]
[[ -1.  -1.  -1. ...  -1.  -1.  -1.]
 [ -1.  -1.  -1. ...  -1.  -1.  -1.]
 [ -1.  -1.  -1. ...  -1.  -1.  -1.]
 ...
 [ -1.  -1.  -1. ... 773. 758. 743.]
 [ -1.  -1.  -1. ...  -1. 774. 759.]
 [ -1.  -1.  -1. ...  -1.  -1. 775.]]
Compute cycles: 2907
Stall cycles: 704
Overall utilization: 46.44%
Mapping efficiency: 98.68%
Average IFMAP SRAM BW: 18.576 words/cycle
Average Filter SRAM BW: 0.826 words/cycle
Average Filter Metadata SRAM BW: 0.000 words/cycle
Average OFMAP SRAM BW: 3.765 words/cycle
Average IFMAP DRAM BW: 45.850 words/cycle
Average Filter DRAM BW: 45.902 words/cycle
Average OFMAP DRAM BW: 3.899 words/cycle
************ SCALE SIM Run Complete ****************
