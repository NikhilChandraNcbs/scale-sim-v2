printing entry
['Conv1', 224, 224, 11, 11, 3, 96, 4, 4, None]
printing entry
['Conv2', 207, 207, 5, 5, 96, 256, 1, 1, None]
printing entry
['Conv3', 13, 13, 3, 3, 256, 384, 1, 1, None]
printing entry
['Conv4', 13, 13, 3, 3, 384, 384, 1, 1, None]
printing entry
['Conv5', 13, 13, 3, 3, 384, 256, 1, 1, None]
====================================================
******************* SCALE SIM **********************
====================================================
Array Size: 	128x128
SRAM IFMAP (kB): 	102400
SRAM Filter (kB): 	102400
SRAM OFMAP (kB): 	102400
Dataflow: 	Weight Stationary
CSV file path: 	topologies/conv_nets/alexnet_full.csv
Bandwidth: 	50
Working in USE USER BANDWIDTH mode.
====================================================

Running Layer 0
self.filter_addr_matrix
(363, 96)
[[  100   463   826 ... 33859 34222 34585]
 [  101   464   827 ... 33860 34223 34586]
 [  102   465   828 ... 33861 34224 34587]
 ...
 [  460   823  1186 ... 34219 34582 34945]
 [  461   824  1187 ... 34220 34583 34946]
 [  462   825  1188 ... 34221 34584 34947]]
SPARSITY INSIDE FILTER DEMAND MATRIX CREATION
No sparsity file - creating bitmap
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 ...
 [1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]]
final sparse array
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 ...
 [1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]]
after multiplying
(363, 96)
[[  100   463   826 ... 33859 34222 34585]
 [  101   464   827 ... 33860 34223 34586]
 [  102   465   828 ... 33861 34224 34587]
 ...
 [  460   823  1186 ... 34219 34582 34945]
 [  461   824  1187 ... 34220 34583 34946]
 [  462   825  1188 ... 34221 34584 34947]]
after reducing the filter array based on sparsity
[[  100   101   102 ...   461   462     0]
 [  463   464   465 ...   824   825     0]
 [  826   827   828 ...  1187  1188     0]
 ...
 [33859 33860 33861 ... 34220 34221     0]
 [34222 34223 34224 ... 34583 34584     0]
 [34585 34586 34587 ... 34946 34947     0]]
Final
(363, 96)
[[  100   463   826 ... 33859 34222 34585]
 [  101   464   827 ... 33860 34223 34586]
 [  102   465   828 ... 33861 34224 34587]
 ...
 [  460   823  1186 ... 34219 34582 34945]
 [  461   824  1187 ... 34220 34583 34946]
 [  462   825  1188 ... 34221 34584 34947]]
INSIDE INPUT FILTER DEMAND MATRIX CREATION FUNCTION
self.batch_size in ifmap function is  1
self.ifmap_addr_matrix
(3025, 363)
[[     0      1      2 ...   6750   6751   6752]
 [    12     13     14 ...   6762   6763   6764]
 [    24     25     26 ...   6774   6775   6776]
 ...
 [145776 145777 145778 ...     -1     -1     -1]
 [145788 145789 145790 ...     -1     -1     -1]
 [145800 145801 145802 ...     -1     -1     -1]]
Input sparsity being applied
[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
[[     0      1      2 ...   6750   6751   6752]
 [    12     13     14 ...   6762   6763   6764]
 [    24     25     26 ...   6774   6775   6776]
 ...
 [145776 145777 145778 ...     -1     -1     -1]
 [145788 145789 145790 ...     -1     -1     -1]
 [145800 145801 145802 ...     -1     -1     -1]]
[[     0      1      2 ...   6750   6751   6752]
 [    12     13     14 ...   6762   6763   6764]
 [    24     25     26 ...   6774   6775   6776]
 ...
 [145776 145777 145778 ...     -1     -1     -1]
 [145788 145789 145790 ...     -1     -1     -1]
 [145800 145801 145802 ...     -1     -1     -1]]
self.ifmap_addr_matrix for sparsity
[[     0      1      2 ...   6750   6751   6752]
 [    12     13     14 ...   6762   6763   6764]
 [    24     25     26 ...   6774   6775   6776]
 ...
 [145776 145777 145778 ...     -1     -1     -1]
 [145788 145789 145790 ...     -1     -1     -1]
 [145800 145801 145802 ...     -1     -1     -1]]
col_indices
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71
 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95]
self.ofmap_addr_matrix
[[   200    201    202 ...    293    294    295]
 [   296    297    298 ...    389    390    391]
 [   392    393    394 ...    485    486    487]
 ...
 [290312 290313 290314 ... 290405 290406 290407]
 [290408 290409 290410 ... 290501 290502 290503]
 [290504 290505 290506 ... 290597 290598 290599]]
these are the operand matrices
(3025, 363)
(363, 96)
(3025, 96)
[[     0      1      2 ...   6750   6751   6752]
 [    12     13     14 ...   6762   6763   6764]
 [    24     25     26 ...   6774   6775   6776]
 ...
 [145776 145777 145778 ...     -1     -1     -1]
 [145788 145789 145790 ...     -1     -1     -1]
 [145800 145801 145802 ...     -1     -1     -1]]
[[  100   463   826 ... 33859 34222 34585]
 [  101   464   827 ... 33860 34223 34586]
 [  102   465   828 ... 33861 34224 34587]
 ...
 [  460   823  1186 ... 34219 34582 34945]
 [  461   824  1187 ... 34220 34583 34946]
 [  462   825  1188 ... 34221 34584 34947]]
[[   200    201    202 ...    293    294    295]
 [   296    297    298 ...    389    390    391]
 [   392    393    394 ...    485    486    487]
 ...
 [290312 290313 290314 ... 290405 290406 290407]
 [290408 290409 290410 ... 290501 290502 290503]
 [290504 290505 290506 ... 290597 290598 290599]]
layer_calc_params[0] * layer_calc_params[1] * num_filters =  55 55 96
self.num_compute = self.topo.get_layer_num_ofmap_px(self.layer_id) * self.topo.get_layer_window_size(self.layer_id)
Nofmap: Number of OFMAP pixels generated by filter
layer_calc_params[0] * layer_calc_params[1] * num_filters =  55 55 96
105415200 = 290400 * 363
self.layer_id  0
filter matrix in create_filter_prefetch_mat
[[  100   463   826 ... 33859 34222 34585]
 [  101   464   827 ... 33860 34223 34586]
 [  102   465   828 ... 33861 34224 34587]
 ...
 [  460   823  1186 ... 34219 34582 34945]
 [  461   824  1187 ... 34220 34583 34946]
 [  462   825  1188 ... 34221 34584 34947]]
End
printing self.filter_prefetch_matrix is ws.py
[[ 1.000e+02  4.630e+02  8.260e+02 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [ 1.010e+02  4.640e+02  8.270e+02 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [ 1.020e+02  4.650e+02  8.280e+02 ... -1.000e+00 -1.000e+00 -1.000e+00]
 ...
 [ 4.600e+02  8.230e+02  1.186e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [ 4.610e+02  8.240e+02  1.187e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [ 4.620e+02  8.250e+02  1.188e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]]
387200.0
774400.0
1098075.0
printing self.filter_demand_matrix in ws.py
[[227. 590. 953. ...  -1.  -1.  -1.]
 [226. 589. 952. ...  -1.  -1.  -1.]
 [225. 588. 951. ...  -1.  -1.  -1.]
 ...
 [ -1.  -1.  -1. ...  -1.  -1.  -1.]
 [ -1.  -1.  -1. ...  -1.  -1.  -1.]
 [ -1.  -1.  -1. ...  -1.  -1.  -1.]]
These are the demand matrices
ifmap_demand_mat demand matrix
[[-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 ...
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]]
filter_demand_mat demand matrix
[[227. 590. 953. ...  -1.  -1.  -1.]
 [226. 589. 952. ...  -1.  -1.  -1.]
 [225. 588. 951. ...  -1.  -1.  -1.]
 ...
 [ -1.  -1.  -1. ...  -1.  -1.  -1.]
 [ -1.  -1.  -1. ...  -1.  -1.  -1.]
 [ -1.  -1.  -1. ...  -1.  -1.  -1.]]
ofmap_demand_mat demand matrix
[[-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 ...
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]]
Compute cycles: 10220
Stall cycles: 0
Overall utilization: 62.96%
Mapping efficiency: 70.90%
Average IFMAP SRAM BW: 1181.881 words/cycle
Average Filter SRAM BW: 3.410 words/cycle
Average Filter Metadata SRAM BW: 0.213 words/cycle
Average OFMAP SRAM BW: 85.245 words/cycle
Average IFMAP DRAM BW: 50.000 words/cycle
Average Filter DRAM BW: 50.000 words/cycle
Average OFMAP DRAM BW: 50.000 words/cycle

Running Layer 1
self.filter_addr_matrix
(2400, 256)
[[   100   2500   4900 ... 607300 609700 612100]
 [   101   2501   4901 ... 607301 609701 612101]
 [   102   2502   4902 ... 607302 609702 612102]
 ...
 [  2497   4897   7297 ... 609697 612097 614497]
 [  2498   4898   7298 ... 609698 612098 614498]
 [  2499   4899   7299 ... 609699 612099 614499]]
SPARSITY INSIDE FILTER DEMAND MATRIX CREATION
No sparsity file - creating bitmap
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 ...
 [1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]]
final sparse array
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 ...
 [1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]]
after multiplying
(2400, 256)
[[   100   2500   4900 ... 607300 609700 612100]
 [   101   2501   4901 ... 607301 609701 612101]
 [   102   2502   4902 ... 607302 609702 612102]
 ...
 [  2497   4897   7297 ... 609697 612097 614497]
 [  2498   4898   7298 ... 609698 612098 614498]
 [  2499   4899   7299 ... 609699 612099 614499]]
after reducing the filter array based on sparsity
[[   100    101    102 ...   2497   2498   2499]
 [  2500   2501   2502 ...   4897   4898   4899]
 [  4900   4901   4902 ...   7297   7298   7299]
 ...
 [607300 607301 607302 ... 609697 609698 609699]
 [609700 609701 609702 ... 612097 612098 612099]
 [612100 612101 612102 ... 614497 614498 614499]]
Final
(2400, 256)
[[   100   2500   4900 ... 607300 609700 612100]
 [   101   2501   4901 ... 607301 609701 612101]
 [   102   2502   4902 ... 607302 609702 612102]
 ...
 [  2497   4897   7297 ... 609697 612097 614497]
 [  2498   4898   7298 ... 609698 612098 614498]
 [  2499   4899   7299 ... 609699 612099 614499]]
INSIDE INPUT FILTER DEMAND MATRIX CREATION FUNCTION
self.batch_size in ifmap function is  1
self.ifmap_addr_matrix
(41209, 2400)
[[      0       1       2 ...   79965   79966   79967]
 [     96      97      98 ...   80061   80062   80063]
 [    192     193     194 ...   80157   80158   80159]
 ...
 [4033344 4033345 4033346 ... 4113309 4113310 4113311]
 [4033440 4033441 4033442 ... 4113405 4113406 4113407]
 [4033536 4033537 4033538 ... 4113501 4113502 4113503]]
Input sparsity being applied
[1 1 1 ... 1 1 1]
[[      0       1       2 ...   79965   79966   79967]
 [     96      97      98 ...   80061   80062   80063]
 [    192     193     194 ...   80157   80158   80159]
 ...
 [4033344 4033345 4033346 ... 4113309 4113310 4113311]
 [4033440 4033441 4033442 ... 4113405 4113406 4113407]
 [4033536 4033537 4033538 ... 4113501 4113502 4113503]]
[[      0       1       2 ...   79965   79966   79967]
 [     96      97      98 ...   80061   80062   80063]
 [    192     193     194 ...   80157   80158   80159]
 ...
 [4033344 4033345 4033346 ... 4113309 4113310 4113311]
 [4033440 4033441 4033442 ... 4113405 4113406 4113407]
 [4033536 4033537 4033538 ... 4113501 4113502 4113503]]
self.ifmap_addr_matrix for sparsity
[[      0       1       2 ...   79965   79966   79967]
 [     96      97      98 ...   80061   80062   80063]
 [    192     193     194 ...   80157   80158   80159]
 ...
 [4033344 4033345 4033346 ... 4113309 4113310 4113311]
 [4033440 4033441 4033442 ... 4113405 4113406 4113407]
 [4033536 4033537 4033538 ... 4113501 4113502 4113503]]
col_indices
[  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35
  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53
  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71
  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89
  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107
 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125
 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143
 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161
 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179
 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197
 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215
 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233
 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251
 252 253 254 255]
self.ofmap_addr_matrix
[[     200      201      202 ...      453      454      455]
 [     456      457      458 ...      709      710      711]
 [     712      713      714 ...      965      966      967]
 ...
 [10548936 10548937 10548938 ... 10549189 10549190 10549191]
 [10549192 10549193 10549194 ... 10549445 10549446 10549447]
 [10549448 10549449 10549450 ... 10549701 10549702 10549703]]
these are the operand matrices
(41209, 2400)
(2400, 256)
(41209, 256)
[[      0       1       2 ...   79965   79966   79967]
 [     96      97      98 ...   80061   80062   80063]
 [    192     193     194 ...   80157   80158   80159]
 ...
 [4033344 4033345 4033346 ... 4113309 4113310 4113311]
 [4033440 4033441 4033442 ... 4113405 4113406 4113407]
 [4033536 4033537 4033538 ... 4113501 4113502 4113503]]
[[   100   2500   4900 ... 607300 609700 612100]
 [   101   2501   4901 ... 607301 609701 612101]
 [   102   2502   4902 ... 607302 609702 612102]
 ...
 [  2497   4897   7297 ... 609697 612097 614497]
 [  2498   4898   7298 ... 609698 612098 614498]
 [  2499   4899   7299 ... 609699 612099 614499]]
[[     200      201      202 ...      453      454      455]
 [     456      457      458 ...      709      710      711]
 [     712      713      714 ...      965      966      967]
 ...
 [10548936 10548937 10548938 ... 10549189 10549190 10549191]
 [10549192 10549193 10549194 ... 10549445 10549446 10549447]
 [10549448 10549449 10549450 ... 10549701 10549702 10549703]]
layer_calc_params[0] * layer_calc_params[1] * num_filters =  203 203 256
self.num_compute = self.topo.get_layer_num_ofmap_px(self.layer_id) * self.topo.get_layer_window_size(self.layer_id)
Nofmap: Number of OFMAP pixels generated by filter
layer_calc_params[0] * layer_calc_params[1] * num_filters =  203 203 256
25318809600 = 10549504 * 2400
self.layer_id  1
filter matrix in create_filter_prefetch_mat
[[   100   2500   4900 ... 607300 609700 612100]
 [   101   2501   4901 ... 607301 609701 612101]
 [   102   2502   4902 ... 607302 609702 612102]
 ...
 [  2497   4897   7297 ... 609697 612097 614497]
 [  2498   4898   7298 ... 609698 612098 614498]
 [  2499   4899   7299 ... 609699 612099 614499]]
End
printing self.filter_prefetch_matrix is ws.py
[[   100   2500   4900 ... 300100 302500 304900]
 [   101   2501   4901 ... 300101 302501 304901]
 [   102   2502   4902 ... 300102 302502 304902]
 ...
 [309697 312097 314497 ... 609697 612097 614497]
 [309698 312098 314498 ... 609698 612098 614498]
 [309699 312099 314499 ... 609699 612099 614499]]
5274752.0
10549504.0
15824256.0
21099008.0
26373760.0
31648512.0
36923264.0
42198016.0
47472768.0
52747520.0
58022272.0
63297024.0
68571776.0
73846528.0
79121280.0
84396032.0
89670784.0
94945536.0
98901600.0
104176352.0
109451104.0
114725856.0
120000608.0
125275360.0
130550112.0
135824864.0
141099616.0
146374368.0
151649120.0
156923872.0
162198624.0
167473376.0
172748128.0
178022880.0
183297632.0
188572384.0
193847136.0
197803200.0
printing self.filter_demand_matrix in ws.py
[[ 2.27000e+02  2.62700e+03  5.02700e+03 ...  3.00227e+05  3.02627e+05
   3.05027e+05]
 [ 2.26000e+02  2.62600e+03  5.02600e+03 ...  3.00226e+05  3.02626e+05
   3.05026e+05]
 [ 2.25000e+02  2.62500e+03  5.02500e+03 ...  3.00225e+05  3.02625e+05
   3.05025e+05]
 ...
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]]
These are the demand matrices
ifmap_demand_mat demand matrix
[[-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 ...
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]]
filter_demand_mat demand matrix
[[ 2.27000e+02  2.62700e+03  5.02700e+03 ...  3.00227e+05  3.02627e+05
   3.05027e+05]
 [ 2.26000e+02  2.62600e+03  5.02600e+03 ...  3.00226e+05  3.02626e+05
   3.05026e+05]
 [ 2.25000e+02  2.62500e+03  5.02500e+03 ...  3.00225e+05  3.02625e+05
   3.05025e+05]
 ...
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]]
ofmap_demand_mat demand matrix
[[-1.0000000e+00 -1.0000000e+00 -1.0000000e+00 ... -1.0000000e+00
  -1.0000000e+00 -1.0000000e+00]
 [-1.0000000e+00 -1.0000000e+00 -1.0000000e+00 ... -1.0000000e+00
  -1.0000000e+00 -1.0000000e+00]
 [-1.0000000e+00 -1.0000000e+00 -1.0000000e+00 ... -1.0000000e+00
  -1.0000000e+00 -1.0000000e+00]
 ...
 [-1.0000000e+00 -1.0000000e+00 -1.0000000e+00 ...  1.0549701e+07
   1.0549446e+07  1.0549191e+07]
 [-1.0000000e+00 -1.0000000e+00 -1.0000000e+00 ... -1.0000000e+00
   1.0549702e+07  1.0549447e+07]
 [-1.0000000e+00 -1.0000000e+00 -1.0000000e+00 ... -1.0000000e+00
  -1.0000000e+00  1.0549703e+07]]
Compute cycles: 4236151
Stall cycles: 2655694
Overall utilization: 36.48%
Mapping efficiency: 98.68%
Average IFMAP SRAM BW: 233.470 words/cycle
Average Filter SRAM BW: 0.145 words/cycle
Average Filter Metadata SRAM BW: 0.009 words/cycle
Average OFMAP SRAM BW: 47.317 words/cycle
Average IFMAP DRAM BW: 50.000 words/cycle
Average Filter DRAM BW: 50.000 words/cycle
Average OFMAP DRAM BW: 42.775 words/cycle

Running Layer 2
self.filter_addr_matrix
(2304, 384)
[[   100   2404   4708 ... 877924 880228 882532]
 [   101   2405   4709 ... 877925 880229 882533]
 [   102   2406   4710 ... 877926 880230 882534]
 ...
 [  2401   4705   7009 ... 880225 882529 884833]
 [  2402   4706   7010 ... 880226 882530 884834]
 [  2403   4707   7011 ... 880227 882531 884835]]
SPARSITY INSIDE FILTER DEMAND MATRIX CREATION
No sparsity file - creating bitmap
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 ...
 [1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]]
final sparse array
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 ...
 [1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]]
after multiplying
(2304, 384)
[[   100   2404   4708 ... 877924 880228 882532]
 [   101   2405   4709 ... 877925 880229 882533]
 [   102   2406   4710 ... 877926 880230 882534]
 ...
 [  2401   4705   7009 ... 880225 882529 884833]
 [  2402   4706   7010 ... 880226 882530 884834]
 [  2403   4707   7011 ... 880227 882531 884835]]
after reducing the filter array based on sparsity
[[   100    101    102 ...   2401   2402   2403]
 [  2404   2405   2406 ...   4705   4706   4707]
 [  4708   4709   4710 ...   7009   7010   7011]
 ...
 [877924 877925 877926 ... 880225 880226 880227]
 [880228 880229 880230 ... 882529 882530 882531]
 [882532 882533 882534 ... 884833 884834 884835]]
Final
(2304, 384)
[[   100   2404   4708 ... 877924 880228 882532]
 [   101   2405   4709 ... 877925 880229 882533]
 [   102   2406   4710 ... 877926 880230 882534]
 ...
 [  2401   4705   7009 ... 880225 882529 884833]
 [  2402   4706   7010 ... 880226 882530 884834]
 [  2403   4707   7011 ... 880227 882531 884835]]
INSIDE INPUT FILTER DEMAND MATRIX CREATION FUNCTION
self.batch_size in ifmap function is  1
self.ifmap_addr_matrix
(121, 2304)
[[    0     1     2 ...  7421  7422  7423]
 [  256   257   258 ...  7677  7678  7679]
 [  512   513   514 ...  7933  7934  7935]
 ...
 [35328 35329 35330 ... 42749 42750 42751]
 [35584 35585 35586 ... 43005 43006 43007]
 [35840 35841 35842 ... 43261 43262 43263]]
Input sparsity being applied
[1 1 1 ... 1 1 1]
[[    0     1     2 ...  7421  7422  7423]
 [  256   257   258 ...  7677  7678  7679]
 [  512   513   514 ...  7933  7934  7935]
 ...
 [35328 35329 35330 ... 42749 42750 42751]
 [35584 35585 35586 ... 43005 43006 43007]
 [35840 35841 35842 ... 43261 43262 43263]]
[[    0     1     2 ...  7421  7422  7423]
 [  256   257   258 ...  7677  7678  7679]
 [  512   513   514 ...  7933  7934  7935]
 ...
 [35328 35329 35330 ... 42749 42750 42751]
 [35584 35585 35586 ... 43005 43006 43007]
 [35840 35841 35842 ... 43261 43262 43263]]
self.ifmap_addr_matrix for sparsity
[[    0     1     2 ...  7421  7422  7423]
 [  256   257   258 ...  7677  7678  7679]
 [  512   513   514 ...  7933  7934  7935]
 ...
 [35328 35329 35330 ... 42749 42750 42751]
 [35584 35585 35586 ... 43005 43006 43007]
 [35840 35841 35842 ... 43261 43262 43263]]
col_indices
[  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35
  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53
  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71
  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89
  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107
 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125
 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143
 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161
 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179
 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197
 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215
 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233
 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251
 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269
 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287
 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305
 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323
 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341
 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359
 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377
 378 379 380 381 382 383]
self.ofmap_addr_matrix
[[  200   201   202 ...   581   582   583]
 [  584   585   586 ...   965   966   967]
 [  968   969   970 ...  1349  1350  1351]
 ...
 [45512 45513 45514 ... 45893 45894 45895]
 [45896 45897 45898 ... 46277 46278 46279]
 [46280 46281 46282 ... 46661 46662 46663]]
these are the operand matrices
(121, 2304)
(2304, 384)
(121, 384)
[[    0     1     2 ...  7421  7422  7423]
 [  256   257   258 ...  7677  7678  7679]
 [  512   513   514 ...  7933  7934  7935]
 ...
 [35328 35329 35330 ... 42749 42750 42751]
 [35584 35585 35586 ... 43005 43006 43007]
 [35840 35841 35842 ... 43261 43262 43263]]
[[   100   2404   4708 ... 877924 880228 882532]
 [   101   2405   4709 ... 877925 880229 882533]
 [   102   2406   4710 ... 877926 880230 882534]
 ...
 [  2401   4705   7009 ... 880225 882529 884833]
 [  2402   4706   7010 ... 880226 882530 884834]
 [  2403   4707   7011 ... 880227 882531 884835]]
[[  200   201   202 ...   581   582   583]
 [  584   585   586 ...   965   966   967]
 [  968   969   970 ...  1349  1350  1351]
 ...
 [45512 45513 45514 ... 45893 45894 45895]
 [45896 45897 45898 ... 46277 46278 46279]
 [46280 46281 46282 ... 46661 46662 46663]]
layer_calc_params[0] * layer_calc_params[1] * num_filters =  11 11 384
self.num_compute = self.topo.get_layer_num_ofmap_px(self.layer_id) * self.topo.get_layer_window_size(self.layer_id)
Nofmap: Number of OFMAP pixels generated by filter
layer_calc_params[0] * layer_calc_params[1] * num_filters =  11 11 384
107053056 = 46464 * 2304
self.layer_id  2
filter matrix in create_filter_prefetch_mat
[[   100   2404   4708 ... 877924 880228 882532]
 [   101   2405   4709 ... 877925 880229 882533]
 [   102   2406   4710 ... 877926 880230 882534]
 ...
 [  2401   4705   7009 ... 880225 882529 884833]
 [  2402   4706   7010 ... 880226 882530 884834]
 [  2403   4707   7011 ... 880227 882531 884835]]
End
printing self.filter_prefetch_matrix is ws.py
[[   100   2404   4708 ... 288100 290404 292708]
 [   101   2405   4709 ... 288101 290405 292709]
 [   102   2406   4710 ... 288102 290406 292710]
 ...
 [592225 594529 596833 ... 880225 882529 884833]
 [592226 594530 596834 ... 880226 882530 884834]
 [592227 594531 596835 ... 880227 882531 884835]]
15488.0
30976.0
46464.0
61952.0
77440.0
92928.0
108416.0
123904.0
139392.0
154880.0
170368.0
185856.0
201344.0
216832.0
232320.0
247808.0
263296.0
278784.0
294272.0
309760.0
325248.0
340736.0
356224.0
371712.0
387200.0
402688.0
418176.0
433664.0
449152.0
464640.0
480128.0
495616.0
511104.0
526592.0
542080.0
557568.0
573056.0
588544.0
604032.0
619520.0
635008.0
650496.0
665984.0
681472.0
696960.0
712448.0
727936.0
743424.0
758912.0
774400.0
789888.0
805376.0
820864.0
836352.0
printing self.filter_demand_matrix in ws.py
[[ 2.27000e+02  2.53100e+03  4.83500e+03 ...  2.88227e+05  2.90531e+05
   2.92835e+05]
 [ 2.26000e+02  2.53000e+03  4.83400e+03 ...  2.88226e+05  2.90530e+05
   2.92834e+05]
 [ 2.25000e+02  2.52900e+03  4.83300e+03 ...  2.88225e+05  2.90529e+05
   2.92833e+05]
 ...
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]]
These are the demand matrices
ifmap_demand_mat demand matrix
[[-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 ...
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]]
filter_demand_mat demand matrix
[[ 2.27000e+02  2.53100e+03  4.83500e+03 ...  2.88227e+05  2.90531e+05
   2.92835e+05]
 [ 2.26000e+02  2.53000e+03  4.83400e+03 ...  2.88226e+05  2.90530e+05
   2.92834e+05]
 [ 2.25000e+02  2.52900e+03  4.83300e+03 ...  2.88225e+05  2.90529e+05
   2.92833e+05]
 ...
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]]
ofmap_demand_mat demand matrix
[[-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 ...
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ...  4.6661e+04  4.6278e+04
   4.5895e+04]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00  4.6662e+04
   4.6279e+04]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
   4.6663e+04]]
Compute cycles: 27161
Stall cycles: 0
Overall utilization: 24.06%
Mapping efficiency: 100.00%
Average IFMAP SRAM BW: 92.377 words/cycle
Average Filter SRAM BW: 32.574 words/cycle
Average Filter Metadata SRAM BW: 2.036 words/cycle
Average OFMAP SRAM BW: 30.792 words/cycle
Average IFMAP DRAM BW: 50.000 words/cycle
Average Filter DRAM BW: 50.000 words/cycle
Average OFMAP DRAM BW: 49.997 words/cycle

Running Layer 3
self.filter_addr_matrix
(3456, 384)
[[    100    3556    7012 ... 1316836 1320292 1323748]
 [    101    3557    7013 ... 1316837 1320293 1323749]
 [    102    3558    7014 ... 1316838 1320294 1323750]
 ...
 [   3553    7009   10465 ... 1320289 1323745 1327201]
 [   3554    7010   10466 ... 1320290 1323746 1327202]
 [   3555    7011   10467 ... 1320291 1323747 1327203]]
SPARSITY INSIDE FILTER DEMAND MATRIX CREATION
No sparsity file - creating bitmap
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 ...
 [1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]]
final sparse array
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 ...
 [1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]]
after multiplying
(3456, 384)
[[    100    3556    7012 ... 1316836 1320292 1323748]
 [    101    3557    7013 ... 1316837 1320293 1323749]
 [    102    3558    7014 ... 1316838 1320294 1323750]
 ...
 [   3553    7009   10465 ... 1320289 1323745 1327201]
 [   3554    7010   10466 ... 1320290 1323746 1327202]
 [   3555    7011   10467 ... 1320291 1323747 1327203]]
after reducing the filter array based on sparsity
[[    100     101     102 ...    3553    3554    3555]
 [   3556    3557    3558 ...    7009    7010    7011]
 [   7012    7013    7014 ...   10465   10466   10467]
 ...
 [1316836 1316837 1316838 ... 1320289 1320290 1320291]
 [1320292 1320293 1320294 ... 1323745 1323746 1323747]
 [1323748 1323749 1323750 ... 1327201 1327202 1327203]]
Final
(3456, 384)
[[    100    3556    7012 ... 1316836 1320292 1323748]
 [    101    3557    7013 ... 1316837 1320293 1323749]
 [    102    3558    7014 ... 1316838 1320294 1323750]
 ...
 [   3553    7009   10465 ... 1320289 1323745 1327201]
 [   3554    7010   10466 ... 1320290 1323746 1327202]
 [   3555    7011   10467 ... 1320291 1323747 1327203]]
INSIDE INPUT FILTER DEMAND MATRIX CREATION FUNCTION
self.batch_size in ifmap function is  1
self.ifmap_addr_matrix
(121, 3456)
[[    0     1     2 ... 11133 11134 11135]
 [  384   385   386 ... 11517 11518 11519]
 [  768   769   770 ... 11901 11902 11903]
 ...
 [52992 52993 52994 ... 64125 64126 64127]
 [53376 53377 53378 ... 64509 64510 64511]
 [53760 53761 53762 ... 64893 64894 64895]]
Input sparsity being applied
[1 1 1 ... 1 1 1]
[[    0     1     2 ... 11133 11134 11135]
 [  384   385   386 ... 11517 11518 11519]
 [  768   769   770 ... 11901 11902 11903]
 ...
 [52992 52993 52994 ... 64125 64126 64127]
 [53376 53377 53378 ... 64509 64510 64511]
 [53760 53761 53762 ... 64893 64894 64895]]
[[    0     1     2 ... 11133 11134 11135]
 [  384   385   386 ... 11517 11518 11519]
 [  768   769   770 ... 11901 11902 11903]
 ...
 [52992 52993 52994 ... 64125 64126 64127]
 [53376 53377 53378 ... 64509 64510 64511]
 [53760 53761 53762 ... 64893 64894 64895]]
self.ifmap_addr_matrix for sparsity
[[    0     1     2 ... 11133 11134 11135]
 [  384   385   386 ... 11517 11518 11519]
 [  768   769   770 ... 11901 11902 11903]
 ...
 [52992 52993 52994 ... 64125 64126 64127]
 [53376 53377 53378 ... 64509 64510 64511]
 [53760 53761 53762 ... 64893 64894 64895]]
col_indices
[  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35
  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53
  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71
  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89
  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107
 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125
 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143
 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161
 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179
 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197
 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215
 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233
 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251
 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269
 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287
 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305
 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323
 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341
 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359
 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377
 378 379 380 381 382 383]
self.ofmap_addr_matrix
[[  200   201   202 ...   581   582   583]
 [  584   585   586 ...   965   966   967]
 [  968   969   970 ...  1349  1350  1351]
 ...
 [45512 45513 45514 ... 45893 45894 45895]
 [45896 45897 45898 ... 46277 46278 46279]
 [46280 46281 46282 ... 46661 46662 46663]]
these are the operand matrices
(121, 3456)
(3456, 384)
(121, 384)
[[    0     1     2 ... 11133 11134 11135]
 [  384   385   386 ... 11517 11518 11519]
 [  768   769   770 ... 11901 11902 11903]
 ...
 [52992 52993 52994 ... 64125 64126 64127]
 [53376 53377 53378 ... 64509 64510 64511]
 [53760 53761 53762 ... 64893 64894 64895]]
[[    100    3556    7012 ... 1316836 1320292 1323748]
 [    101    3557    7013 ... 1316837 1320293 1323749]
 [    102    3558    7014 ... 1316838 1320294 1323750]
 ...
 [   3553    7009   10465 ... 1320289 1323745 1327201]
 [   3554    7010   10466 ... 1320290 1323746 1327202]
 [   3555    7011   10467 ... 1320291 1323747 1327203]]
[[  200   201   202 ...   581   582   583]
 [  584   585   586 ...   965   966   967]
 [  968   969   970 ...  1349  1350  1351]
 ...
 [45512 45513 45514 ... 45893 45894 45895]
 [45896 45897 45898 ... 46277 46278 46279]
 [46280 46281 46282 ... 46661 46662 46663]]
layer_calc_params[0] * layer_calc_params[1] * num_filters =  11 11 384
self.num_compute = self.topo.get_layer_num_ofmap_px(self.layer_id) * self.topo.get_layer_window_size(self.layer_id)
Nofmap: Number of OFMAP pixels generated by filter
layer_calc_params[0] * layer_calc_params[1] * num_filters =  11 11 384
160579584 = 46464 * 3456
self.layer_id  3
filter matrix in create_filter_prefetch_mat
[[    100    3556    7012 ... 1316836 1320292 1323748]
 [    101    3557    7013 ... 1316837 1320293 1323749]
 [    102    3558    7014 ... 1316838 1320294 1323750]
 ...
 [   3553    7009   10465 ... 1320289 1323745 1327201]
 [   3554    7010   10466 ... 1320290 1323746 1327202]
 [   3555    7011   10467 ... 1320291 1323747 1327203]]
End
printing self.filter_prefetch_matrix is ws.py
[[    100    3556    7012 ...  432100  435556  439012]
 [    101    3557    7013 ...  432101  435557  439013]
 [    102    3558    7014 ...  432102  435558  439014]
 ...
 [ 888289  891745  895201 ... 1320289 1323745 1327201]
 [ 888290  891746  895202 ... 1320290 1323746 1327202]
 [ 888291  891747  895203 ... 1320291 1323747 1327203]]
15488.0
30976.0
46464.0
61952.0
77440.0
92928.0
108416.0
123904.0
139392.0
154880.0
170368.0
185856.0
201344.0
216832.0
232320.0
247808.0
263296.0
278784.0
294272.0
309760.0
325248.0
340736.0
356224.0
371712.0
387200.0
402688.0
418176.0
433664.0
449152.0
464640.0
480128.0
495616.0
511104.0
526592.0
542080.0
557568.0
573056.0
588544.0
604032.0
619520.0
635008.0
650496.0
665984.0
681472.0
696960.0
712448.0
727936.0
743424.0
758912.0
774400.0
789888.0
805376.0
820864.0
836352.0
851840.0
867328.0
882816.0
898304.0
913792.0
929280.0
944768.0
960256.0
975744.0
991232.0
1006720.0
1022208.0
1037696.0
1053184.0
1068672.0
1084160.0
1099648.0
1115136.0
1130624.0
1146112.0
1161600.0
1177088.0
1192576.0
1208064.0
1223552.0
1239040.0
1254528.0
printing self.filter_demand_matrix in ws.py
[[ 2.27000e+02  3.68300e+03  7.13900e+03 ...  4.32227e+05  4.35683e+05
   4.39139e+05]
 [ 2.26000e+02  3.68200e+03  7.13800e+03 ...  4.32226e+05  4.35682e+05
   4.39138e+05]
 [ 2.25000e+02  3.68100e+03  7.13700e+03 ...  4.32225e+05  4.35681e+05
   4.39137e+05]
 ...
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]]
These are the demand matrices
ifmap_demand_mat demand matrix
[[-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 ...
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]]
filter_demand_mat demand matrix
[[ 2.27000e+02  3.68300e+03  7.13900e+03 ...  4.32227e+05  4.35683e+05
   4.39139e+05]
 [ 2.26000e+02  3.68200e+03  7.13800e+03 ...  4.32226e+05  4.35682e+05
   4.39138e+05]
 [ 2.25000e+02  3.68100e+03  7.13700e+03 ...  4.32225e+05  4.35681e+05
   4.39137e+05]
 ...
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]]
ofmap_demand_mat demand matrix
[[-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 ...
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ...  4.6661e+04  4.6278e+04
   4.5895e+04]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00  4.6662e+04
   4.6279e+04]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
   4.6663e+04]]
Compute cycles: 40742
Stall cycles: 0
Overall utilization: 24.06%
Mapping efficiency: 100.00%
Average IFMAP SRAM BW: 92.376 words/cycle
Average Filter SRAM BW: 32.573 words/cycle
Average Filter Metadata SRAM BW: 2.036 words/cycle
Average OFMAP SRAM BW: 30.792 words/cycle
Average IFMAP DRAM BW: 50.000 words/cycle
Average Filter DRAM BW: 50.000 words/cycle
Average OFMAP DRAM BW: 49.999 words/cycle

Running Layer 4
self.filter_addr_matrix
(3456, 256)
[[   100   3556   7012 ... 874468 877924 881380]
 [   101   3557   7013 ... 874469 877925 881381]
 [   102   3558   7014 ... 874470 877926 881382]
 ...
 [  3553   7009  10465 ... 877921 881377 884833]
 [  3554   7010  10466 ... 877922 881378 884834]
 [  3555   7011  10467 ... 877923 881379 884835]]
SPARSITY INSIDE FILTER DEMAND MATRIX CREATION
No sparsity file - creating bitmap
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 ...
 [1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]]
final sparse array
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 ...
 [1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]]
after multiplying
(3456, 256)
[[   100   3556   7012 ... 874468 877924 881380]
 [   101   3557   7013 ... 874469 877925 881381]
 [   102   3558   7014 ... 874470 877926 881382]
 ...
 [  3553   7009  10465 ... 877921 881377 884833]
 [  3554   7010  10466 ... 877922 881378 884834]
 [  3555   7011  10467 ... 877923 881379 884835]]
after reducing the filter array based on sparsity
[[   100    101    102 ...   3553   3554   3555]
 [  3556   3557   3558 ...   7009   7010   7011]
 [  7012   7013   7014 ...  10465  10466  10467]
 ...
 [874468 874469 874470 ... 877921 877922 877923]
 [877924 877925 877926 ... 881377 881378 881379]
 [881380 881381 881382 ... 884833 884834 884835]]
Final
(3456, 256)
[[   100   3556   7012 ... 874468 877924 881380]
 [   101   3557   7013 ... 874469 877925 881381]
 [   102   3558   7014 ... 874470 877926 881382]
 ...
 [  3553   7009  10465 ... 877921 881377 884833]
 [  3554   7010  10466 ... 877922 881378 884834]
 [  3555   7011  10467 ... 877923 881379 884835]]
INSIDE INPUT FILTER DEMAND MATRIX CREATION FUNCTION
self.batch_size in ifmap function is  1
self.ifmap_addr_matrix
(121, 3456)
[[    0     1     2 ... 11133 11134 11135]
 [  384   385   386 ... 11517 11518 11519]
 [  768   769   770 ... 11901 11902 11903]
 ...
 [52992 52993 52994 ... 64125 64126 64127]
 [53376 53377 53378 ... 64509 64510 64511]
 [53760 53761 53762 ... 64893 64894 64895]]
Input sparsity being applied
[1 1 1 ... 1 1 1]
[[    0     1     2 ... 11133 11134 11135]
 [  384   385   386 ... 11517 11518 11519]
 [  768   769   770 ... 11901 11902 11903]
 ...
 [52992 52993 52994 ... 64125 64126 64127]
 [53376 53377 53378 ... 64509 64510 64511]
 [53760 53761 53762 ... 64893 64894 64895]]
[[    0     1     2 ... 11133 11134 11135]
 [  384   385   386 ... 11517 11518 11519]
 [  768   769   770 ... 11901 11902 11903]
 ...
 [52992 52993 52994 ... 64125 64126 64127]
 [53376 53377 53378 ... 64509 64510 64511]
 [53760 53761 53762 ... 64893 64894 64895]]
self.ifmap_addr_matrix for sparsity
[[    0     1     2 ... 11133 11134 11135]
 [  384   385   386 ... 11517 11518 11519]
 [  768   769   770 ... 11901 11902 11903]
 ...
 [52992 52993 52994 ... 64125 64126 64127]
 [53376 53377 53378 ... 64509 64510 64511]
 [53760 53761 53762 ... 64893 64894 64895]]
col_indices
[  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35
  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53
  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71
  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89
  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107
 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125
 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143
 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161
 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179
 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197
 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215
 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233
 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251
 252 253 254 255]
self.ofmap_addr_matrix
[[  200   201   202 ...   453   454   455]
 [  456   457   458 ...   709   710   711]
 [  712   713   714 ...   965   966   967]
 ...
 [30408 30409 30410 ... 30661 30662 30663]
 [30664 30665 30666 ... 30917 30918 30919]
 [30920 30921 30922 ... 31173 31174 31175]]
these are the operand matrices
(121, 3456)
(3456, 256)
(121, 256)
[[    0     1     2 ... 11133 11134 11135]
 [  384   385   386 ... 11517 11518 11519]
 [  768   769   770 ... 11901 11902 11903]
 ...
 [52992 52993 52994 ... 64125 64126 64127]
 [53376 53377 53378 ... 64509 64510 64511]
 [53760 53761 53762 ... 64893 64894 64895]]
[[   100   3556   7012 ... 874468 877924 881380]
 [   101   3557   7013 ... 874469 877925 881381]
 [   102   3558   7014 ... 874470 877926 881382]
 ...
 [  3553   7009  10465 ... 877921 881377 884833]
 [  3554   7010  10466 ... 877922 881378 884834]
 [  3555   7011  10467 ... 877923 881379 884835]]
[[  200   201   202 ...   453   454   455]
 [  456   457   458 ...   709   710   711]
 [  712   713   714 ...   965   966   967]
 ...
 [30408 30409 30410 ... 30661 30662 30663]
 [30664 30665 30666 ... 30917 30918 30919]
 [30920 30921 30922 ... 31173 31174 31175]]
layer_calc_params[0] * layer_calc_params[1] * num_filters =  11 11 256
self.num_compute = self.topo.get_layer_num_ofmap_px(self.layer_id) * self.topo.get_layer_window_size(self.layer_id)
Nofmap: Number of OFMAP pixels generated by filter
layer_calc_params[0] * layer_calc_params[1] * num_filters =  11 11 256
107053056 = 30976 * 3456
self.layer_id  4
filter matrix in create_filter_prefetch_mat
[[   100   3556   7012 ... 874468 877924 881380]
 [   101   3557   7013 ... 874469 877925 881381]
 [   102   3558   7014 ... 874470 877926 881382]
 ...
 [  3553   7009  10465 ... 877921 881377 884833]
 [  3554   7010  10466 ... 877922 881378 884834]
 [  3555   7011  10467 ... 877923 881379 884835]]
End
printing self.filter_prefetch_matrix is ws.py
[[   100   3556   7012 ... 432100 435556 439012]
 [   101   3557   7013 ... 432101 435557 439013]
 [   102   3558   7014 ... 432102 435558 439014]
 ...
 [445921 449377 452833 ... 877921 881377 884833]
 [445922 449378 452834 ... 877922 881378 884834]
 [445923 449379 452835 ... 877923 881379 884835]]
15488.0
30976.0
46464.0
61952.0
77440.0
92928.0
108416.0
123904.0
139392.0
154880.0
170368.0
185856.0
201344.0
216832.0
232320.0
247808.0
263296.0
278784.0
294272.0
309760.0
325248.0
340736.0
356224.0
371712.0
387200.0
402688.0
418176.0
433664.0
449152.0
464640.0
480128.0
495616.0
511104.0
526592.0
542080.0
557568.0
573056.0
588544.0
604032.0
619520.0
635008.0
650496.0
665984.0
681472.0
696960.0
712448.0
727936.0
743424.0
758912.0
774400.0
789888.0
805376.0
820864.0
836352.0
printing self.filter_demand_matrix in ws.py
[[ 2.27000e+02  3.68300e+03  7.13900e+03 ...  4.32227e+05  4.35683e+05
   4.39139e+05]
 [ 2.26000e+02  3.68200e+03  7.13800e+03 ...  4.32226e+05  4.35682e+05
   4.39138e+05]
 [ 2.25000e+02  3.68100e+03  7.13700e+03 ...  4.32225e+05  4.35681e+05
   4.39137e+05]
 ...
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]]
These are the demand matrices
ifmap_demand_mat demand matrix
[[-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 ...
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]]
filter_demand_mat demand matrix
[[ 2.27000e+02  3.68300e+03  7.13900e+03 ...  4.32227e+05  4.35683e+05
   4.39139e+05]
 [ 2.26000e+02  3.68200e+03  7.13800e+03 ...  4.32226e+05  4.35682e+05
   4.39138e+05]
 [ 2.25000e+02  3.68100e+03  7.13700e+03 ...  4.32225e+05  4.35681e+05
   4.39137e+05]
 ...
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]]
ofmap_demand_mat demand matrix
[[-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 ...
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ...  3.1173e+04  3.0918e+04
   3.0663e+04]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00  3.1174e+04
   3.0919e+04]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
   3.1175e+04]]
Compute cycles: 27161
Stall cycles: 0
Overall utilization: 24.06%
Mapping efficiency: 100.00%
Average IFMAP SRAM BW: 92.377 words/cycle
Average Filter SRAM BW: 32.574 words/cycle
Average Filter Metadata SRAM BW: 2.036 words/cycle
Average OFMAP SRAM BW: 30.792 words/cycle
Average IFMAP DRAM BW: 50.000 words/cycle
Average Filter DRAM BW: 50.000 words/cycle
Average OFMAP DRAM BW: 49.997 words/cycle
************ SCALE SIM Run Complete ****************
