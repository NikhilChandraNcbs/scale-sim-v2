printing entry
['Conv1', 224, 224, 11, 11, 3, 96, 4, 4, None]
====================================================
******************* SCALE SIM **********************
====================================================
Array Size: 	4x4
SRAM IFMAP (kB): 	512
SRAM Filter (kB): 	512
SRAM OFMAP (kB): 	1024
Dataflow: 	Weight Stationary
CSV file path: 	topologies/conv_nets/alexnet_part.csv
Bandwidth: 	50
Working in USE USER BANDWIDTH mode.
====================================================

Running Layer 0
self.filter_addr_matrix
(363, 96)
[[  100   463   826 ... 33859 34222 34585]
 [  101   464   827 ... 33860 34223 34586]
 [  102   465   828 ... 33861 34224 34587]
 ...
 [  460   823  1186 ... 34219 34582 34945]
 [  461   824  1187 ... 34220 34583 34946]
 [  462   825  1188 ... 34221 34584 34947]]
SPARSITY INSIDE FILTER DEMAND MATRIX CREATION
No sparsity file - creating bitmap
[[1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 ...
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
after multiplying
[[  100   463   826 ... 33859 34222 34585]
 [    0     0     0 ...     0     0     0]
 [    0     0     0 ...     0     0     0]
 ...
 [  460   823  1186 ... 34219 34582 34945]
 [    0     0     0 ...     0     0     0]
 [    0     0     0 ...     0     0     0]]
after reducing the filter array based on sparsity
[[  100   104   108 ...   452   456   460]
 [  463   467   471 ...   815   819   823]
 [  826   830   834 ...  1178  1182  1186]
 ...
 [33859 33863 33867 ... 34211 34215 34219]
 [34222 34226 34230 ... 34574 34578 34582]
 [34585 34589 34593 ... 34937 34941 34945]]
Final
[[  100   463   826 ... 33859 34222 34585]
 [  104   467   830 ... 33863 34226 34589]
 [  108   471   834 ... 33867 34230 34593]
 ...
 [  452   815  1178 ... 34211 34574 34937]
 [  456   819  1182 ... 34215 34578 34941]
 [  460   823  1186 ... 34219 34582 34945]]
INSIDE INPUT FILTER DEMAND MATRIX CREATION FUNCTION
self.batch_size in ifmap function is  1
self.ifmap_addr_matrix
(3025, 363)
[[     0      1      2 ...   6750   6751   6752]
 [    12     13     14 ...   6762   6763   6764]
 [    24     25     26 ...   6774   6775   6776]
 ...
 [145776 145777 145778 ...     -1     -1     -1]
 [145788 145789 145790 ...     -1     -1     -1]
 [145800 145801 145802 ...     -1     -1     -1]]
Input sparsity being applied
1
4
0.25
363 * 0.25 = 91
self.ifmap_addr_matrix for sparsity
[[     0      1      2 ...   1366   1367   1368]
 [    12     13     14 ...   1378   1379   1380]
 [    24     25     26 ...   1390   1391   1392]
 ...
 [145776 145777 145778 ... 147142 147143 147144]
 [145788 145789 145790 ... 147154 147155 147156]
 [145800 145801 145802 ... 147166 147167     -1]]
col_indices
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71
 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95]
self.ofmap_addr_matrix
[[   200    201    202 ...    293    294    295]
 [   296    297    298 ...    389    390    391]
 [   392    393    394 ...    485    486    487]
 ...
 [290312 290313 290314 ... 290405 290406 290407]
 [290408 290409 290410 ... 290501 290502 290503]
 [290504 290505 290506 ... 290597 290598 290599]]
these are the operand matrices
(3025, 91)
(91, 96)
(3025, 96)
[[     0      1      2 ...   1366   1367   1368]
 [    12     13     14 ...   1378   1379   1380]
 [    24     25     26 ...   1390   1391   1392]
 ...
 [145776 145777 145778 ... 147142 147143 147144]
 [145788 145789 145790 ... 147154 147155 147156]
 [145800 145801 145802 ... 147166 147167     -1]]
[[  100   463   826 ... 33859 34222 34585]
 [  104   467   830 ... 33863 34226 34589]
 [  108   471   834 ... 33867 34230 34593]
 ...
 [  452   815  1178 ... 34211 34574 34937]
 [  456   819  1182 ... 34215 34578 34941]
 [  460   823  1186 ... 34219 34582 34945]]
[[   200    201    202 ...    293    294    295]
 [   296    297    298 ...    389    390    391]
 [   392    393    394 ...    485    486    487]
 ...
 [290312 290313 290314 ... 290405 290406 290407]
 [290408 290409 290410 ... 290501 290502 290503]
 [290504 290505 290506 ... 290597 290598 290599]]
layer_calc_params[0] * layer_calc_params[1] * num_filters =  55 55 96
self.num_compute = self.topo.get_layer_num_ofmap_px(self.layer_id) * self.topo.get_layer_window_size(self.layer_id)
Nofmap: Number of OFMAP pixels generated by filter
layer_calc_params[0] * layer_calc_params[1] * num_filters =  55 55 96
105415200 = 290400 * 363
self.layer_id  0
filter matrix in create_filter_prefetch_mat
[[  100   463   826 ... 33859 34222 34585]
 [  104   467   830 ... 33863 34226 34589]
 [  108   471   834 ... 33867 34230 34593]
 ...
 [  452   815  1178 ... 34211 34574 34937]
 [  456   819  1182 ... 34215 34578 34941]
 [  460   823  1186 ... 34219 34582 34945]]
End
These are the demand matrices
[[-1. -1. -1. -1.]
 [-1. -1. -1. -1.]
 [-1. -1. -1. -1.]
 ...
 [-1. -1. -1. -1.]
 [-1. -1. -1. -1.]
 [-1. -1. -1. -1.]]
[[ 1.120e+02  4.750e+02  8.380e+02  1.201e+03]
 [ 1.080e+02  4.710e+02  8.340e+02  1.197e+03]
 [ 1.040e+02  4.670e+02  8.300e+02  1.193e+03]
 ...
 [-1.000e+00 -1.000e+00 -1.000e+00 -1.000e+00]
 [-1.000e+00 -1.000e+00 -1.000e+00 -1.000e+00]
 [-1.000e+00 -1.000e+00 -1.000e+00 -1.000e+00]]
[[-1.00000e+00 -1.00000e+00 -1.00000e+00 -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 -1.00000e+00]
 ...
 [-1.00000e+00  2.90597e+05  2.90502e+05  2.90407e+05]
 [-1.00000e+00 -1.00000e+00  2.90598e+05  2.90503e+05]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00  2.90599e+05]]
