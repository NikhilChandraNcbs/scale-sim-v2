printing entry
['CONV_1', 5, 5, 4, 4, 1, 4, 1, 1, None]
====================================================
******************* SCALE SIM **********************
====================================================
Array Size: 	4x4
SRAM IFMAP (kB): 	4
SRAM Filter (kB): 	4
SRAM OFMAP (kB): 	4
Dataflow: 	Weight Stationary
CSV file path: 	topologies/sparsity/conv_mix.csv
Bandwidth: 	50
Working in USE USER BANDWIDTH mode.
====================================================

Running Layer 0
row_indices
[[ 0]
 [ 1]
 [ 2]
 [ 3]
 [ 4]
 [ 5]
 [ 6]
 [ 7]
 [ 8]
 [ 9]
 [10]
 [11]
 [12]
 [13]
 [14]
 [15]]
col_indices
[0 1 2 3]
self.filter_addr_matrix
[[100 116 132 148]
 [101 117 133 149]
 [102 118 134 150]
 [103 119 135 151]
 [104 120 136 152]
 [105 121 137 153]
 [106 122 138 154]
 [107 123 139 155]
 [108 124 140 156]
 [109 125 141 157]
 [110 126 142 158]
 [111 127 143 159]
 [112 128 144 160]
 [113 129 145 161]
 [114 130 146 162]
 [115 131 147 163]]
SPARSITY INSIDE FILTER DEMAND MATRIX CREATION
No sparsity file - creating bitmap
[[1 1 1 1]
 [1 1 1 1]
 [0 0 0 0]
 [0 0 0 0]
 [1 1 1 1]
 [1 1 1 1]
 [0 0 0 0]
 [0 0 0 0]
 [1 1 1 1]
 [1 1 1 1]
 [0 0 0 0]
 [0 0 0 0]
 [1 1 1 1]
 [1 1 1 1]
 [0 0 0 0]
 [0 0 0 0]]
after multiplying
[[100 116 132 148]
 [101 117 133 149]
 [  0   0   0   0]
 [  0   0   0   0]
 [104 120 136 152]
 [105 121 137 153]
 [  0   0   0   0]
 [  0   0   0   0]
 [108 124 140 156]
 [109 125 141 157]
 [  0   0   0   0]
 [  0   0   0   0]
 [112 128 144 160]
 [113 129 145 161]
 [  0   0   0   0]
 [  0   0   0   0]]
after reducing the filter array based on sparsity
[[100 101 104 105 108 109 112 113]
 [116 117 120 121 124 125 128 129]
 [132 133 136 137 140 141 144 145]
 [148 149 152 153 156 157 160 161]]
Final
[[100 116 132 148]
 [101 117 133 149]
 [104 120 136 152]
 [105 121 137 153]
 [108 124 140 156]
 [109 125 141 157]
 [112 128 144 160]
 [113 129 145 161]]
INSIDE INPUT FILTER DEMAND MATRIX CREATION FUNCTION
self.batch_size in ifmap function is  1
row_indices
[0 1 2 3]
col_indices
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15]
i meshgrid
[[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
 [2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2]
 [3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3]]
j meshgrid
[[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15]
 [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15]
 [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15]
 [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15]]
self.ifmap_addr_matrix
[[ 0  1  2  3  5  6  7  8 10 11 12 13 15 16 17 18]
 [ 1  2  3  4  6  7  8  9 11 12 13 14 16 17 18 19]
 [ 5  6  7  8 10 11 12 13 15 16 17 18 20 21 22 23]
 [ 6  7  8  9 11 12 13 14 16 17 18 19 21 22 23 24]]
2
4
0.5
self.ifmap_addr_matrix for sparsity
[[ 0  1  2  3  5  6  7  8]
 [ 1  2  3  4  6  7  8  9]
 [ 5  6  7  8 10 11 12 13]
 [ 6  7  8  9 11 12 13 14]]
col_indices
[0 1 2 3]
self.ofmap_addr_matrix
[[200 201 202 203]
 [204 205 206 207]
 [208 209 210 211]
 [212 213 214 215]]
these are the demand matrices
[[ 0  1  2  3  5  6  7  8]
 [ 1  2  3  4  6  7  8  9]
 [ 5  6  7  8 10 11 12 13]
 [ 6  7  8  9 11 12 13 14]]
[[100 116 132 148]
 [101 117 133 149]
 [104 120 136 152]
 [105 121 137 153]
 [108 124 140 156]
 [109 125 141 157]
 [112 128 144 160]
 [113 129 145 161]]
[[200 201 202 203]
 [204 205 206 207]
 [208 209 210 211]
 [212 213 214 215]]
layer_calc_params[0] * layer_calc_params[1] * num_filters =  2 2 4
self.num_compute = self.topo.get_layer_num_ofmap_px(self.layer_id) * self.topo.get_layer_window_size(self.layer_id)
Nofmap: Number of OFMAP pixels generated by filter
layer_calc_params[0] * layer_calc_params[1] * num_filters =  2 2 4
256 = 16 * 16
self.layer_id  0
filter matrix in create_filter_prefetch_mat
[[100 116 132 148]
 [101 117 133 149]
 [104 120 136 152]
 [105 121 137 153]
 [108 124 140 156]
 [109 125 141 157]
 [112 128 144 160]
 [113 129 145 161]]
End
These are the demand matrices
[[-1. -1. -1. -1.]
 [-1. -1. -1. -1.]
 [-1. -1. -1. -1.]
 [-1. -1. -1. -1.]
 [ 0. -1. -1. -1.]
 [ 1.  1. -1. -1.]
 [ 5.  2.  2. -1.]
 [ 6.  6.  3.  3.]
 [-1.  7.  7.  4.]
 [-1. -1.  8.  8.]
 [-1. -1. -1.  9.]
 [-1. -1. -1. -1.]
 [-1. -1. -1. -1.]
 [-1. -1. -1. -1.]
 [-1. -1. -1. -1.]
 [-1. -1. -1. -1.]
 [-1. -1. -1. -1.]
 [-1. -1. -1. -1.]
 [ 5. -1. -1. -1.]
 [ 6.  6. -1. -1.]
 [10.  7.  7. -1.]
 [11. 11.  8.  8.]
 [-1. 12. 12.  9.]
 [-1. -1. 13. 13.]
 [-1. -1. -1. 14.]
 [-1. -1. -1. -1.]
 [-1. -1. -1. -1.]
 [-1. -1. -1. -1.]]
[[105. 121. 137. 153.]
 [104. 120. 136. 152.]
 [101. 117. 133. 149.]
 [100. 116. 132. 148.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [113. 129. 145. 161.]
 [112. 128. 144. 160.]
 [109. 125. 141. 157.]
 [108. 124. 140. 156.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]]
[[ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [200.  -1.  -1.  -1.]
 [204. 201.  -1.  -1.]
 [208. 205. 202.  -1.]
 [212. 209. 206. 203.]
 [ -1. 213. 210. 207.]
 [ -1.  -1. 214. 211.]
 [ -1.  -1.  -1. 215.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [200.  -1.  -1.  -1.]
 [204. 201.  -1.  -1.]
 [208. 205. 202.  -1.]
 [212. 209. 206. 203.]
 [ -1. 213. 210. 207.]
 [ -1.  -1. 214. 211.]
 [ -1.  -1.  -1. 215.]]
Compute cycles: 27
Stall cycles: 0
Overall utilization: 59.26%
Mapping efficiency: 100.00%
Average IFMAP SRAM BW: 2.370 words/cycle
Average Filter SRAM BW: 1.185 words/cycle
Average Filter Metadata SRAM BW: 1.815 words/cycle
Average OFMAP SRAM BW: 1.185 words/cycle
Average IFMAP DRAM BW: 50.000 words/cycle
Average Filter DRAM BW: 50.000 words/cycle
Average OFMAP DRAM BW: 32.000 words/cycle
************ SCALE SIM Run Complete ****************
