printing entry
['Conv1', 224, 224, 7, 7, 3, 64, 2, 2, None]
printing entry
['Conv2_1a', 56, 56, 3, 3, 64, 64, 1, 1, None]
printing entry
['Conv2_1b', 56, 56, 3, 3, 64, 64, 1, 1, None]
printing entry
['Conv2_2a', 56, 56, 3, 3, 64, 64, 1, 1, None]
printing entry
['Conv2_2b', 56, 56, 3, 3, 64, 64, 1, 1, None]
printing entry
['Conv3_1a', 56, 56, 3, 3, 64, 128, 2, 2, None]
printing entry
['Conv3_1b', 28, 28, 3, 3, 128, 128, 1, 1, None]
printing entry
['Conv3_s', 56, 56, 1, 1, 64, 128, 2, 2, None]
printing entry
['Conv3_2a', 28, 28, 3, 3, 128, 128, 1, 1, None]
printing entry
['Conv3_2b', 28, 28, 3, 3, 128, 128, 1, 1, None]
printing entry
['Conv4_1a', 28, 28, 3, 3, 128, 256, 2, 2, None]
printing entry
['Conv4_1b', 14, 14, 3, 3, 256, 256, 1, 1, None]
printing entry
['Conv4_s', 28, 28, 1, 1, 128, 256, 2, 2, None]
printing entry
['Conv4_2a', 14, 14, 3, 3, 256, 256, 1, 1, None]
printing entry
['Conv4_2b', 14, 14, 3, 3, 256, 256, 1, 1, None]
printing entry
['Conv5_1a', 14, 14, 3, 3, 256, 512, 2, 2, None]
printing entry
['Conv5_1b', 7, 7, 3, 3, 512, 512, 1, 1, None]
printing entry
['Conv5_s', 14, 14, 1, 1, 256, 512, 2, 2, None]
printing entry
['Conv5_2a', 7, 7, 3, 3, 512, 512, 1, 1, None]
printing entry
['Conv5_2b', 7, 7, 3, 3, 512, 512, 1, 1, None]
printing entry
['FC', 1, 1, 1, 1, 512, 1000, 1, 1, None]
====================================================
******************* SCALE SIM **********************
====================================================
Array Size: 	128x128
SRAM IFMAP (kB): 	102400
SRAM Filter (kB): 	102400
SRAM OFMAP (kB): 	102400
Dataflow: 	Weight Stationary
CSV file path: 	topologies/conv_nets/Resnet18.csv
Bandwidth: 	50
Working in USE USER BANDWIDTH mode.
====================================================
self.ofmap_px_per_filt = int(self.ofmap_rows * self.ofmap_cols)
12100 = 110 * 110
self.conv_window_size = int(self.topoutil.get_layer_window_size(self.layer_id)) = filt_h * filt_w * num_ch
147
self.ofmap_px_per_filt = int(self.ofmap_rows * self.ofmap_cols)
2916 = 54 * 54
self.conv_window_size = int(self.topoutil.get_layer_window_size(self.layer_id)) = filt_h * filt_w * num_ch
576
self.ofmap_px_per_filt = int(self.ofmap_rows * self.ofmap_cols)
2916 = 54 * 54
self.conv_window_size = int(self.topoutil.get_layer_window_size(self.layer_id)) = filt_h * filt_w * num_ch
576
self.ofmap_px_per_filt = int(self.ofmap_rows * self.ofmap_cols)
2916 = 54 * 54
self.conv_window_size = int(self.topoutil.get_layer_window_size(self.layer_id)) = filt_h * filt_w * num_ch
576
self.ofmap_px_per_filt = int(self.ofmap_rows * self.ofmap_cols)
2916 = 54 * 54
self.conv_window_size = int(self.topoutil.get_layer_window_size(self.layer_id)) = filt_h * filt_w * num_ch
576
self.ofmap_px_per_filt = int(self.ofmap_rows * self.ofmap_cols)
784 = 28 * 28
self.conv_window_size = int(self.topoutil.get_layer_window_size(self.layer_id)) = filt_h * filt_w * num_ch
576
self.ofmap_px_per_filt = int(self.ofmap_rows * self.ofmap_cols)
676 = 26 * 26
self.conv_window_size = int(self.topoutil.get_layer_window_size(self.layer_id)) = filt_h * filt_w * num_ch
1152
self.ofmap_px_per_filt = int(self.ofmap_rows * self.ofmap_cols)
841 = 29 * 29
self.conv_window_size = int(self.topoutil.get_layer_window_size(self.layer_id)) = filt_h * filt_w * num_ch
64
self.ofmap_px_per_filt = int(self.ofmap_rows * self.ofmap_cols)
676 = 26 * 26
self.conv_window_size = int(self.topoutil.get_layer_window_size(self.layer_id)) = filt_h * filt_w * num_ch
1152
self.ofmap_px_per_filt = int(self.ofmap_rows * self.ofmap_cols)
676 = 26 * 26
self.conv_window_size = int(self.topoutil.get_layer_window_size(self.layer_id)) = filt_h * filt_w * num_ch
1152
self.ofmap_px_per_filt = int(self.ofmap_rows * self.ofmap_cols)
196 = 14 * 14
self.conv_window_size = int(self.topoutil.get_layer_window_size(self.layer_id)) = filt_h * filt_w * num_ch
1152
self.ofmap_px_per_filt = int(self.ofmap_rows * self.ofmap_cols)
144 = 12 * 12
self.conv_window_size = int(self.topoutil.get_layer_window_size(self.layer_id)) = filt_h * filt_w * num_ch
2304
self.ofmap_px_per_filt = int(self.ofmap_rows * self.ofmap_cols)
225 = 15 * 15
self.conv_window_size = int(self.topoutil.get_layer_window_size(self.layer_id)) = filt_h * filt_w * num_ch
128
self.ofmap_px_per_filt = int(self.ofmap_rows * self.ofmap_cols)
144 = 12 * 12
self.conv_window_size = int(self.topoutil.get_layer_window_size(self.layer_id)) = filt_h * filt_w * num_ch
2304
self.ofmap_px_per_filt = int(self.ofmap_rows * self.ofmap_cols)
144 = 12 * 12
self.conv_window_size = int(self.topoutil.get_layer_window_size(self.layer_id)) = filt_h * filt_w * num_ch
2304
self.ofmap_px_per_filt = int(self.ofmap_rows * self.ofmap_cols)
49 = 7 * 7
self.conv_window_size = int(self.topoutil.get_layer_window_size(self.layer_id)) = filt_h * filt_w * num_ch
2304
self.ofmap_px_per_filt = int(self.ofmap_rows * self.ofmap_cols)
25 = 5 * 5
self.conv_window_size = int(self.topoutil.get_layer_window_size(self.layer_id)) = filt_h * filt_w * num_ch
4608
self.ofmap_px_per_filt = int(self.ofmap_rows * self.ofmap_cols)
64 = 8 * 8
self.conv_window_size = int(self.topoutil.get_layer_window_size(self.layer_id)) = filt_h * filt_w * num_ch
256
self.ofmap_px_per_filt = int(self.ofmap_rows * self.ofmap_cols)
25 = 5 * 5
self.conv_window_size = int(self.topoutil.get_layer_window_size(self.layer_id)) = filt_h * filt_w * num_ch
4608
self.ofmap_px_per_filt = int(self.ofmap_rows * self.ofmap_cols)
25 = 5 * 5
self.conv_window_size = int(self.topoutil.get_layer_window_size(self.layer_id)) = filt_h * filt_w * num_ch
4608
self.ofmap_px_per_filt = int(self.ofmap_rows * self.ofmap_cols)
1 = 1 * 1
self.conv_window_size = int(self.topoutil.get_layer_window_size(self.layer_id)) = filt_h * filt_w * num_ch
512

Running Layer 0
self.filter_addr_matrix
(147, 64)
[[ 100  247  394 ... 9067 9214 9361]
 [ 101  248  395 ... 9068 9215 9362]
 [ 102  249  396 ... 9069 9216 9363]
 ...
 [ 244  391  538 ... 9211 9358 9505]
 [ 245  392  539 ... 9212 9359 9506]
 [ 246  393  540 ... 9213 9360 9507]]
SPARSITY INSIDE FILTER DEMAND MATRIX CREATION
No sparsity file - creating bitmap
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 ...
 [1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]]
final sparse array
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 ...
 [1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]]
after multiplying
(147, 64)
[[ 100  247  394 ... 9067 9214 9361]
 [ 101  248  395 ... 9068 9215 9362]
 [   0    0    0 ...    0    0    0]
 ...
 [ 244  391  538 ... 9211 9358 9505]
 [ 245  392  539 ... 9212 9359 9506]
 [   0    0    0 ...    0    0    0]]
after reducing the filter array based on sparsity
[[ 100  101  104 ...  241  244  245]
 [ 247  248  251 ...  388  391  392]
 [ 394  395  398 ...  535  538  539]
 ...
 [9067 9068 9071 ... 9208 9211 9212]
 [9214 9215 9218 ... 9355 9358 9359]
 [9361 9362 9365 ... 9502 9505 9506]]
Final
(74, 64)
[[ 100  247  394 ... 9067 9214 9361]
 [ 101  248  395 ... 9068 9215 9362]
 [ 104  251  398 ... 9071 9218 9365]
 ...
 [ 241  388  535 ... 9208 9355 9502]
 [ 244  391  538 ... 9211 9358 9505]
 [ 245  392  539 ... 9212 9359 9506]]
INSIDE INPUT FILTER DEMAND MATRIX CREATION FUNCTION
self.batch_size in ifmap function is  1
Rows = batch_size * ofmap_px_per_filt
self.ifmap_addr_matrix
(12100, 147)
[[     0      1      2 ...   4050   4051   4052]
 [     6      7      8 ...   4056   4057   4058]
 [    12     13     14 ...   4062   4063   4064]
 ...
 [147138 147139 147140 ...     -1     -1     -1]
 [147144 147145 147146 ...     -1     -1     -1]
 [147150 147151 147152 ...     -1     -1     -1]]
Input sparsity being applied
[1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1
 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1
 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0
 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0]
[[     0      1      0 ...   4050   4051      0]
 [     6      7      0 ...   4056   4057      0]
 [    12     13      0 ...   4062   4063      0]
 ...
 [147138 147139      0 ...     -1     -1      0]
 [147144 147145      0 ...     -1     -1      0]
 [147150 147151      0 ...     -1     -1      0]]
[[     0      1      4 ...   4047   4050   4051]
 [     6      7     10 ...   4053   4056   4057]
 [    12     13     16 ...   4059   4062   4063]
 ...
 [147138 147139 147142 ...     -1     -1     -1]
 [147144 147145 147148 ...     -1     -1     -1]
 [147150 147151 147154 ...     -1     -1     -1]]
self.ifmap_addr_matrix for sparsity
[[     0      1      4 ...   4047   4050   4051]
 [     6      7     10 ...   4053   4056   4057]
 [    12     13     16 ...   4059   4062   4063]
 ...
 [147138 147139 147142 ...     -1     -1     -1]
 [147144 147145 147148 ...     -1     -1     -1]
 [147150 147151 147154 ...     -1     -1     -1]]
create_ofmap_matrix
row_indices
[[    0]
 [    1]
 [    2]
 ...
 [12097]
 [12098]
 [12099]]
col_indices
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63]
self.ofmap_addr_matrix
[[   200    201    202 ...    261    262    263]
 [   264    265    266 ...    325    326    327]
 [   328    329    330 ...    389    390    391]
 ...
 [774408 774409 774410 ... 774469 774470 774471]
 [774472 774473 774474 ... 774533 774534 774535]
 [774536 774537 774538 ... 774597 774598 774599]]
these are the operand matrices
(12100, 74)
(74, 64)
(12100, 64)
[[     0      1      4 ...   4047   4050   4051]
 [     6      7     10 ...   4053   4056   4057]
 [    12     13     16 ...   4059   4062   4063]
 ...
 [147138 147139 147142 ...     -1     -1     -1]
 [147144 147145 147148 ...     -1     -1     -1]
 [147150 147151 147154 ...     -1     -1     -1]]
[[ 100  247  394 ... 9067 9214 9361]
 [ 101  248  395 ... 9068 9215 9362]
 [ 104  251  398 ... 9071 9218 9365]
 ...
 [ 241  388  535 ... 9208 9355 9502]
 [ 244  391  538 ... 9211 9358 9505]
 [ 245  392  539 ... 9212 9359 9506]]
[[   200    201    202 ...    261    262    263]
 [   264    265    266 ...    325    326    327]
 [   328    329    330 ...    389    390    391]
 ...
 [774408 774409 774410 ... 774469 774470 774471]
 [774472 774473 774474 ... 774533 774534 774535]
 [774536 774537 774538 ... 774597 774598 774599]]
layer_calc_params[0] * layer_calc_params[1] * num_filters =  110 110 64
self.num_compute = self.topo.get_layer_num_ofmap_px(self.layer_id) * self.topo.get_layer_window_size(self.layer_id)
Nofmap: Number of OFMAP pixels generated by filter
layer_calc_params[0] * layer_calc_params[1] * num_filters =  110 110 64
113836800 = 774400 * 147
self.layer_id  0
filter matrix in create_filter_prefetch_mat
[[ 100  247  394 ... 9067 9214 9361]
 [ 101  248  395 ... 9068 9215 9362]
 [ 104  251  398 ... 9071 9218 9365]
 ...
 [ 241  388  535 ... 9208 9355 9502]
 [ 244  391  538 ... 9211 9358 9505]
 [ 245  392  539 ... 9212 9359 9506]]
End
printing self.filter_prefetch_matrix is ws.py
[[100. 247. 394. ...  -1.  -1.  -1.]
 [101. 248. 395. ...  -1.  -1.  -1.]
 [104. 251. 398. ...  -1.  -1.  -1.]
 ...
 [241. 388. 535. ...  -1.  -1.  -1.]
 [244. 391. 538. ...  -1.  -1.  -1.]
 [245. 392. 539. ...  -1.  -1.  -1.]]
1790800.0
printing self.filter_demand_matrix in ws.py
[[-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 ...
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]]
These are the demand matrices
ifmap_demand_mat demand matrix
[[-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 ...
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]]
filter_demand_mat demand matrix
[[-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 ...
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]]
ofmap_demand_mat demand matrix
[[-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 ...
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]]
Compute cycles: 12481
Stall cycles: 0
Overall utilization: 55.67%
Mapping efficiency: 28.91%
Average IFMAP SRAM BW: 1004.375 words/cycle
Average Filter SRAM BW: 0.379 words/cycle
Average Filter Metadata SRAM BW: 0.024 words/cycle
Average OFMAP SRAM BW: 62.046 words/cycle
Average IFMAP DRAM BW: 50.000 words/cycle
Average Filter DRAM BW: 50.000 words/cycle
Average OFMAP DRAM BW: 50.000 words/cycle

Running Layer 1
self.filter_addr_matrix
(576, 64)
[[  100   676  1252 ... 35236 35812 36388]
 [  101   677  1253 ... 35237 35813 36389]
 [  102   678  1254 ... 35238 35814 36390]
 ...
 [  673  1249  1825 ... 35809 36385 36961]
 [  674  1250  1826 ... 35810 36386 36962]
 [  675  1251  1827 ... 35811 36387 36963]]
SPARSITY INSIDE FILTER DEMAND MATRIX CREATION
No sparsity file - creating bitmap
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 ...
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
final sparse array
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 ...
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
after multiplying
(576, 64)
[[  100   676  1252 ... 35236 35812 36388]
 [  101   677  1253 ... 35237 35813 36389]
 [    0     0     0 ...     0     0     0]
 ...
 [  673  1249  1825 ... 35809 36385 36961]
 [    0     0     0 ...     0     0     0]
 [    0     0     0 ...     0     0     0]]
after reducing the filter array based on sparsity
[[  100   101   104 ...   669   672   673]
 [  676   677   680 ...  1245  1248  1249]
 [ 1252  1253  1256 ...  1821  1824  1825]
 ...
 [35236 35237 35240 ... 35805 35808 35809]
 [35812 35813 35816 ... 36381 36384 36385]
 [36388 36389 36392 ... 36957 36960 36961]]
Final
(288, 64)
[[  100   676  1252 ... 35236 35812 36388]
 [  101   677  1253 ... 35237 35813 36389]
 [  104   680  1256 ... 35240 35816 36392]
 ...
 [  669  1245  1821 ... 35805 36381 36957]
 [  672  1248  1824 ... 35808 36384 36960]
 [  673  1249  1825 ... 35809 36385 36961]]
INSIDE INPUT FILTER DEMAND MATRIX CREATION FUNCTION
self.batch_size in ifmap function is  1
Rows = batch_size * ofmap_px_per_filt
self.ifmap_addr_matrix
(2916, 576)
[[     0      1      2 ...   7357   7358   7359]
 [    64     65     66 ...   7421   7422   7423]
 [   128    129    130 ...   7485   7486   7487]
 ...
 [193216 193217 193218 ... 200573 200574 200575]
 [193280 193281 193282 ... 200637 200638 200639]
 [193344 193345 193346 ... 200701 200702 200703]]
Input sparsity being applied
[1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1
 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1
 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0
 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0
 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1
 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1
 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0
 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0
 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1
 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1
 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0
 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0
 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1
 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1
 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0
 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0]
[[     0      1      0 ...   7357      0      0]
 [    64     65      0 ...   7421      0      0]
 [   128    129      0 ...   7485      0      0]
 ...
 [193216 193217      0 ... 200573      0      0]
 [193280 193281      0 ... 200637      0      0]
 [193344 193345      0 ... 200701      0      0]]
[[     0      1      4 ...   7353   7356   7357]
 [    64     65     68 ...   7417   7420   7421]
 [   128    129    132 ...   7481   7484   7485]
 ...
 [193216 193217 193220 ... 200569 200572 200573]
 [193280 193281 193284 ... 200633 200636 200637]
 [193344 193345 193348 ... 200697 200700 200701]]
self.ifmap_addr_matrix for sparsity
[[     0      1      4 ...   7353   7356   7357]
 [    64     65     68 ...   7417   7420   7421]
 [   128    129    132 ...   7481   7484   7485]
 ...
 [193216 193217 193220 ... 200569 200572 200573]
 [193280 193281 193284 ... 200633 200636 200637]
 [193344 193345 193348 ... 200697 200700 200701]]
create_ofmap_matrix
row_indices
[[   0]
 [   1]
 [   2]
 ...
 [2913]
 [2914]
 [2915]]
col_indices
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63]
self.ofmap_addr_matrix
[[   200    201    202 ...    261    262    263]
 [   264    265    266 ...    325    326    327]
 [   328    329    330 ...    389    390    391]
 ...
 [186632 186633 186634 ... 186693 186694 186695]
 [186696 186697 186698 ... 186757 186758 186759]
 [186760 186761 186762 ... 186821 186822 186823]]
these are the operand matrices
(2916, 288)
(288, 64)
(2916, 64)
[[     0      1      4 ...   7353   7356   7357]
 [    64     65     68 ...   7417   7420   7421]
 [   128    129    132 ...   7481   7484   7485]
 ...
 [193216 193217 193220 ... 200569 200572 200573]
 [193280 193281 193284 ... 200633 200636 200637]
 [193344 193345 193348 ... 200697 200700 200701]]
[[  100   676  1252 ... 35236 35812 36388]
 [  101   677  1253 ... 35237 35813 36389]
 [  104   680  1256 ... 35240 35816 36392]
 ...
 [  669  1245  1821 ... 35805 36381 36957]
 [  672  1248  1824 ... 35808 36384 36960]
 [  673  1249  1825 ... 35809 36385 36961]]
[[   200    201    202 ...    261    262    263]
 [   264    265    266 ...    325    326    327]
 [   328    329    330 ...    389    390    391]
 ...
 [186632 186633 186634 ... 186693 186694 186695]
 [186696 186697 186698 ... 186757 186758 186759]
 [186760 186761 186762 ... 186821 186822 186823]]
layer_calc_params[0] * layer_calc_params[1] * num_filters =  54 54 64
self.num_compute = self.topo.get_layer_num_ofmap_px(self.layer_id) * self.topo.get_layer_window_size(self.layer_id)
Nofmap: Number of OFMAP pixels generated by filter
layer_calc_params[0] * layer_calc_params[1] * num_filters =  54 54 64
107495424 = 186624 * 576
self.layer_id  1
filter matrix in create_filter_prefetch_mat
[[  100   676  1252 ... 35236 35812 36388]
 [  101   677  1253 ... 35237 35813 36389]
 [  104   680  1256 ... 35240 35816 36392]
 ...
 [  669  1245  1821 ... 35805 36381 36957]
 [  672  1248  1824 ... 35808 36384 36960]
 [  673  1249  1825 ... 35809 36385 36961]]
End
printing self.filter_prefetch_matrix is ws.py
[[ 1.000e+02  6.760e+02  1.252e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [ 1.010e+02  6.770e+02  1.253e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [ 1.040e+02  6.800e+02  1.256e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]
 ...
 [ 6.690e+02  1.245e+03  1.821e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [ 6.720e+02  1.248e+03  1.824e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [ 6.730e+02  1.249e+03  1.825e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]]
746496.0
1492992.0
1679616.0
printing self.filter_demand_matrix in ws.py
[[ 3.530e+02  9.290e+02  1.505e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [ 3.520e+02  9.280e+02  1.504e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [ 3.490e+02  9.250e+02  1.501e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]
 ...
 [-1.000e+00 -1.000e+00 -1.000e+00 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [-1.000e+00 -1.000e+00 -1.000e+00 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [-1.000e+00 -1.000e+00 -1.000e+00 ... -1.000e+00 -1.000e+00 -1.000e+00]]
These are the demand matrices
ifmap_demand_mat demand matrix
[[-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 ...
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]]
filter_demand_mat demand matrix
[[ 3.530e+02  9.290e+02  1.505e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [ 3.520e+02  9.280e+02  1.504e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [ 3.490e+02  9.250e+02  1.501e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]
 ...
 [-1.000e+00 -1.000e+00 -1.000e+00 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [-1.000e+00 -1.000e+00 -1.000e+00 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [-1.000e+00 -1.000e+00 -1.000e+00 ... -1.000e+00 -1.000e+00 -1.000e+00]]
ofmap_demand_mat demand matrix
[[-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 ...
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]]
Compute cycles: 9893
Stall cycles: 0
Overall utilization: 66.32%
Mapping efficiency: 37.50%
Average IFMAP SRAM BW: 509.335 words/cycle
Average Filter SRAM BW: 1.863 words/cycle
Average Filter Metadata SRAM BW: 0.116 words/cycle
Average OFMAP SRAM BW: 56.593 words/cycle
Average IFMAP DRAM BW: 50.000 words/cycle
Average Filter DRAM BW: 50.000 words/cycle
Average OFMAP DRAM BW: 49.997 words/cycle

Running Layer 2
self.filter_addr_matrix
(576, 64)
[[  100   676  1252 ... 35236 35812 36388]
 [  101   677  1253 ... 35237 35813 36389]
 [  102   678  1254 ... 35238 35814 36390]
 ...
 [  673  1249  1825 ... 35809 36385 36961]
 [  674  1250  1826 ... 35810 36386 36962]
 [  675  1251  1827 ... 35811 36387 36963]]
SPARSITY INSIDE FILTER DEMAND MATRIX CREATION
No sparsity file - creating bitmap
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 ...
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
final sparse array
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 ...
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
after multiplying
(576, 64)
[[  100   676  1252 ... 35236 35812 36388]
 [  101   677  1253 ... 35237 35813 36389]
 [    0     0     0 ...     0     0     0]
 ...
 [  673  1249  1825 ... 35809 36385 36961]
 [    0     0     0 ...     0     0     0]
 [    0     0     0 ...     0     0     0]]
after reducing the filter array based on sparsity
[[  100   101   104 ...   669   672   673]
 [  676   677   680 ...  1245  1248  1249]
 [ 1252  1253  1256 ...  1821  1824  1825]
 ...
 [35236 35237 35240 ... 35805 35808 35809]
 [35812 35813 35816 ... 36381 36384 36385]
 [36388 36389 36392 ... 36957 36960 36961]]
Final
(288, 64)
[[  100   676  1252 ... 35236 35812 36388]
 [  101   677  1253 ... 35237 35813 36389]
 [  104   680  1256 ... 35240 35816 36392]
 ...
 [  669  1245  1821 ... 35805 36381 36957]
 [  672  1248  1824 ... 35808 36384 36960]
 [  673  1249  1825 ... 35809 36385 36961]]
INSIDE INPUT FILTER DEMAND MATRIX CREATION FUNCTION
self.batch_size in ifmap function is  1
Rows = batch_size * ofmap_px_per_filt
self.ifmap_addr_matrix
(2916, 576)
[[     0      1      2 ...   7357   7358   7359]
 [    64     65     66 ...   7421   7422   7423]
 [   128    129    130 ...   7485   7486   7487]
 ...
 [193216 193217 193218 ... 200573 200574 200575]
 [193280 193281 193282 ... 200637 200638 200639]
 [193344 193345 193346 ... 200701 200702 200703]]
Input sparsity being applied
[1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1
 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1
 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0
 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0
 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1
 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1
 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0
 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0
 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1
 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1
 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0
 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0
 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1
 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1
 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0
 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0]
[[     0      1      0 ...   7357      0      0]
 [    64     65      0 ...   7421      0      0]
 [   128    129      0 ...   7485      0      0]
 ...
 [193216 193217      0 ... 200573      0      0]
 [193280 193281      0 ... 200637      0      0]
 [193344 193345      0 ... 200701      0      0]]
[[     0      1      4 ...   7353   7356   7357]
 [    64     65     68 ...   7417   7420   7421]
 [   128    129    132 ...   7481   7484   7485]
 ...
 [193216 193217 193220 ... 200569 200572 200573]
 [193280 193281 193284 ... 200633 200636 200637]
 [193344 193345 193348 ... 200697 200700 200701]]
self.ifmap_addr_matrix for sparsity
[[     0      1      4 ...   7353   7356   7357]
 [    64     65     68 ...   7417   7420   7421]
 [   128    129    132 ...   7481   7484   7485]
 ...
 [193216 193217 193220 ... 200569 200572 200573]
 [193280 193281 193284 ... 200633 200636 200637]
 [193344 193345 193348 ... 200697 200700 200701]]
create_ofmap_matrix
row_indices
[[   0]
 [   1]
 [   2]
 ...
 [2913]
 [2914]
 [2915]]
col_indices
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63]
self.ofmap_addr_matrix
[[   200    201    202 ...    261    262    263]
 [   264    265    266 ...    325    326    327]
 [   328    329    330 ...    389    390    391]
 ...
 [186632 186633 186634 ... 186693 186694 186695]
 [186696 186697 186698 ... 186757 186758 186759]
 [186760 186761 186762 ... 186821 186822 186823]]
these are the operand matrices
(2916, 288)
(288, 64)
(2916, 64)
[[     0      1      4 ...   7353   7356   7357]
 [    64     65     68 ...   7417   7420   7421]
 [   128    129    132 ...   7481   7484   7485]
 ...
 [193216 193217 193220 ... 200569 200572 200573]
 [193280 193281 193284 ... 200633 200636 200637]
 [193344 193345 193348 ... 200697 200700 200701]]
[[  100   676  1252 ... 35236 35812 36388]
 [  101   677  1253 ... 35237 35813 36389]
 [  104   680  1256 ... 35240 35816 36392]
 ...
 [  669  1245  1821 ... 35805 36381 36957]
 [  672  1248  1824 ... 35808 36384 36960]
 [  673  1249  1825 ... 35809 36385 36961]]
[[   200    201    202 ...    261    262    263]
 [   264    265    266 ...    325    326    327]
 [   328    329    330 ...    389    390    391]
 ...
 [186632 186633 186634 ... 186693 186694 186695]
 [186696 186697 186698 ... 186757 186758 186759]
 [186760 186761 186762 ... 186821 186822 186823]]
layer_calc_params[0] * layer_calc_params[1] * num_filters =  54 54 64
self.num_compute = self.topo.get_layer_num_ofmap_px(self.layer_id) * self.topo.get_layer_window_size(self.layer_id)
Nofmap: Number of OFMAP pixels generated by filter
layer_calc_params[0] * layer_calc_params[1] * num_filters =  54 54 64
107495424 = 186624 * 576
self.layer_id  2
filter matrix in create_filter_prefetch_mat
[[  100   676  1252 ... 35236 35812 36388]
 [  101   677  1253 ... 35237 35813 36389]
 [  104   680  1256 ... 35240 35816 36392]
 ...
 [  669  1245  1821 ... 35805 36381 36957]
 [  672  1248  1824 ... 35808 36384 36960]
 [  673  1249  1825 ... 35809 36385 36961]]
End
printing self.filter_prefetch_matrix is ws.py
[[ 1.000e+02  6.760e+02  1.252e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [ 1.010e+02  6.770e+02  1.253e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [ 1.040e+02  6.800e+02  1.256e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]
 ...
 [ 6.690e+02  1.245e+03  1.821e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [ 6.720e+02  1.248e+03  1.824e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [ 6.730e+02  1.249e+03  1.825e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]]
746496.0
1492992.0
1679616.0
printing self.filter_demand_matrix in ws.py
[[ 3.530e+02  9.290e+02  1.505e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [ 3.520e+02  9.280e+02  1.504e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [ 3.490e+02  9.250e+02  1.501e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]
 ...
 [-1.000e+00 -1.000e+00 -1.000e+00 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [-1.000e+00 -1.000e+00 -1.000e+00 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [-1.000e+00 -1.000e+00 -1.000e+00 ... -1.000e+00 -1.000e+00 -1.000e+00]]
These are the demand matrices
ifmap_demand_mat demand matrix
[[-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 ...
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]]
filter_demand_mat demand matrix
[[ 3.530e+02  9.290e+02  1.505e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [ 3.520e+02  9.280e+02  1.504e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [ 3.490e+02  9.250e+02  1.501e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]
 ...
 [-1.000e+00 -1.000e+00 -1.000e+00 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [-1.000e+00 -1.000e+00 -1.000e+00 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [-1.000e+00 -1.000e+00 -1.000e+00 ... -1.000e+00 -1.000e+00 -1.000e+00]]
ofmap_demand_mat demand matrix
[[-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 ...
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]]
Compute cycles: 9893
Stall cycles: 0
Overall utilization: 66.32%
Mapping efficiency: 37.50%
Average IFMAP SRAM BW: 509.335 words/cycle
Average Filter SRAM BW: 1.863 words/cycle
Average Filter Metadata SRAM BW: 0.116 words/cycle
Average OFMAP SRAM BW: 56.593 words/cycle
Average IFMAP DRAM BW: 50.000 words/cycle
Average Filter DRAM BW: 50.000 words/cycle
Average OFMAP DRAM BW: 49.997 words/cycle

Running Layer 3
self.filter_addr_matrix
(576, 64)
[[  100   676  1252 ... 35236 35812 36388]
 [  101   677  1253 ... 35237 35813 36389]
 [  102   678  1254 ... 35238 35814 36390]
 ...
 [  673  1249  1825 ... 35809 36385 36961]
 [  674  1250  1826 ... 35810 36386 36962]
 [  675  1251  1827 ... 35811 36387 36963]]
SPARSITY INSIDE FILTER DEMAND MATRIX CREATION
No sparsity file - creating bitmap
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 ...
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
final sparse array
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 ...
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
after multiplying
(576, 64)
[[  100   676  1252 ... 35236 35812 36388]
 [  101   677  1253 ... 35237 35813 36389]
 [    0     0     0 ...     0     0     0]
 ...
 [  673  1249  1825 ... 35809 36385 36961]
 [    0     0     0 ...     0     0     0]
 [    0     0     0 ...     0     0     0]]
after reducing the filter array based on sparsity
[[  100   101   104 ...   669   672   673]
 [  676   677   680 ...  1245  1248  1249]
 [ 1252  1253  1256 ...  1821  1824  1825]
 ...
 [35236 35237 35240 ... 35805 35808 35809]
 [35812 35813 35816 ... 36381 36384 36385]
 [36388 36389 36392 ... 36957 36960 36961]]
Final
(288, 64)
[[  100   676  1252 ... 35236 35812 36388]
 [  101   677  1253 ... 35237 35813 36389]
 [  104   680  1256 ... 35240 35816 36392]
 ...
 [  669  1245  1821 ... 35805 36381 36957]
 [  672  1248  1824 ... 35808 36384 36960]
 [  673  1249  1825 ... 35809 36385 36961]]
INSIDE INPUT FILTER DEMAND MATRIX CREATION FUNCTION
self.batch_size in ifmap function is  1
Rows = batch_size * ofmap_px_per_filt
self.ifmap_addr_matrix
(2916, 576)
[[     0      1      2 ...   7357   7358   7359]
 [    64     65     66 ...   7421   7422   7423]
 [   128    129    130 ...   7485   7486   7487]
 ...
 [193216 193217 193218 ... 200573 200574 200575]
 [193280 193281 193282 ... 200637 200638 200639]
 [193344 193345 193346 ... 200701 200702 200703]]
Input sparsity being applied
[1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1
 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1
 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0
 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0
 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1
 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1
 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0
 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0
 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1
 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1
 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0
 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0
 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1
 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1
 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0
 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0]
[[     0      1      0 ...   7357      0      0]
 [    64     65      0 ...   7421      0      0]
 [   128    129      0 ...   7485      0      0]
 ...
 [193216 193217      0 ... 200573      0      0]
 [193280 193281      0 ... 200637      0      0]
 [193344 193345      0 ... 200701      0      0]]
[[     0      1      4 ...   7353   7356   7357]
 [    64     65     68 ...   7417   7420   7421]
 [   128    129    132 ...   7481   7484   7485]
 ...
 [193216 193217 193220 ... 200569 200572 200573]
 [193280 193281 193284 ... 200633 200636 200637]
 [193344 193345 193348 ... 200697 200700 200701]]
self.ifmap_addr_matrix for sparsity
[[     0      1      4 ...   7353   7356   7357]
 [    64     65     68 ...   7417   7420   7421]
 [   128    129    132 ...   7481   7484   7485]
 ...
 [193216 193217 193220 ... 200569 200572 200573]
 [193280 193281 193284 ... 200633 200636 200637]
 [193344 193345 193348 ... 200697 200700 200701]]
create_ofmap_matrix
row_indices
[[   0]
 [   1]
 [   2]
 ...
 [2913]
 [2914]
 [2915]]
col_indices
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63]
self.ofmap_addr_matrix
[[   200    201    202 ...    261    262    263]
 [   264    265    266 ...    325    326    327]
 [   328    329    330 ...    389    390    391]
 ...
 [186632 186633 186634 ... 186693 186694 186695]
 [186696 186697 186698 ... 186757 186758 186759]
 [186760 186761 186762 ... 186821 186822 186823]]
these are the operand matrices
(2916, 288)
(288, 64)
(2916, 64)
[[     0      1      4 ...   7353   7356   7357]
 [    64     65     68 ...   7417   7420   7421]
 [   128    129    132 ...   7481   7484   7485]
 ...
 [193216 193217 193220 ... 200569 200572 200573]
 [193280 193281 193284 ... 200633 200636 200637]
 [193344 193345 193348 ... 200697 200700 200701]]
[[  100   676  1252 ... 35236 35812 36388]
 [  101   677  1253 ... 35237 35813 36389]
 [  104   680  1256 ... 35240 35816 36392]
 ...
 [  669  1245  1821 ... 35805 36381 36957]
 [  672  1248  1824 ... 35808 36384 36960]
 [  673  1249  1825 ... 35809 36385 36961]]
[[   200    201    202 ...    261    262    263]
 [   264    265    266 ...    325    326    327]
 [   328    329    330 ...    389    390    391]
 ...
 [186632 186633 186634 ... 186693 186694 186695]
 [186696 186697 186698 ... 186757 186758 186759]
 [186760 186761 186762 ... 186821 186822 186823]]
layer_calc_params[0] * layer_calc_params[1] * num_filters =  54 54 64
self.num_compute = self.topo.get_layer_num_ofmap_px(self.layer_id) * self.topo.get_layer_window_size(self.layer_id)
Nofmap: Number of OFMAP pixels generated by filter
layer_calc_params[0] * layer_calc_params[1] * num_filters =  54 54 64
107495424 = 186624 * 576
self.layer_id  3
filter matrix in create_filter_prefetch_mat
[[  100   676  1252 ... 35236 35812 36388]
 [  101   677  1253 ... 35237 35813 36389]
 [  104   680  1256 ... 35240 35816 36392]
 ...
 [  669  1245  1821 ... 35805 36381 36957]
 [  672  1248  1824 ... 35808 36384 36960]
 [  673  1249  1825 ... 35809 36385 36961]]
End
printing self.filter_prefetch_matrix is ws.py
[[ 1.000e+02  6.760e+02  1.252e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [ 1.010e+02  6.770e+02  1.253e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [ 1.040e+02  6.800e+02  1.256e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]
 ...
 [ 6.690e+02  1.245e+03  1.821e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [ 6.720e+02  1.248e+03  1.824e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [ 6.730e+02  1.249e+03  1.825e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]]
746496.0
1492992.0
1679616.0
printing self.filter_demand_matrix in ws.py
[[ 3.530e+02  9.290e+02  1.505e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [ 3.520e+02  9.280e+02  1.504e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [ 3.490e+02  9.250e+02  1.501e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]
 ...
 [-1.000e+00 -1.000e+00 -1.000e+00 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [-1.000e+00 -1.000e+00 -1.000e+00 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [-1.000e+00 -1.000e+00 -1.000e+00 ... -1.000e+00 -1.000e+00 -1.000e+00]]
These are the demand matrices
ifmap_demand_mat demand matrix
[[-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 ...
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]]
filter_demand_mat demand matrix
[[ 3.530e+02  9.290e+02  1.505e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [ 3.520e+02  9.280e+02  1.504e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [ 3.490e+02  9.250e+02  1.501e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]
 ...
 [-1.000e+00 -1.000e+00 -1.000e+00 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [-1.000e+00 -1.000e+00 -1.000e+00 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [-1.000e+00 -1.000e+00 -1.000e+00 ... -1.000e+00 -1.000e+00 -1.000e+00]]
ofmap_demand_mat demand matrix
[[-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 ...
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]]
Compute cycles: 9893
Stall cycles: 0
Overall utilization: 66.32%
Mapping efficiency: 37.50%
Average IFMAP SRAM BW: 509.335 words/cycle
Average Filter SRAM BW: 1.863 words/cycle
Average Filter Metadata SRAM BW: 0.116 words/cycle
Average OFMAP SRAM BW: 56.593 words/cycle
Average IFMAP DRAM BW: 50.000 words/cycle
Average Filter DRAM BW: 50.000 words/cycle
Average OFMAP DRAM BW: 49.997 words/cycle

Running Layer 4
self.filter_addr_matrix
(576, 64)
[[  100   676  1252 ... 35236 35812 36388]
 [  101   677  1253 ... 35237 35813 36389]
 [  102   678  1254 ... 35238 35814 36390]
 ...
 [  673  1249  1825 ... 35809 36385 36961]
 [  674  1250  1826 ... 35810 36386 36962]
 [  675  1251  1827 ... 35811 36387 36963]]
SPARSITY INSIDE FILTER DEMAND MATRIX CREATION
No sparsity file - creating bitmap
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 ...
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
final sparse array
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 ...
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
after multiplying
(576, 64)
[[  100   676  1252 ... 35236 35812 36388]
 [  101   677  1253 ... 35237 35813 36389]
 [    0     0     0 ...     0     0     0]
 ...
 [  673  1249  1825 ... 35809 36385 36961]
 [    0     0     0 ...     0     0     0]
 [    0     0     0 ...     0     0     0]]
after reducing the filter array based on sparsity
[[  100   101   104 ...   669   672   673]
 [  676   677   680 ...  1245  1248  1249]
 [ 1252  1253  1256 ...  1821  1824  1825]
 ...
 [35236 35237 35240 ... 35805 35808 35809]
 [35812 35813 35816 ... 36381 36384 36385]
 [36388 36389 36392 ... 36957 36960 36961]]
Final
(288, 64)
[[  100   676  1252 ... 35236 35812 36388]
 [  101   677  1253 ... 35237 35813 36389]
 [  104   680  1256 ... 35240 35816 36392]
 ...
 [  669  1245  1821 ... 35805 36381 36957]
 [  672  1248  1824 ... 35808 36384 36960]
 [  673  1249  1825 ... 35809 36385 36961]]
INSIDE INPUT FILTER DEMAND MATRIX CREATION FUNCTION
self.batch_size in ifmap function is  1
Rows = batch_size * ofmap_px_per_filt
self.ifmap_addr_matrix
(2916, 576)
[[     0      1      2 ...   7357   7358   7359]
 [    64     65     66 ...   7421   7422   7423]
 [   128    129    130 ...   7485   7486   7487]
 ...
 [193216 193217 193218 ... 200573 200574 200575]
 [193280 193281 193282 ... 200637 200638 200639]
 [193344 193345 193346 ... 200701 200702 200703]]
Input sparsity being applied
[1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1
 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1
 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0
 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0
 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1
 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1
 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0
 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0
 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1
 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1
 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0
 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0
 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1
 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1
 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0
 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0]
[[     0      1      0 ...   7357      0      0]
 [    64     65      0 ...   7421      0      0]
 [   128    129      0 ...   7485      0      0]
 ...
 [193216 193217      0 ... 200573      0      0]
 [193280 193281      0 ... 200637      0      0]
 [193344 193345      0 ... 200701      0      0]]
[[     0      1      4 ...   7353   7356   7357]
 [    64     65     68 ...   7417   7420   7421]
 [   128    129    132 ...   7481   7484   7485]
 ...
 [193216 193217 193220 ... 200569 200572 200573]
 [193280 193281 193284 ... 200633 200636 200637]
 [193344 193345 193348 ... 200697 200700 200701]]
self.ifmap_addr_matrix for sparsity
[[     0      1      4 ...   7353   7356   7357]
 [    64     65     68 ...   7417   7420   7421]
 [   128    129    132 ...   7481   7484   7485]
 ...
 [193216 193217 193220 ... 200569 200572 200573]
 [193280 193281 193284 ... 200633 200636 200637]
 [193344 193345 193348 ... 200697 200700 200701]]
create_ofmap_matrix
row_indices
[[   0]
 [   1]
 [   2]
 ...
 [2913]
 [2914]
 [2915]]
col_indices
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63]
self.ofmap_addr_matrix
[[   200    201    202 ...    261    262    263]
 [   264    265    266 ...    325    326    327]
 [   328    329    330 ...    389    390    391]
 ...
 [186632 186633 186634 ... 186693 186694 186695]
 [186696 186697 186698 ... 186757 186758 186759]
 [186760 186761 186762 ... 186821 186822 186823]]
these are the operand matrices
(2916, 288)
(288, 64)
(2916, 64)
[[     0      1      4 ...   7353   7356   7357]
 [    64     65     68 ...   7417   7420   7421]
 [   128    129    132 ...   7481   7484   7485]
 ...
 [193216 193217 193220 ... 200569 200572 200573]
 [193280 193281 193284 ... 200633 200636 200637]
 [193344 193345 193348 ... 200697 200700 200701]]
[[  100   676  1252 ... 35236 35812 36388]
 [  101   677  1253 ... 35237 35813 36389]
 [  104   680  1256 ... 35240 35816 36392]
 ...
 [  669  1245  1821 ... 35805 36381 36957]
 [  672  1248  1824 ... 35808 36384 36960]
 [  673  1249  1825 ... 35809 36385 36961]]
[[   200    201    202 ...    261    262    263]
 [   264    265    266 ...    325    326    327]
 [   328    329    330 ...    389    390    391]
 ...
 [186632 186633 186634 ... 186693 186694 186695]
 [186696 186697 186698 ... 186757 186758 186759]
 [186760 186761 186762 ... 186821 186822 186823]]
layer_calc_params[0] * layer_calc_params[1] * num_filters =  54 54 64
self.num_compute = self.topo.get_layer_num_ofmap_px(self.layer_id) * self.topo.get_layer_window_size(self.layer_id)
Nofmap: Number of OFMAP pixels generated by filter
layer_calc_params[0] * layer_calc_params[1] * num_filters =  54 54 64
107495424 = 186624 * 576
self.layer_id  4
filter matrix in create_filter_prefetch_mat
[[  100   676  1252 ... 35236 35812 36388]
 [  101   677  1253 ... 35237 35813 36389]
 [  104   680  1256 ... 35240 35816 36392]
 ...
 [  669  1245  1821 ... 35805 36381 36957]
 [  672  1248  1824 ... 35808 36384 36960]
 [  673  1249  1825 ... 35809 36385 36961]]
End
printing self.filter_prefetch_matrix is ws.py
[[ 1.000e+02  6.760e+02  1.252e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [ 1.010e+02  6.770e+02  1.253e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [ 1.040e+02  6.800e+02  1.256e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]
 ...
 [ 6.690e+02  1.245e+03  1.821e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [ 6.720e+02  1.248e+03  1.824e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [ 6.730e+02  1.249e+03  1.825e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]]
746496.0
1492992.0
1679616.0
printing self.filter_demand_matrix in ws.py
[[ 3.530e+02  9.290e+02  1.505e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [ 3.520e+02  9.280e+02  1.504e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [ 3.490e+02  9.250e+02  1.501e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]
 ...
 [-1.000e+00 -1.000e+00 -1.000e+00 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [-1.000e+00 -1.000e+00 -1.000e+00 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [-1.000e+00 -1.000e+00 -1.000e+00 ... -1.000e+00 -1.000e+00 -1.000e+00]]
These are the demand matrices
ifmap_demand_mat demand matrix
[[-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 ...
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]]
filter_demand_mat demand matrix
[[ 3.530e+02  9.290e+02  1.505e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [ 3.520e+02  9.280e+02  1.504e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [ 3.490e+02  9.250e+02  1.501e+03 ... -1.000e+00 -1.000e+00 -1.000e+00]
 ...
 [-1.000e+00 -1.000e+00 -1.000e+00 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [-1.000e+00 -1.000e+00 -1.000e+00 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [-1.000e+00 -1.000e+00 -1.000e+00 ... -1.000e+00 -1.000e+00 -1.000e+00]]
ofmap_demand_mat demand matrix
[[-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 ...
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]]
Compute cycles: 9893
Stall cycles: 0
Overall utilization: 66.32%
Mapping efficiency: 37.50%
Average IFMAP SRAM BW: 509.335 words/cycle
Average Filter SRAM BW: 1.863 words/cycle
Average Filter Metadata SRAM BW: 0.116 words/cycle
Average OFMAP SRAM BW: 56.593 words/cycle
Average IFMAP DRAM BW: 50.000 words/cycle
Average Filter DRAM BW: 50.000 words/cycle
Average OFMAP DRAM BW: 49.997 words/cycle

Running Layer 5
self.filter_addr_matrix
(576, 128)
[[  100   676  1252 ... 72100 72676 73252]
 [  101   677  1253 ... 72101 72677 73253]
 [  102   678  1254 ... 72102 72678 73254]
 ...
 [  673  1249  1825 ... 72673 73249 73825]
 [  674  1250  1826 ... 72674 73250 73826]
 [  675  1251  1827 ... 72675 73251 73827]]
SPARSITY INSIDE FILTER DEMAND MATRIX CREATION
No sparsity file - creating bitmap
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 ...
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
final sparse array
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 ...
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
after multiplying
(576, 128)
[[  100   676  1252 ... 72100 72676 73252]
 [  101   677  1253 ... 72101 72677 73253]
 [    0     0     0 ...     0     0     0]
 ...
 [  673  1249  1825 ... 72673 73249 73825]
 [    0     0     0 ...     0     0     0]
 [    0     0     0 ...     0     0     0]]
after reducing the filter array based on sparsity
[[  100   101   104 ...   669   672   673]
 [  676   677   680 ...  1245  1248  1249]
 [ 1252  1253  1256 ...  1821  1824  1825]
 ...
 [72100 72101 72104 ... 72669 72672 72673]
 [72676 72677 72680 ... 73245 73248 73249]
 [73252 73253 73256 ... 73821 73824 73825]]
Final
(288, 128)
[[  100   676  1252 ... 72100 72676 73252]
 [  101   677  1253 ... 72101 72677 73253]
 [  104   680  1256 ... 72104 72680 73256]
 ...
 [  669  1245  1821 ... 72669 73245 73821]
 [  672  1248  1824 ... 72672 73248 73824]
 [  673  1249  1825 ... 72673 73249 73825]]
INSIDE INPUT FILTER DEMAND MATRIX CREATION FUNCTION
self.batch_size in ifmap function is  1
Rows = batch_size * ofmap_px_per_filt
self.ifmap_addr_matrix
(784, 576)
[[     0      1      2 ...   7357   7358   7359]
 [   128    129    130 ...   7485   7486   7487]
 [   256    257    258 ...   7613   7614   7615]
 ...
 [196736 196737 196738 ...     -1     -1     -1]
 [196864 196865 196866 ...     -1     -1     -1]
 [196992 196993 196994 ...     -1     -1     -1]]
Input sparsity being applied
[1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1
 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1
 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0
 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0
 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1
 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1
 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0
 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0
 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1
 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1
 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0
 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0
 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1
 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1
 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0
 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0]
[[     0      1      0 ...   7357      0      0]
 [   128    129      0 ...   7485      0      0]
 [   256    257      0 ...   7613      0      0]
 ...
 [196736 196737      0 ...     -1      0      0]
 [196864 196865      0 ...     -1      0      0]
 [196992 196993      0 ...     -1      0      0]]
[[     0      1      4 ...   7353   7356   7357]
 [   128    129    132 ...   7481   7484   7485]
 [   256    257    260 ...   7609   7612   7613]
 ...
 [196736 196737 196740 ...     -1     -1     -1]
 [196864 196865 196868 ...     -1     -1     -1]
 [196992 196993 196996 ...     -1     -1     -1]]
self.ifmap_addr_matrix for sparsity
[[     0      1      4 ...   7353   7356   7357]
 [   128    129    132 ...   7481   7484   7485]
 [   256    257    260 ...   7609   7612   7613]
 ...
 [196736 196737 196740 ...     -1     -1     -1]
 [196864 196865 196868 ...     -1     -1     -1]
 [196992 196993 196996 ...     -1     -1     -1]]
create_ofmap_matrix
row_indices
[[  0]
 [  1]
 [  2]
 [  3]
 [  4]
 [  5]
 [  6]
 [  7]
 [  8]
 [  9]
 [ 10]
 [ 11]
 [ 12]
 [ 13]
 [ 14]
 [ 15]
 [ 16]
 [ 17]
 [ 18]
 [ 19]
 [ 20]
 [ 21]
 [ 22]
 [ 23]
 [ 24]
 [ 25]
 [ 26]
 [ 27]
 [ 28]
 [ 29]
 [ 30]
 [ 31]
 [ 32]
 [ 33]
 [ 34]
 [ 35]
 [ 36]
 [ 37]
 [ 38]
 [ 39]
 [ 40]
 [ 41]
 [ 42]
 [ 43]
 [ 44]
 [ 45]
 [ 46]
 [ 47]
 [ 48]
 [ 49]
 [ 50]
 [ 51]
 [ 52]
 [ 53]
 [ 54]
 [ 55]
 [ 56]
 [ 57]
 [ 58]
 [ 59]
 [ 60]
 [ 61]
 [ 62]
 [ 63]
 [ 64]
 [ 65]
 [ 66]
 [ 67]
 [ 68]
 [ 69]
 [ 70]
 [ 71]
 [ 72]
 [ 73]
 [ 74]
 [ 75]
 [ 76]
 [ 77]
 [ 78]
 [ 79]
 [ 80]
 [ 81]
 [ 82]
 [ 83]
 [ 84]
 [ 85]
 [ 86]
 [ 87]
 [ 88]
 [ 89]
 [ 90]
 [ 91]
 [ 92]
 [ 93]
 [ 94]
 [ 95]
 [ 96]
 [ 97]
 [ 98]
 [ 99]
 [100]
 [101]
 [102]
 [103]
 [104]
 [105]
 [106]
 [107]
 [108]
 [109]
 [110]
 [111]
 [112]
 [113]
 [114]
 [115]
 [116]
 [117]
 [118]
 [119]
 [120]
 [121]
 [122]
 [123]
 [124]
 [125]
 [126]
 [127]
 [128]
 [129]
 [130]
 [131]
 [132]
 [133]
 [134]
 [135]
 [136]
 [137]
 [138]
 [139]
 [140]
 [141]
 [142]
 [143]
 [144]
 [145]
 [146]
 [147]
 [148]
 [149]
 [150]
 [151]
 [152]
 [153]
 [154]
 [155]
 [156]
 [157]
 [158]
 [159]
 [160]
 [161]
 [162]
 [163]
 [164]
 [165]
 [166]
 [167]
 [168]
 [169]
 [170]
 [171]
 [172]
 [173]
 [174]
 [175]
 [176]
 [177]
 [178]
 [179]
 [180]
 [181]
 [182]
 [183]
 [184]
 [185]
 [186]
 [187]
 [188]
 [189]
 [190]
 [191]
 [192]
 [193]
 [194]
 [195]
 [196]
 [197]
 [198]
 [199]
 [200]
 [201]
 [202]
 [203]
 [204]
 [205]
 [206]
 [207]
 [208]
 [209]
 [210]
 [211]
 [212]
 [213]
 [214]
 [215]
 [216]
 [217]
 [218]
 [219]
 [220]
 [221]
 [222]
 [223]
 [224]
 [225]
 [226]
 [227]
 [228]
 [229]
 [230]
 [231]
 [232]
 [233]
 [234]
 [235]
 [236]
 [237]
 [238]
 [239]
 [240]
 [241]
 [242]
 [243]
 [244]
 [245]
 [246]
 [247]
 [248]
 [249]
 [250]
 [251]
 [252]
 [253]
 [254]
 [255]
 [256]
 [257]
 [258]
 [259]
 [260]
 [261]
 [262]
 [263]
 [264]
 [265]
 [266]
 [267]
 [268]
 [269]
 [270]
 [271]
 [272]
 [273]
 [274]
 [275]
 [276]
 [277]
 [278]
 [279]
 [280]
 [281]
 [282]
 [283]
 [284]
 [285]
 [286]
 [287]
 [288]
 [289]
 [290]
 [291]
 [292]
 [293]
 [294]
 [295]
 [296]
 [297]
 [298]
 [299]
 [300]
 [301]
 [302]
 [303]
 [304]
 [305]
 [306]
 [307]
 [308]
 [309]
 [310]
 [311]
 [312]
 [313]
 [314]
 [315]
 [316]
 [317]
 [318]
 [319]
 [320]
 [321]
 [322]
 [323]
 [324]
 [325]
 [326]
 [327]
 [328]
 [329]
 [330]
 [331]
 [332]
 [333]
 [334]
 [335]
 [336]
 [337]
 [338]
 [339]
 [340]
 [341]
 [342]
 [343]
 [344]
 [345]
 [346]
 [347]
 [348]
 [349]
 [350]
 [351]
 [352]
 [353]
 [354]
 [355]
 [356]
 [357]
 [358]
 [359]
 [360]
 [361]
 [362]
 [363]
 [364]
 [365]
 [366]
 [367]
 [368]
 [369]
 [370]
 [371]
 [372]
 [373]
 [374]
 [375]
 [376]
 [377]
 [378]
 [379]
 [380]
 [381]
 [382]
 [383]
 [384]
 [385]
 [386]
 [387]
 [388]
 [389]
 [390]
 [391]
 [392]
 [393]
 [394]
 [395]
 [396]
 [397]
 [398]
 [399]
 [400]
 [401]
 [402]
 [403]
 [404]
 [405]
 [406]
 [407]
 [408]
 [409]
 [410]
 [411]
 [412]
 [413]
 [414]
 [415]
 [416]
 [417]
 [418]
 [419]
 [420]
 [421]
 [422]
 [423]
 [424]
 [425]
 [426]
 [427]
 [428]
 [429]
 [430]
 [431]
 [432]
 [433]
 [434]
 [435]
 [436]
 [437]
 [438]
 [439]
 [440]
 [441]
 [442]
 [443]
 [444]
 [445]
 [446]
 [447]
 [448]
 [449]
 [450]
 [451]
 [452]
 [453]
 [454]
 [455]
 [456]
 [457]
 [458]
 [459]
 [460]
 [461]
 [462]
 [463]
 [464]
 [465]
 [466]
 [467]
 [468]
 [469]
 [470]
 [471]
 [472]
 [473]
 [474]
 [475]
 [476]
 [477]
 [478]
 [479]
 [480]
 [481]
 [482]
 [483]
 [484]
 [485]
 [486]
 [487]
 [488]
 [489]
 [490]
 [491]
 [492]
 [493]
 [494]
 [495]
 [496]
 [497]
 [498]
 [499]
 [500]
 [501]
 [502]
 [503]
 [504]
 [505]
 [506]
 [507]
 [508]
 [509]
 [510]
 [511]
 [512]
 [513]
 [514]
 [515]
 [516]
 [517]
 [518]
 [519]
 [520]
 [521]
 [522]
 [523]
 [524]
 [525]
 [526]
 [527]
 [528]
 [529]
 [530]
 [531]
 [532]
 [533]
 [534]
 [535]
 [536]
 [537]
 [538]
 [539]
 [540]
 [541]
 [542]
 [543]
 [544]
 [545]
 [546]
 [547]
 [548]
 [549]
 [550]
 [551]
 [552]
 [553]
 [554]
 [555]
 [556]
 [557]
 [558]
 [559]
 [560]
 [561]
 [562]
 [563]
 [564]
 [565]
 [566]
 [567]
 [568]
 [569]
 [570]
 [571]
 [572]
 [573]
 [574]
 [575]
 [576]
 [577]
 [578]
 [579]
 [580]
 [581]
 [582]
 [583]
 [584]
 [585]
 [586]
 [587]
 [588]
 [589]
 [590]
 [591]
 [592]
 [593]
 [594]
 [595]
 [596]
 [597]
 [598]
 [599]
 [600]
 [601]
 [602]
 [603]
 [604]
 [605]
 [606]
 [607]
 [608]
 [609]
 [610]
 [611]
 [612]
 [613]
 [614]
 [615]
 [616]
 [617]
 [618]
 [619]
 [620]
 [621]
 [622]
 [623]
 [624]
 [625]
 [626]
 [627]
 [628]
 [629]
 [630]
 [631]
 [632]
 [633]
 [634]
 [635]
 [636]
 [637]
 [638]
 [639]
 [640]
 [641]
 [642]
 [643]
 [644]
 [645]
 [646]
 [647]
 [648]
 [649]
 [650]
 [651]
 [652]
 [653]
 [654]
 [655]
 [656]
 [657]
 [658]
 [659]
 [660]
 [661]
 [662]
 [663]
 [664]
 [665]
 [666]
 [667]
 [668]
 [669]
 [670]
 [671]
 [672]
 [673]
 [674]
 [675]
 [676]
 [677]
 [678]
 [679]
 [680]
 [681]
 [682]
 [683]
 [684]
 [685]
 [686]
 [687]
 [688]
 [689]
 [690]
 [691]
 [692]
 [693]
 [694]
 [695]
 [696]
 [697]
 [698]
 [699]
 [700]
 [701]
 [702]
 [703]
 [704]
 [705]
 [706]
 [707]
 [708]
 [709]
 [710]
 [711]
 [712]
 [713]
 [714]
 [715]
 [716]
 [717]
 [718]
 [719]
 [720]
 [721]
 [722]
 [723]
 [724]
 [725]
 [726]
 [727]
 [728]
 [729]
 [730]
 [731]
 [732]
 [733]
 [734]
 [735]
 [736]
 [737]
 [738]
 [739]
 [740]
 [741]
 [742]
 [743]
 [744]
 [745]
 [746]
 [747]
 [748]
 [749]
 [750]
 [751]
 [752]
 [753]
 [754]
 [755]
 [756]
 [757]
 [758]
 [759]
 [760]
 [761]
 [762]
 [763]
 [764]
 [765]
 [766]
 [767]
 [768]
 [769]
 [770]
 [771]
 [772]
 [773]
 [774]
 [775]
 [776]
 [777]
 [778]
 [779]
 [780]
 [781]
 [782]
 [783]]
col_indices
[  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35
  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53
  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71
  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89
  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107
 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125
 126 127]
self.ofmap_addr_matrix
[[   200    201    202 ...    325    326    327]
 [   328    329    330 ...    453    454    455]
 [   456    457    458 ...    581    582    583]
 ...
 [100168 100169 100170 ... 100293 100294 100295]
 [100296 100297 100298 ... 100421 100422 100423]
 [100424 100425 100426 ... 100549 100550 100551]]
these are the operand matrices
(784, 288)
(288, 128)
(784, 128)
[[     0      1      4 ...   7353   7356   7357]
 [   128    129    132 ...   7481   7484   7485]
 [   256    257    260 ...   7609   7612   7613]
 ...
 [196736 196737 196740 ...     -1     -1     -1]
 [196864 196865 196868 ...     -1     -1     -1]
 [196992 196993 196996 ...     -1     -1     -1]]
[[  100   676  1252 ... 72100 72676 73252]
 [  101   677  1253 ... 72101 72677 73253]
 [  104   680  1256 ... 72104 72680 73256]
 ...
 [  669  1245  1821 ... 72669 73245 73821]
 [  672  1248  1824 ... 72672 73248 73824]
 [  673  1249  1825 ... 72673 73249 73825]]
[[   200    201    202 ...    325    326    327]
 [   328    329    330 ...    453    454    455]
 [   456    457    458 ...    581    582    583]
 ...
 [100168 100169 100170 ... 100293 100294 100295]
 [100296 100297 100298 ... 100421 100422 100423]
 [100424 100425 100426 ... 100549 100550 100551]]
layer_calc_params[0] * layer_calc_params[1] * num_filters =  28 28 128
self.num_compute = self.topo.get_layer_num_ofmap_px(self.layer_id) * self.topo.get_layer_window_size(self.layer_id)
Nofmap: Number of OFMAP pixels generated by filter
layer_calc_params[0] * layer_calc_params[1] * num_filters =  28 28 128
57802752 = 100352 * 576
self.layer_id  5
filter matrix in create_filter_prefetch_mat
[[  100   676  1252 ... 72100 72676 73252]
 [  101   677  1253 ... 72101 72677 73253]
 [  104   680  1256 ... 72104 72680 73256]
 ...
 [  669  1245  1821 ... 72669 73245 73821]
 [  672  1248  1824 ... 72672 73248 73824]
 [  673  1249  1825 ... 72673 73249 73825]]
End
printing self.filter_prefetch_matrix is ws.py
[[  100   676  1252 ... 72100 72676 73252]
 [  101   677  1253 ... 72101 72677 73253]
 [  104   680  1256 ... 72104 72680 73256]
 ...
 [  669  1245  1821 ... 72669 73245 73821]
 [  672  1248  1824 ... 72672 73248 73824]
 [  673  1249  1825 ... 72673 73249 73825]]
200704.0
401408.0
451584.0
printing self.filter_demand_matrix in ws.py
[[ 3.5300e+02  9.2900e+02  1.5050e+03 ...  7.2353e+04  7.2929e+04
   7.3505e+04]
 [ 3.5200e+02  9.2800e+02  1.5040e+03 ...  7.2352e+04  7.2928e+04
   7.3504e+04]
 [ 3.4900e+02  9.2500e+02  1.5010e+03 ...  7.2349e+04  7.2925e+04
   7.3501e+04]
 ...
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]]
These are the demand matrices
ifmap_demand_mat demand matrix
[[-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 ...
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]]
filter_demand_mat demand matrix
[[ 3.5300e+02  9.2900e+02  1.5050e+03 ...  7.2353e+04  7.2929e+04
   7.3505e+04]
 [ 3.5200e+02  9.2800e+02  1.5040e+03 ...  7.2352e+04  7.2928e+04
   7.3504e+04]
 [ 3.4900e+02  9.2500e+02  1.5010e+03 ...  7.2349e+04  7.2925e+04
   7.3501e+04]
 ...
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]]
ofmap_demand_mat demand matrix
[[-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 ...
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ...  1.00549e+05  1.00422e+05
   1.00295e+05]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00  1.00550e+05
   1.00423e+05]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
   1.00551e+05]]
Compute cycles: 3497
Stall cycles: 0
Overall utilization: 100.89%
Mapping efficiency: 75.00%
Average IFMAP SRAM BW: 387.404 words/cycle
Average Filter SRAM BW: 10.542 words/cycle
Average Filter Metadata SRAM BW: 0.659 words/cycle
Average OFMAP SRAM BW: 86.090 words/cycle
Average IFMAP DRAM BW: 50.000 words/cycle
Average Filter DRAM BW: 50.000 words/cycle
Average OFMAP DRAM BW: 49.993 words/cycle

Running Layer 6
self.filter_addr_matrix
(1152, 128)
[[   100   1252   2404 ... 144100 145252 146404]
 [   101   1253   2405 ... 144101 145253 146405]
 [   102   1254   2406 ... 144102 145254 146406]
 ...
 [  1249   2401   3553 ... 145249 146401 147553]
 [  1250   2402   3554 ... 145250 146402 147554]
 [  1251   2403   3555 ... 145251 146403 147555]]
SPARSITY INSIDE FILTER DEMAND MATRIX CREATION
No sparsity file - creating bitmap
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 ...
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
final sparse array
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 ...
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
after multiplying
(1152, 128)
[[   100   1252   2404 ... 144100 145252 146404]
 [   101   1253   2405 ... 144101 145253 146405]
 [     0      0      0 ...      0      0      0]
 ...
 [  1249   2401   3553 ... 145249 146401 147553]
 [     0      0      0 ...      0      0      0]
 [     0      0      0 ...      0      0      0]]
after reducing the filter array based on sparsity
[[   100    101    104 ...   1245   1248   1249]
 [  1252   1253   1256 ...   2397   2400   2401]
 [  2404   2405   2408 ...   3549   3552   3553]
 ...
 [144100 144101 144104 ... 145245 145248 145249]
 [145252 145253 145256 ... 146397 146400 146401]
 [146404 146405 146408 ... 147549 147552 147553]]
Final
(576, 128)
[[   100   1252   2404 ... 144100 145252 146404]
 [   101   1253   2405 ... 144101 145253 146405]
 [   104   1256   2408 ... 144104 145256 146408]
 ...
 [  1245   2397   3549 ... 145245 146397 147549]
 [  1248   2400   3552 ... 145248 146400 147552]
 [  1249   2401   3553 ... 145249 146401 147553]]
INSIDE INPUT FILTER DEMAND MATRIX CREATION FUNCTION
self.batch_size in ifmap function is  1
Rows = batch_size * ofmap_px_per_filt
self.ifmap_addr_matrix
(676, 1152)
[[     0      1      2 ...   7549   7550   7551]
 [   128    129    130 ...   7677   7678   7679]
 [   256    257    258 ...   7805   7806   7807]
 ...
 [ 92544  92545  92546 ... 100093 100094 100095]
 [ 92672  92673  92674 ... 100221 100222 100223]
 [ 92800  92801  92802 ... 100349 100350 100351]]
Input sparsity being applied
[1 1 0 ... 1 0 0]
[[     0      1      0 ...   7549      0      0]
 [   128    129      0 ...   7677      0      0]
 [   256    257      0 ...   7805      0      0]
 ...
 [ 92544  92545      0 ... 100093      0      0]
 [ 92672  92673      0 ... 100221      0      0]
 [ 92800  92801      0 ... 100349      0      0]]
[[     0      1      4 ...   7545   7548   7549]
 [   128    129    132 ...   7673   7676   7677]
 [   256    257    260 ...   7801   7804   7805]
 ...
 [ 92544  92545  92548 ... 100089 100092 100093]
 [ 92672  92673  92676 ... 100217 100220 100221]
 [ 92800  92801  92804 ... 100345 100348 100349]]
self.ifmap_addr_matrix for sparsity
[[     0      1      4 ...   7545   7548   7549]
 [   128    129    132 ...   7673   7676   7677]
 [   256    257    260 ...   7801   7804   7805]
 ...
 [ 92544  92545  92548 ... 100089 100092 100093]
 [ 92672  92673  92676 ... 100217 100220 100221]
 [ 92800  92801  92804 ... 100345 100348 100349]]
create_ofmap_matrix
row_indices
[[  0]
 [  1]
 [  2]
 [  3]
 [  4]
 [  5]
 [  6]
 [  7]
 [  8]
 [  9]
 [ 10]
 [ 11]
 [ 12]
 [ 13]
 [ 14]
 [ 15]
 [ 16]
 [ 17]
 [ 18]
 [ 19]
 [ 20]
 [ 21]
 [ 22]
 [ 23]
 [ 24]
 [ 25]
 [ 26]
 [ 27]
 [ 28]
 [ 29]
 [ 30]
 [ 31]
 [ 32]
 [ 33]
 [ 34]
 [ 35]
 [ 36]
 [ 37]
 [ 38]
 [ 39]
 [ 40]
 [ 41]
 [ 42]
 [ 43]
 [ 44]
 [ 45]
 [ 46]
 [ 47]
 [ 48]
 [ 49]
 [ 50]
 [ 51]
 [ 52]
 [ 53]
 [ 54]
 [ 55]
 [ 56]
 [ 57]
 [ 58]
 [ 59]
 [ 60]
 [ 61]
 [ 62]
 [ 63]
 [ 64]
 [ 65]
 [ 66]
 [ 67]
 [ 68]
 [ 69]
 [ 70]
 [ 71]
 [ 72]
 [ 73]
 [ 74]
 [ 75]
 [ 76]
 [ 77]
 [ 78]
 [ 79]
 [ 80]
 [ 81]
 [ 82]
 [ 83]
 [ 84]
 [ 85]
 [ 86]
 [ 87]
 [ 88]
 [ 89]
 [ 90]
 [ 91]
 [ 92]
 [ 93]
 [ 94]
 [ 95]
 [ 96]
 [ 97]
 [ 98]
 [ 99]
 [100]
 [101]
 [102]
 [103]
 [104]
 [105]
 [106]
 [107]
 [108]
 [109]
 [110]
 [111]
 [112]
 [113]
 [114]
 [115]
 [116]
 [117]
 [118]
 [119]
 [120]
 [121]
 [122]
 [123]
 [124]
 [125]
 [126]
 [127]
 [128]
 [129]
 [130]
 [131]
 [132]
 [133]
 [134]
 [135]
 [136]
 [137]
 [138]
 [139]
 [140]
 [141]
 [142]
 [143]
 [144]
 [145]
 [146]
 [147]
 [148]
 [149]
 [150]
 [151]
 [152]
 [153]
 [154]
 [155]
 [156]
 [157]
 [158]
 [159]
 [160]
 [161]
 [162]
 [163]
 [164]
 [165]
 [166]
 [167]
 [168]
 [169]
 [170]
 [171]
 [172]
 [173]
 [174]
 [175]
 [176]
 [177]
 [178]
 [179]
 [180]
 [181]
 [182]
 [183]
 [184]
 [185]
 [186]
 [187]
 [188]
 [189]
 [190]
 [191]
 [192]
 [193]
 [194]
 [195]
 [196]
 [197]
 [198]
 [199]
 [200]
 [201]
 [202]
 [203]
 [204]
 [205]
 [206]
 [207]
 [208]
 [209]
 [210]
 [211]
 [212]
 [213]
 [214]
 [215]
 [216]
 [217]
 [218]
 [219]
 [220]
 [221]
 [222]
 [223]
 [224]
 [225]
 [226]
 [227]
 [228]
 [229]
 [230]
 [231]
 [232]
 [233]
 [234]
 [235]
 [236]
 [237]
 [238]
 [239]
 [240]
 [241]
 [242]
 [243]
 [244]
 [245]
 [246]
 [247]
 [248]
 [249]
 [250]
 [251]
 [252]
 [253]
 [254]
 [255]
 [256]
 [257]
 [258]
 [259]
 [260]
 [261]
 [262]
 [263]
 [264]
 [265]
 [266]
 [267]
 [268]
 [269]
 [270]
 [271]
 [272]
 [273]
 [274]
 [275]
 [276]
 [277]
 [278]
 [279]
 [280]
 [281]
 [282]
 [283]
 [284]
 [285]
 [286]
 [287]
 [288]
 [289]
 [290]
 [291]
 [292]
 [293]
 [294]
 [295]
 [296]
 [297]
 [298]
 [299]
 [300]
 [301]
 [302]
 [303]
 [304]
 [305]
 [306]
 [307]
 [308]
 [309]
 [310]
 [311]
 [312]
 [313]
 [314]
 [315]
 [316]
 [317]
 [318]
 [319]
 [320]
 [321]
 [322]
 [323]
 [324]
 [325]
 [326]
 [327]
 [328]
 [329]
 [330]
 [331]
 [332]
 [333]
 [334]
 [335]
 [336]
 [337]
 [338]
 [339]
 [340]
 [341]
 [342]
 [343]
 [344]
 [345]
 [346]
 [347]
 [348]
 [349]
 [350]
 [351]
 [352]
 [353]
 [354]
 [355]
 [356]
 [357]
 [358]
 [359]
 [360]
 [361]
 [362]
 [363]
 [364]
 [365]
 [366]
 [367]
 [368]
 [369]
 [370]
 [371]
 [372]
 [373]
 [374]
 [375]
 [376]
 [377]
 [378]
 [379]
 [380]
 [381]
 [382]
 [383]
 [384]
 [385]
 [386]
 [387]
 [388]
 [389]
 [390]
 [391]
 [392]
 [393]
 [394]
 [395]
 [396]
 [397]
 [398]
 [399]
 [400]
 [401]
 [402]
 [403]
 [404]
 [405]
 [406]
 [407]
 [408]
 [409]
 [410]
 [411]
 [412]
 [413]
 [414]
 [415]
 [416]
 [417]
 [418]
 [419]
 [420]
 [421]
 [422]
 [423]
 [424]
 [425]
 [426]
 [427]
 [428]
 [429]
 [430]
 [431]
 [432]
 [433]
 [434]
 [435]
 [436]
 [437]
 [438]
 [439]
 [440]
 [441]
 [442]
 [443]
 [444]
 [445]
 [446]
 [447]
 [448]
 [449]
 [450]
 [451]
 [452]
 [453]
 [454]
 [455]
 [456]
 [457]
 [458]
 [459]
 [460]
 [461]
 [462]
 [463]
 [464]
 [465]
 [466]
 [467]
 [468]
 [469]
 [470]
 [471]
 [472]
 [473]
 [474]
 [475]
 [476]
 [477]
 [478]
 [479]
 [480]
 [481]
 [482]
 [483]
 [484]
 [485]
 [486]
 [487]
 [488]
 [489]
 [490]
 [491]
 [492]
 [493]
 [494]
 [495]
 [496]
 [497]
 [498]
 [499]
 [500]
 [501]
 [502]
 [503]
 [504]
 [505]
 [506]
 [507]
 [508]
 [509]
 [510]
 [511]
 [512]
 [513]
 [514]
 [515]
 [516]
 [517]
 [518]
 [519]
 [520]
 [521]
 [522]
 [523]
 [524]
 [525]
 [526]
 [527]
 [528]
 [529]
 [530]
 [531]
 [532]
 [533]
 [534]
 [535]
 [536]
 [537]
 [538]
 [539]
 [540]
 [541]
 [542]
 [543]
 [544]
 [545]
 [546]
 [547]
 [548]
 [549]
 [550]
 [551]
 [552]
 [553]
 [554]
 [555]
 [556]
 [557]
 [558]
 [559]
 [560]
 [561]
 [562]
 [563]
 [564]
 [565]
 [566]
 [567]
 [568]
 [569]
 [570]
 [571]
 [572]
 [573]
 [574]
 [575]
 [576]
 [577]
 [578]
 [579]
 [580]
 [581]
 [582]
 [583]
 [584]
 [585]
 [586]
 [587]
 [588]
 [589]
 [590]
 [591]
 [592]
 [593]
 [594]
 [595]
 [596]
 [597]
 [598]
 [599]
 [600]
 [601]
 [602]
 [603]
 [604]
 [605]
 [606]
 [607]
 [608]
 [609]
 [610]
 [611]
 [612]
 [613]
 [614]
 [615]
 [616]
 [617]
 [618]
 [619]
 [620]
 [621]
 [622]
 [623]
 [624]
 [625]
 [626]
 [627]
 [628]
 [629]
 [630]
 [631]
 [632]
 [633]
 [634]
 [635]
 [636]
 [637]
 [638]
 [639]
 [640]
 [641]
 [642]
 [643]
 [644]
 [645]
 [646]
 [647]
 [648]
 [649]
 [650]
 [651]
 [652]
 [653]
 [654]
 [655]
 [656]
 [657]
 [658]
 [659]
 [660]
 [661]
 [662]
 [663]
 [664]
 [665]
 [666]
 [667]
 [668]
 [669]
 [670]
 [671]
 [672]
 [673]
 [674]
 [675]]
col_indices
[  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35
  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53
  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71
  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89
  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107
 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125
 126 127]
self.ofmap_addr_matrix
[[  200   201   202 ...   325   326   327]
 [  328   329   330 ...   453   454   455]
 [  456   457   458 ...   581   582   583]
 ...
 [86344 86345 86346 ... 86469 86470 86471]
 [86472 86473 86474 ... 86597 86598 86599]
 [86600 86601 86602 ... 86725 86726 86727]]
these are the operand matrices
(676, 576)
(576, 128)
(676, 128)
[[     0      1      4 ...   7545   7548   7549]
 [   128    129    132 ...   7673   7676   7677]
 [   256    257    260 ...   7801   7804   7805]
 ...
 [ 92544  92545  92548 ... 100089 100092 100093]
 [ 92672  92673  92676 ... 100217 100220 100221]
 [ 92800  92801  92804 ... 100345 100348 100349]]
[[   100   1252   2404 ... 144100 145252 146404]
 [   101   1253   2405 ... 144101 145253 146405]
 [   104   1256   2408 ... 144104 145256 146408]
 ...
 [  1245   2397   3549 ... 145245 146397 147549]
 [  1248   2400   3552 ... 145248 146400 147552]
 [  1249   2401   3553 ... 145249 146401 147553]]
[[  200   201   202 ...   325   326   327]
 [  328   329   330 ...   453   454   455]
 [  456   457   458 ...   581   582   583]
 ...
 [86344 86345 86346 ... 86469 86470 86471]
 [86472 86473 86474 ... 86597 86598 86599]
 [86600 86601 86602 ... 86725 86726 86727]]
layer_calc_params[0] * layer_calc_params[1] * num_filters =  26 26 128
self.num_compute = self.topo.get_layer_num_ofmap_px(self.layer_id) * self.topo.get_layer_window_size(self.layer_id)
Nofmap: Number of OFMAP pixels generated by filter
layer_calc_params[0] * layer_calc_params[1] * num_filters =  26 26 128
99680256 = 86528 * 1152
self.layer_id  6
filter matrix in create_filter_prefetch_mat
[[   100   1252   2404 ... 144100 145252 146404]
 [   101   1253   2405 ... 144101 145253 146405]
 [   104   1256   2408 ... 144104 145256 146408]
 ...
 [  1245   2397   3549 ... 145245 146397 147549]
 [  1248   2400   3552 ... 145248 146400 147552]
 [  1249   2401   3553 ... 145249 146401 147553]]
End
printing self.filter_prefetch_matrix is ws.py
[[   100   1252   2404 ... 144100 145252 146404]
 [   101   1253   2405 ... 144101 145253 146405]
 [   104   1256   2408 ... 144104 145256 146408]
 ...
 [  1245   2397   3549 ... 145245 146397 147549]
 [  1248   2400   3552 ... 145248 146400 147552]
 [  1249   2401   3553 ... 145249 146401 147553]]
173056.0
346112.0
519168.0
692224.0
778752.0
printing self.filter_demand_matrix in ws.py
[[ 3.53000e+02  1.50500e+03  2.65700e+03 ...  1.44353e+05  1.45505e+05
   1.46657e+05]
 [ 3.52000e+02  1.50400e+03  2.65600e+03 ...  1.44352e+05  1.45504e+05
   1.46656e+05]
 [ 3.49000e+02  1.50100e+03  2.65300e+03 ...  1.44349e+05  1.45501e+05
   1.46653e+05]
 ...
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]]
These are the demand matrices
ifmap_demand_mat demand matrix
[[-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 ...
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]]
filter_demand_mat demand matrix
[[ 3.53000e+02  1.50500e+03  2.65700e+03 ...  1.44353e+05  1.45505e+05
   1.46657e+05]
 [ 3.52000e+02  1.50400e+03  2.65600e+03 ...  1.44352e+05  1.45504e+05
   1.46656e+05]
 [ 3.49000e+02  1.50100e+03  2.65300e+03 ...  1.44349e+05  1.45501e+05
   1.46653e+05]
 ...
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]]
ofmap_demand_mat demand matrix
[[-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 ...
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ...  8.6725e+04  8.6598e+04
   8.6471e+04]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00  8.6726e+04
   8.6599e+04]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
   8.6727e+04]]
Compute cycles: 5289
Stall cycles: 0
Overall utilization: 115.03%
Mapping efficiency: 90.00%
Average IFMAP SRAM BW: 441.720 words/cycle
Average Filter SRAM BW: 13.940 words/cycle
Average Filter Metadata SRAM BW: 0.871 words/cycle
Average OFMAP SRAM BW: 81.800 words/cycle
Average IFMAP DRAM BW: 50.000 words/cycle
Average Filter DRAM BW: 50.000 words/cycle
Average OFMAP DRAM BW: 49.999 words/cycle

Running Layer 7
self.filter_addr_matrix
(64, 128)
[[ 100  164  228 ... 8100 8164 8228]
 [ 101  165  229 ... 8101 8165 8229]
 [ 102  166  230 ... 8102 8166 8230]
 ...
 [ 161  225  289 ... 8161 8225 8289]
 [ 162  226  290 ... 8162 8226 8290]
 [ 163  227  291 ... 8163 8227 8291]]
SPARSITY INSIDE FILTER DEMAND MATRIX CREATION
No sparsity file - creating bitmap
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 ...
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
final sparse array
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 ...
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
after multiplying
(64, 128)
[[ 100  164  228 ... 8100 8164 8228]
 [ 101  165  229 ... 8101 8165 8229]
 [   0    0    0 ...    0    0    0]
 ...
 [ 161  225  289 ... 8161 8225 8289]
 [   0    0    0 ...    0    0    0]
 [   0    0    0 ...    0    0    0]]
after reducing the filter array based on sparsity
[[ 100  101  104 ...  157  160  161]
 [ 164  165  168 ...  221  224  225]
 [ 228  229  232 ...  285  288  289]
 ...
 [8100 8101 8104 ... 8157 8160 8161]
 [8164 8165 8168 ... 8221 8224 8225]
 [8228 8229 8232 ... 8285 8288 8289]]
Final
(32, 128)
[[ 100  164  228 ... 8100 8164 8228]
 [ 101  165  229 ... 8101 8165 8229]
 [ 104  168  232 ... 8104 8168 8232]
 ...
 [ 157  221  285 ... 8157 8221 8285]
 [ 160  224  288 ... 8160 8224 8288]
 [ 161  225  289 ... 8161 8225 8289]]
INSIDE INPUT FILTER DEMAND MATRIX CREATION FUNCTION
self.batch_size in ifmap function is  1
Rows = batch_size * ofmap_px_per_filt
self.ifmap_addr_matrix
(841, 64)
[[  0   1   2 ...  61  62  63]
 [128 129 130 ... 189 190 191]
 [256 257 258 ... 317 318 319]
 ...
 [ -1  -1  -1 ...  -1  -1  -1]
 [ -1  -1  -1 ...  -1  -1  -1]
 [ -1  -1  -1 ...  -1  -1  -1]]
Input sparsity being applied
[1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1
 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0]
[[  0   1   0 ...  61   0   0]
 [128 129   0 ... 189   0   0]
 [256 257   0 ... 317   0   0]
 ...
 [ -1  -1   0 ...  -1   0   0]
 [ -1  -1   0 ...  -1   0   0]
 [ -1  -1   0 ...  -1   0   0]]
[[  0   1   4 ...  57  60  61]
 [128 129 132 ... 185 188 189]
 [256 257 260 ... 313 316 317]
 ...
 [ -1  -1  -1 ...  -1  -1  -1]
 [ -1  -1  -1 ...  -1  -1  -1]
 [ -1  -1  -1 ...  -1  -1  -1]]
self.ifmap_addr_matrix for sparsity
[[  0   1   4 ...  57  60  61]
 [128 129 132 ... 185 188 189]
 [256 257 260 ... 313 316 317]
 ...
 [ -1  -1  -1 ...  -1  -1  -1]
 [ -1  -1  -1 ...  -1  -1  -1]
 [ -1  -1  -1 ...  -1  -1  -1]]
create_ofmap_matrix
row_indices
[[  0]
 [  1]
 [  2]
 [  3]
 [  4]
 [  5]
 [  6]
 [  7]
 [  8]
 [  9]
 [ 10]
 [ 11]
 [ 12]
 [ 13]
 [ 14]
 [ 15]
 [ 16]
 [ 17]
 [ 18]
 [ 19]
 [ 20]
 [ 21]
 [ 22]
 [ 23]
 [ 24]
 [ 25]
 [ 26]
 [ 27]
 [ 28]
 [ 29]
 [ 30]
 [ 31]
 [ 32]
 [ 33]
 [ 34]
 [ 35]
 [ 36]
 [ 37]
 [ 38]
 [ 39]
 [ 40]
 [ 41]
 [ 42]
 [ 43]
 [ 44]
 [ 45]
 [ 46]
 [ 47]
 [ 48]
 [ 49]
 [ 50]
 [ 51]
 [ 52]
 [ 53]
 [ 54]
 [ 55]
 [ 56]
 [ 57]
 [ 58]
 [ 59]
 [ 60]
 [ 61]
 [ 62]
 [ 63]
 [ 64]
 [ 65]
 [ 66]
 [ 67]
 [ 68]
 [ 69]
 [ 70]
 [ 71]
 [ 72]
 [ 73]
 [ 74]
 [ 75]
 [ 76]
 [ 77]
 [ 78]
 [ 79]
 [ 80]
 [ 81]
 [ 82]
 [ 83]
 [ 84]
 [ 85]
 [ 86]
 [ 87]
 [ 88]
 [ 89]
 [ 90]
 [ 91]
 [ 92]
 [ 93]
 [ 94]
 [ 95]
 [ 96]
 [ 97]
 [ 98]
 [ 99]
 [100]
 [101]
 [102]
 [103]
 [104]
 [105]
 [106]
 [107]
 [108]
 [109]
 [110]
 [111]
 [112]
 [113]
 [114]
 [115]
 [116]
 [117]
 [118]
 [119]
 [120]
 [121]
 [122]
 [123]
 [124]
 [125]
 [126]
 [127]
 [128]
 [129]
 [130]
 [131]
 [132]
 [133]
 [134]
 [135]
 [136]
 [137]
 [138]
 [139]
 [140]
 [141]
 [142]
 [143]
 [144]
 [145]
 [146]
 [147]
 [148]
 [149]
 [150]
 [151]
 [152]
 [153]
 [154]
 [155]
 [156]
 [157]
 [158]
 [159]
 [160]
 [161]
 [162]
 [163]
 [164]
 [165]
 [166]
 [167]
 [168]
 [169]
 [170]
 [171]
 [172]
 [173]
 [174]
 [175]
 [176]
 [177]
 [178]
 [179]
 [180]
 [181]
 [182]
 [183]
 [184]
 [185]
 [186]
 [187]
 [188]
 [189]
 [190]
 [191]
 [192]
 [193]
 [194]
 [195]
 [196]
 [197]
 [198]
 [199]
 [200]
 [201]
 [202]
 [203]
 [204]
 [205]
 [206]
 [207]
 [208]
 [209]
 [210]
 [211]
 [212]
 [213]
 [214]
 [215]
 [216]
 [217]
 [218]
 [219]
 [220]
 [221]
 [222]
 [223]
 [224]
 [225]
 [226]
 [227]
 [228]
 [229]
 [230]
 [231]
 [232]
 [233]
 [234]
 [235]
 [236]
 [237]
 [238]
 [239]
 [240]
 [241]
 [242]
 [243]
 [244]
 [245]
 [246]
 [247]
 [248]
 [249]
 [250]
 [251]
 [252]
 [253]
 [254]
 [255]
 [256]
 [257]
 [258]
 [259]
 [260]
 [261]
 [262]
 [263]
 [264]
 [265]
 [266]
 [267]
 [268]
 [269]
 [270]
 [271]
 [272]
 [273]
 [274]
 [275]
 [276]
 [277]
 [278]
 [279]
 [280]
 [281]
 [282]
 [283]
 [284]
 [285]
 [286]
 [287]
 [288]
 [289]
 [290]
 [291]
 [292]
 [293]
 [294]
 [295]
 [296]
 [297]
 [298]
 [299]
 [300]
 [301]
 [302]
 [303]
 [304]
 [305]
 [306]
 [307]
 [308]
 [309]
 [310]
 [311]
 [312]
 [313]
 [314]
 [315]
 [316]
 [317]
 [318]
 [319]
 [320]
 [321]
 [322]
 [323]
 [324]
 [325]
 [326]
 [327]
 [328]
 [329]
 [330]
 [331]
 [332]
 [333]
 [334]
 [335]
 [336]
 [337]
 [338]
 [339]
 [340]
 [341]
 [342]
 [343]
 [344]
 [345]
 [346]
 [347]
 [348]
 [349]
 [350]
 [351]
 [352]
 [353]
 [354]
 [355]
 [356]
 [357]
 [358]
 [359]
 [360]
 [361]
 [362]
 [363]
 [364]
 [365]
 [366]
 [367]
 [368]
 [369]
 [370]
 [371]
 [372]
 [373]
 [374]
 [375]
 [376]
 [377]
 [378]
 [379]
 [380]
 [381]
 [382]
 [383]
 [384]
 [385]
 [386]
 [387]
 [388]
 [389]
 [390]
 [391]
 [392]
 [393]
 [394]
 [395]
 [396]
 [397]
 [398]
 [399]
 [400]
 [401]
 [402]
 [403]
 [404]
 [405]
 [406]
 [407]
 [408]
 [409]
 [410]
 [411]
 [412]
 [413]
 [414]
 [415]
 [416]
 [417]
 [418]
 [419]
 [420]
 [421]
 [422]
 [423]
 [424]
 [425]
 [426]
 [427]
 [428]
 [429]
 [430]
 [431]
 [432]
 [433]
 [434]
 [435]
 [436]
 [437]
 [438]
 [439]
 [440]
 [441]
 [442]
 [443]
 [444]
 [445]
 [446]
 [447]
 [448]
 [449]
 [450]
 [451]
 [452]
 [453]
 [454]
 [455]
 [456]
 [457]
 [458]
 [459]
 [460]
 [461]
 [462]
 [463]
 [464]
 [465]
 [466]
 [467]
 [468]
 [469]
 [470]
 [471]
 [472]
 [473]
 [474]
 [475]
 [476]
 [477]
 [478]
 [479]
 [480]
 [481]
 [482]
 [483]
 [484]
 [485]
 [486]
 [487]
 [488]
 [489]
 [490]
 [491]
 [492]
 [493]
 [494]
 [495]
 [496]
 [497]
 [498]
 [499]
 [500]
 [501]
 [502]
 [503]
 [504]
 [505]
 [506]
 [507]
 [508]
 [509]
 [510]
 [511]
 [512]
 [513]
 [514]
 [515]
 [516]
 [517]
 [518]
 [519]
 [520]
 [521]
 [522]
 [523]
 [524]
 [525]
 [526]
 [527]
 [528]
 [529]
 [530]
 [531]
 [532]
 [533]
 [534]
 [535]
 [536]
 [537]
 [538]
 [539]
 [540]
 [541]
 [542]
 [543]
 [544]
 [545]
 [546]
 [547]
 [548]
 [549]
 [550]
 [551]
 [552]
 [553]
 [554]
 [555]
 [556]
 [557]
 [558]
 [559]
 [560]
 [561]
 [562]
 [563]
 [564]
 [565]
 [566]
 [567]
 [568]
 [569]
 [570]
 [571]
 [572]
 [573]
 [574]
 [575]
 [576]
 [577]
 [578]
 [579]
 [580]
 [581]
 [582]
 [583]
 [584]
 [585]
 [586]
 [587]
 [588]
 [589]
 [590]
 [591]
 [592]
 [593]
 [594]
 [595]
 [596]
 [597]
 [598]
 [599]
 [600]
 [601]
 [602]
 [603]
 [604]
 [605]
 [606]
 [607]
 [608]
 [609]
 [610]
 [611]
 [612]
 [613]
 [614]
 [615]
 [616]
 [617]
 [618]
 [619]
 [620]
 [621]
 [622]
 [623]
 [624]
 [625]
 [626]
 [627]
 [628]
 [629]
 [630]
 [631]
 [632]
 [633]
 [634]
 [635]
 [636]
 [637]
 [638]
 [639]
 [640]
 [641]
 [642]
 [643]
 [644]
 [645]
 [646]
 [647]
 [648]
 [649]
 [650]
 [651]
 [652]
 [653]
 [654]
 [655]
 [656]
 [657]
 [658]
 [659]
 [660]
 [661]
 [662]
 [663]
 [664]
 [665]
 [666]
 [667]
 [668]
 [669]
 [670]
 [671]
 [672]
 [673]
 [674]
 [675]
 [676]
 [677]
 [678]
 [679]
 [680]
 [681]
 [682]
 [683]
 [684]
 [685]
 [686]
 [687]
 [688]
 [689]
 [690]
 [691]
 [692]
 [693]
 [694]
 [695]
 [696]
 [697]
 [698]
 [699]
 [700]
 [701]
 [702]
 [703]
 [704]
 [705]
 [706]
 [707]
 [708]
 [709]
 [710]
 [711]
 [712]
 [713]
 [714]
 [715]
 [716]
 [717]
 [718]
 [719]
 [720]
 [721]
 [722]
 [723]
 [724]
 [725]
 [726]
 [727]
 [728]
 [729]
 [730]
 [731]
 [732]
 [733]
 [734]
 [735]
 [736]
 [737]
 [738]
 [739]
 [740]
 [741]
 [742]
 [743]
 [744]
 [745]
 [746]
 [747]
 [748]
 [749]
 [750]
 [751]
 [752]
 [753]
 [754]
 [755]
 [756]
 [757]
 [758]
 [759]
 [760]
 [761]
 [762]
 [763]
 [764]
 [765]
 [766]
 [767]
 [768]
 [769]
 [770]
 [771]
 [772]
 [773]
 [774]
 [775]
 [776]
 [777]
 [778]
 [779]
 [780]
 [781]
 [782]
 [783]
 [784]
 [785]
 [786]
 [787]
 [788]
 [789]
 [790]
 [791]
 [792]
 [793]
 [794]
 [795]
 [796]
 [797]
 [798]
 [799]
 [800]
 [801]
 [802]
 [803]
 [804]
 [805]
 [806]
 [807]
 [808]
 [809]
 [810]
 [811]
 [812]
 [813]
 [814]
 [815]
 [816]
 [817]
 [818]
 [819]
 [820]
 [821]
 [822]
 [823]
 [824]
 [825]
 [826]
 [827]
 [828]
 [829]
 [830]
 [831]
 [832]
 [833]
 [834]
 [835]
 [836]
 [837]
 [838]
 [839]
 [840]]
col_indices
[  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35
  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53
  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71
  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89
  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107
 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125
 126 127]
self.ofmap_addr_matrix
[[   200    201    202 ...    325    326    327]
 [   328    329    330 ...    453    454    455]
 [   456    457    458 ...    581    582    583]
 ...
 [107464 107465 107466 ... 107589 107590 107591]
 [107592 107593 107594 ... 107717 107718 107719]
 [107720 107721 107722 ... 107845 107846 107847]]
these are the operand matrices
(841, 32)
(32, 128)
(841, 128)
[[  0   1   4 ...  57  60  61]
 [128 129 132 ... 185 188 189]
 [256 257 260 ... 313 316 317]
 ...
 [ -1  -1  -1 ...  -1  -1  -1]
 [ -1  -1  -1 ...  -1  -1  -1]
 [ -1  -1  -1 ...  -1  -1  -1]]
[[ 100  164  228 ... 8100 8164 8228]
 [ 101  165  229 ... 8101 8165 8229]
 [ 104  168  232 ... 8104 8168 8232]
 ...
 [ 157  221  285 ... 8157 8221 8285]
 [ 160  224  288 ... 8160 8224 8288]
 [ 161  225  289 ... 8161 8225 8289]]
[[   200    201    202 ...    325    326    327]
 [   328    329    330 ...    453    454    455]
 [   456    457    458 ...    581    582    583]
 ...
 [107464 107465 107466 ... 107589 107590 107591]
 [107592 107593 107594 ... 107717 107718 107719]
 [107720 107721 107722 ... 107845 107846 107847]]
layer_calc_params[0] * layer_calc_params[1] * num_filters =  29 29 128
self.num_compute = self.topo.get_layer_num_ofmap_px(self.layer_id) * self.topo.get_layer_window_size(self.layer_id)
Nofmap: Number of OFMAP pixels generated by filter
layer_calc_params[0] * layer_calc_params[1] * num_filters =  29 29 128
6889472 = 107648 * 64
self.layer_id  7
filter matrix in create_filter_prefetch_mat
[[ 100  164  228 ... 8100 8164 8228]
 [ 101  165  229 ... 8101 8165 8229]
 [ 104  168  232 ... 8104 8168 8232]
 ...
 [ 157  221  285 ... 8157 8221 8285]
 [ 160  224  288 ... 8160 8224 8288]
 [ 161  225  289 ... 8161 8225 8289]]
End
printing self.filter_prefetch_matrix is ws.py
[[ 100  164  228 ... 8100 8164 8228]
 [ 101  165  229 ... 8101 8165 8229]
 [ 104  168  232 ... 8104 8168 8232]
 ...
 [ 157  221  285 ... 8157 8221 8285]
 [ 160  224  288 ... 8160 8224 8288]
 [ 161  225  289 ... 8161 8225 8289]]
53824.0
printing self.filter_demand_matrix in ws.py
[[-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 ...
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]]
These are the demand matrices
ifmap_demand_mat demand matrix
[[-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 ...
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]]
filter_demand_mat demand matrix
[[-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 ...
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]]
ofmap_demand_mat demand matrix
[[-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 ...
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ...  1.07845e+05  1.07718e+05
   1.07591e+05]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00  1.07846e+05
   1.07719e+05]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
   1.07847e+05]]
Compute cycles: 1222
Stall cycles: 0
Overall utilization: 34.41%
Mapping efficiency: 25.00%
Average IFMAP SRAM BW: 44.046 words/cycle
Average Filter SRAM BW: 3.352 words/cycle
Average Filter Metadata SRAM BW: 0.209 words/cycle
Average OFMAP SRAM BW: 88.092 words/cycle
Average IFMAP DRAM BW: 50.000 words/cycle
Average Filter DRAM BW: 50.000 words/cycle
Average OFMAP DRAM BW: 49.999 words/cycle

Running Layer 8
self.filter_addr_matrix
(1152, 128)
[[   100   1252   2404 ... 144100 145252 146404]
 [   101   1253   2405 ... 144101 145253 146405]
 [   102   1254   2406 ... 144102 145254 146406]
 ...
 [  1249   2401   3553 ... 145249 146401 147553]
 [  1250   2402   3554 ... 145250 146402 147554]
 [  1251   2403   3555 ... 145251 146403 147555]]
SPARSITY INSIDE FILTER DEMAND MATRIX CREATION
No sparsity file - creating bitmap
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 ...
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
final sparse array
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 ...
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
after multiplying
(1152, 128)
[[   100   1252   2404 ... 144100 145252 146404]
 [   101   1253   2405 ... 144101 145253 146405]
 [     0      0      0 ...      0      0      0]
 ...
 [  1249   2401   3553 ... 145249 146401 147553]
 [     0      0      0 ...      0      0      0]
 [     0      0      0 ...      0      0      0]]
after reducing the filter array based on sparsity
[[   100    101    104 ...   1245   1248   1249]
 [  1252   1253   1256 ...   2397   2400   2401]
 [  2404   2405   2408 ...   3549   3552   3553]
 ...
 [144100 144101 144104 ... 145245 145248 145249]
 [145252 145253 145256 ... 146397 146400 146401]
 [146404 146405 146408 ... 147549 147552 147553]]
Final
(576, 128)
[[   100   1252   2404 ... 144100 145252 146404]
 [   101   1253   2405 ... 144101 145253 146405]
 [   104   1256   2408 ... 144104 145256 146408]
 ...
 [  1245   2397   3549 ... 145245 146397 147549]
 [  1248   2400   3552 ... 145248 146400 147552]
 [  1249   2401   3553 ... 145249 146401 147553]]
INSIDE INPUT FILTER DEMAND MATRIX CREATION FUNCTION
self.batch_size in ifmap function is  1
Rows = batch_size * ofmap_px_per_filt
self.ifmap_addr_matrix
(676, 1152)
[[     0      1      2 ...   7549   7550   7551]
 [   128    129    130 ...   7677   7678   7679]
 [   256    257    258 ...   7805   7806   7807]
 ...
 [ 92544  92545  92546 ... 100093 100094 100095]
 [ 92672  92673  92674 ... 100221 100222 100223]
 [ 92800  92801  92802 ... 100349 100350 100351]]
Input sparsity being applied
[1 1 0 ... 1 0 0]
[[     0      1      0 ...   7549      0      0]
 [   128    129      0 ...   7677      0      0]
 [   256    257      0 ...   7805      0      0]
 ...
 [ 92544  92545      0 ... 100093      0      0]
 [ 92672  92673      0 ... 100221      0      0]
 [ 92800  92801      0 ... 100349      0      0]]
[[     0      1      4 ...   7545   7548   7549]
 [   128    129    132 ...   7673   7676   7677]
 [   256    257    260 ...   7801   7804   7805]
 ...
 [ 92544  92545  92548 ... 100089 100092 100093]
 [ 92672  92673  92676 ... 100217 100220 100221]
 [ 92800  92801  92804 ... 100345 100348 100349]]
self.ifmap_addr_matrix for sparsity
[[     0      1      4 ...   7545   7548   7549]
 [   128    129    132 ...   7673   7676   7677]
 [   256    257    260 ...   7801   7804   7805]
 ...
 [ 92544  92545  92548 ... 100089 100092 100093]
 [ 92672  92673  92676 ... 100217 100220 100221]
 [ 92800  92801  92804 ... 100345 100348 100349]]
create_ofmap_matrix
row_indices
[[  0]
 [  1]
 [  2]
 [  3]
 [  4]
 [  5]
 [  6]
 [  7]
 [  8]
 [  9]
 [ 10]
 [ 11]
 [ 12]
 [ 13]
 [ 14]
 [ 15]
 [ 16]
 [ 17]
 [ 18]
 [ 19]
 [ 20]
 [ 21]
 [ 22]
 [ 23]
 [ 24]
 [ 25]
 [ 26]
 [ 27]
 [ 28]
 [ 29]
 [ 30]
 [ 31]
 [ 32]
 [ 33]
 [ 34]
 [ 35]
 [ 36]
 [ 37]
 [ 38]
 [ 39]
 [ 40]
 [ 41]
 [ 42]
 [ 43]
 [ 44]
 [ 45]
 [ 46]
 [ 47]
 [ 48]
 [ 49]
 [ 50]
 [ 51]
 [ 52]
 [ 53]
 [ 54]
 [ 55]
 [ 56]
 [ 57]
 [ 58]
 [ 59]
 [ 60]
 [ 61]
 [ 62]
 [ 63]
 [ 64]
 [ 65]
 [ 66]
 [ 67]
 [ 68]
 [ 69]
 [ 70]
 [ 71]
 [ 72]
 [ 73]
 [ 74]
 [ 75]
 [ 76]
 [ 77]
 [ 78]
 [ 79]
 [ 80]
 [ 81]
 [ 82]
 [ 83]
 [ 84]
 [ 85]
 [ 86]
 [ 87]
 [ 88]
 [ 89]
 [ 90]
 [ 91]
 [ 92]
 [ 93]
 [ 94]
 [ 95]
 [ 96]
 [ 97]
 [ 98]
 [ 99]
 [100]
 [101]
 [102]
 [103]
 [104]
 [105]
 [106]
 [107]
 [108]
 [109]
 [110]
 [111]
 [112]
 [113]
 [114]
 [115]
 [116]
 [117]
 [118]
 [119]
 [120]
 [121]
 [122]
 [123]
 [124]
 [125]
 [126]
 [127]
 [128]
 [129]
 [130]
 [131]
 [132]
 [133]
 [134]
 [135]
 [136]
 [137]
 [138]
 [139]
 [140]
 [141]
 [142]
 [143]
 [144]
 [145]
 [146]
 [147]
 [148]
 [149]
 [150]
 [151]
 [152]
 [153]
 [154]
 [155]
 [156]
 [157]
 [158]
 [159]
 [160]
 [161]
 [162]
 [163]
 [164]
 [165]
 [166]
 [167]
 [168]
 [169]
 [170]
 [171]
 [172]
 [173]
 [174]
 [175]
 [176]
 [177]
 [178]
 [179]
 [180]
 [181]
 [182]
 [183]
 [184]
 [185]
 [186]
 [187]
 [188]
 [189]
 [190]
 [191]
 [192]
 [193]
 [194]
 [195]
 [196]
 [197]
 [198]
 [199]
 [200]
 [201]
 [202]
 [203]
 [204]
 [205]
 [206]
 [207]
 [208]
 [209]
 [210]
 [211]
 [212]
 [213]
 [214]
 [215]
 [216]
 [217]
 [218]
 [219]
 [220]
 [221]
 [222]
 [223]
 [224]
 [225]
 [226]
 [227]
 [228]
 [229]
 [230]
 [231]
 [232]
 [233]
 [234]
 [235]
 [236]
 [237]
 [238]
 [239]
 [240]
 [241]
 [242]
 [243]
 [244]
 [245]
 [246]
 [247]
 [248]
 [249]
 [250]
 [251]
 [252]
 [253]
 [254]
 [255]
 [256]
 [257]
 [258]
 [259]
 [260]
 [261]
 [262]
 [263]
 [264]
 [265]
 [266]
 [267]
 [268]
 [269]
 [270]
 [271]
 [272]
 [273]
 [274]
 [275]
 [276]
 [277]
 [278]
 [279]
 [280]
 [281]
 [282]
 [283]
 [284]
 [285]
 [286]
 [287]
 [288]
 [289]
 [290]
 [291]
 [292]
 [293]
 [294]
 [295]
 [296]
 [297]
 [298]
 [299]
 [300]
 [301]
 [302]
 [303]
 [304]
 [305]
 [306]
 [307]
 [308]
 [309]
 [310]
 [311]
 [312]
 [313]
 [314]
 [315]
 [316]
 [317]
 [318]
 [319]
 [320]
 [321]
 [322]
 [323]
 [324]
 [325]
 [326]
 [327]
 [328]
 [329]
 [330]
 [331]
 [332]
 [333]
 [334]
 [335]
 [336]
 [337]
 [338]
 [339]
 [340]
 [341]
 [342]
 [343]
 [344]
 [345]
 [346]
 [347]
 [348]
 [349]
 [350]
 [351]
 [352]
 [353]
 [354]
 [355]
 [356]
 [357]
 [358]
 [359]
 [360]
 [361]
 [362]
 [363]
 [364]
 [365]
 [366]
 [367]
 [368]
 [369]
 [370]
 [371]
 [372]
 [373]
 [374]
 [375]
 [376]
 [377]
 [378]
 [379]
 [380]
 [381]
 [382]
 [383]
 [384]
 [385]
 [386]
 [387]
 [388]
 [389]
 [390]
 [391]
 [392]
 [393]
 [394]
 [395]
 [396]
 [397]
 [398]
 [399]
 [400]
 [401]
 [402]
 [403]
 [404]
 [405]
 [406]
 [407]
 [408]
 [409]
 [410]
 [411]
 [412]
 [413]
 [414]
 [415]
 [416]
 [417]
 [418]
 [419]
 [420]
 [421]
 [422]
 [423]
 [424]
 [425]
 [426]
 [427]
 [428]
 [429]
 [430]
 [431]
 [432]
 [433]
 [434]
 [435]
 [436]
 [437]
 [438]
 [439]
 [440]
 [441]
 [442]
 [443]
 [444]
 [445]
 [446]
 [447]
 [448]
 [449]
 [450]
 [451]
 [452]
 [453]
 [454]
 [455]
 [456]
 [457]
 [458]
 [459]
 [460]
 [461]
 [462]
 [463]
 [464]
 [465]
 [466]
 [467]
 [468]
 [469]
 [470]
 [471]
 [472]
 [473]
 [474]
 [475]
 [476]
 [477]
 [478]
 [479]
 [480]
 [481]
 [482]
 [483]
 [484]
 [485]
 [486]
 [487]
 [488]
 [489]
 [490]
 [491]
 [492]
 [493]
 [494]
 [495]
 [496]
 [497]
 [498]
 [499]
 [500]
 [501]
 [502]
 [503]
 [504]
 [505]
 [506]
 [507]
 [508]
 [509]
 [510]
 [511]
 [512]
 [513]
 [514]
 [515]
 [516]
 [517]
 [518]
 [519]
 [520]
 [521]
 [522]
 [523]
 [524]
 [525]
 [526]
 [527]
 [528]
 [529]
 [530]
 [531]
 [532]
 [533]
 [534]
 [535]
 [536]
 [537]
 [538]
 [539]
 [540]
 [541]
 [542]
 [543]
 [544]
 [545]
 [546]
 [547]
 [548]
 [549]
 [550]
 [551]
 [552]
 [553]
 [554]
 [555]
 [556]
 [557]
 [558]
 [559]
 [560]
 [561]
 [562]
 [563]
 [564]
 [565]
 [566]
 [567]
 [568]
 [569]
 [570]
 [571]
 [572]
 [573]
 [574]
 [575]
 [576]
 [577]
 [578]
 [579]
 [580]
 [581]
 [582]
 [583]
 [584]
 [585]
 [586]
 [587]
 [588]
 [589]
 [590]
 [591]
 [592]
 [593]
 [594]
 [595]
 [596]
 [597]
 [598]
 [599]
 [600]
 [601]
 [602]
 [603]
 [604]
 [605]
 [606]
 [607]
 [608]
 [609]
 [610]
 [611]
 [612]
 [613]
 [614]
 [615]
 [616]
 [617]
 [618]
 [619]
 [620]
 [621]
 [622]
 [623]
 [624]
 [625]
 [626]
 [627]
 [628]
 [629]
 [630]
 [631]
 [632]
 [633]
 [634]
 [635]
 [636]
 [637]
 [638]
 [639]
 [640]
 [641]
 [642]
 [643]
 [644]
 [645]
 [646]
 [647]
 [648]
 [649]
 [650]
 [651]
 [652]
 [653]
 [654]
 [655]
 [656]
 [657]
 [658]
 [659]
 [660]
 [661]
 [662]
 [663]
 [664]
 [665]
 [666]
 [667]
 [668]
 [669]
 [670]
 [671]
 [672]
 [673]
 [674]
 [675]]
col_indices
[  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35
  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53
  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71
  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89
  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107
 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125
 126 127]
self.ofmap_addr_matrix
[[  200   201   202 ...   325   326   327]
 [  328   329   330 ...   453   454   455]
 [  456   457   458 ...   581   582   583]
 ...
 [86344 86345 86346 ... 86469 86470 86471]
 [86472 86473 86474 ... 86597 86598 86599]
 [86600 86601 86602 ... 86725 86726 86727]]
these are the operand matrices
(676, 576)
(576, 128)
(676, 128)
[[     0      1      4 ...   7545   7548   7549]
 [   128    129    132 ...   7673   7676   7677]
 [   256    257    260 ...   7801   7804   7805]
 ...
 [ 92544  92545  92548 ... 100089 100092 100093]
 [ 92672  92673  92676 ... 100217 100220 100221]
 [ 92800  92801  92804 ... 100345 100348 100349]]
[[   100   1252   2404 ... 144100 145252 146404]
 [   101   1253   2405 ... 144101 145253 146405]
 [   104   1256   2408 ... 144104 145256 146408]
 ...
 [  1245   2397   3549 ... 145245 146397 147549]
 [  1248   2400   3552 ... 145248 146400 147552]
 [  1249   2401   3553 ... 145249 146401 147553]]
[[  200   201   202 ...   325   326   327]
 [  328   329   330 ...   453   454   455]
 [  456   457   458 ...   581   582   583]
 ...
 [86344 86345 86346 ... 86469 86470 86471]
 [86472 86473 86474 ... 86597 86598 86599]
 [86600 86601 86602 ... 86725 86726 86727]]
layer_calc_params[0] * layer_calc_params[1] * num_filters =  26 26 128
self.num_compute = self.topo.get_layer_num_ofmap_px(self.layer_id) * self.topo.get_layer_window_size(self.layer_id)
Nofmap: Number of OFMAP pixels generated by filter
layer_calc_params[0] * layer_calc_params[1] * num_filters =  26 26 128
99680256 = 86528 * 1152
self.layer_id  8
filter matrix in create_filter_prefetch_mat
[[   100   1252   2404 ... 144100 145252 146404]
 [   101   1253   2405 ... 144101 145253 146405]
 [   104   1256   2408 ... 144104 145256 146408]
 ...
 [  1245   2397   3549 ... 145245 146397 147549]
 [  1248   2400   3552 ... 145248 146400 147552]
 [  1249   2401   3553 ... 145249 146401 147553]]
End
printing self.filter_prefetch_matrix is ws.py
[[   100   1252   2404 ... 144100 145252 146404]
 [   101   1253   2405 ... 144101 145253 146405]
 [   104   1256   2408 ... 144104 145256 146408]
 ...
 [  1245   2397   3549 ... 145245 146397 147549]
 [  1248   2400   3552 ... 145248 146400 147552]
 [  1249   2401   3553 ... 145249 146401 147553]]
173056.0
346112.0
519168.0
692224.0
778752.0
printing self.filter_demand_matrix in ws.py
[[ 3.53000e+02  1.50500e+03  2.65700e+03 ...  1.44353e+05  1.45505e+05
   1.46657e+05]
 [ 3.52000e+02  1.50400e+03  2.65600e+03 ...  1.44352e+05  1.45504e+05
   1.46656e+05]
 [ 3.49000e+02  1.50100e+03  2.65300e+03 ...  1.44349e+05  1.45501e+05
   1.46653e+05]
 ...
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]]
These are the demand matrices
ifmap_demand_mat demand matrix
[[-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 ...
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]]
filter_demand_mat demand matrix
[[ 3.53000e+02  1.50500e+03  2.65700e+03 ...  1.44353e+05  1.45505e+05
   1.46657e+05]
 [ 3.52000e+02  1.50400e+03  2.65600e+03 ...  1.44352e+05  1.45504e+05
   1.46656e+05]
 [ 3.49000e+02  1.50100e+03  2.65300e+03 ...  1.44349e+05  1.45501e+05
   1.46653e+05]
 ...
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]]
ofmap_demand_mat demand matrix
[[-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 ...
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ...  8.6725e+04  8.6598e+04
   8.6471e+04]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00  8.6726e+04
   8.6599e+04]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
   8.6727e+04]]
Compute cycles: 5289
Stall cycles: 0
Overall utilization: 115.03%
Mapping efficiency: 90.00%
Average IFMAP SRAM BW: 441.720 words/cycle
Average Filter SRAM BW: 13.940 words/cycle
Average Filter Metadata SRAM BW: 0.871 words/cycle
Average OFMAP SRAM BW: 81.800 words/cycle
Average IFMAP DRAM BW: 50.000 words/cycle
Average Filter DRAM BW: 50.000 words/cycle
Average OFMAP DRAM BW: 49.999 words/cycle

Running Layer 9
self.filter_addr_matrix
(1152, 128)
[[   100   1252   2404 ... 144100 145252 146404]
 [   101   1253   2405 ... 144101 145253 146405]
 [   102   1254   2406 ... 144102 145254 146406]
 ...
 [  1249   2401   3553 ... 145249 146401 147553]
 [  1250   2402   3554 ... 145250 146402 147554]
 [  1251   2403   3555 ... 145251 146403 147555]]
SPARSITY INSIDE FILTER DEMAND MATRIX CREATION
No sparsity file - creating bitmap
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 ...
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
final sparse array
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 ...
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
after multiplying
(1152, 128)
[[   100   1252   2404 ... 144100 145252 146404]
 [   101   1253   2405 ... 144101 145253 146405]
 [     0      0      0 ...      0      0      0]
 ...
 [  1249   2401   3553 ... 145249 146401 147553]
 [     0      0      0 ...      0      0      0]
 [     0      0      0 ...      0      0      0]]
after reducing the filter array based on sparsity
[[   100    101    104 ...   1245   1248   1249]
 [  1252   1253   1256 ...   2397   2400   2401]
 [  2404   2405   2408 ...   3549   3552   3553]
 ...
 [144100 144101 144104 ... 145245 145248 145249]
 [145252 145253 145256 ... 146397 146400 146401]
 [146404 146405 146408 ... 147549 147552 147553]]
Final
(576, 128)
[[   100   1252   2404 ... 144100 145252 146404]
 [   101   1253   2405 ... 144101 145253 146405]
 [   104   1256   2408 ... 144104 145256 146408]
 ...
 [  1245   2397   3549 ... 145245 146397 147549]
 [  1248   2400   3552 ... 145248 146400 147552]
 [  1249   2401   3553 ... 145249 146401 147553]]
INSIDE INPUT FILTER DEMAND MATRIX CREATION FUNCTION
self.batch_size in ifmap function is  1
Rows = batch_size * ofmap_px_per_filt
self.ifmap_addr_matrix
(676, 1152)
[[     0      1      2 ...   7549   7550   7551]
 [   128    129    130 ...   7677   7678   7679]
 [   256    257    258 ...   7805   7806   7807]
 ...
 [ 92544  92545  92546 ... 100093 100094 100095]
 [ 92672  92673  92674 ... 100221 100222 100223]
 [ 92800  92801  92802 ... 100349 100350 100351]]
Input sparsity being applied
[1 1 0 ... 1 0 0]
[[     0      1      0 ...   7549      0      0]
 [   128    129      0 ...   7677      0      0]
 [   256    257      0 ...   7805      0      0]
 ...
 [ 92544  92545      0 ... 100093      0      0]
 [ 92672  92673      0 ... 100221      0      0]
 [ 92800  92801      0 ... 100349      0      0]]
[[     0      1      4 ...   7545   7548   7549]
 [   128    129    132 ...   7673   7676   7677]
 [   256    257    260 ...   7801   7804   7805]
 ...
 [ 92544  92545  92548 ... 100089 100092 100093]
 [ 92672  92673  92676 ... 100217 100220 100221]
 [ 92800  92801  92804 ... 100345 100348 100349]]
self.ifmap_addr_matrix for sparsity
[[     0      1      4 ...   7545   7548   7549]
 [   128    129    132 ...   7673   7676   7677]
 [   256    257    260 ...   7801   7804   7805]
 ...
 [ 92544  92545  92548 ... 100089 100092 100093]
 [ 92672  92673  92676 ... 100217 100220 100221]
 [ 92800  92801  92804 ... 100345 100348 100349]]
create_ofmap_matrix
row_indices
[[  0]
 [  1]
 [  2]
 [  3]
 [  4]
 [  5]
 [  6]
 [  7]
 [  8]
 [  9]
 [ 10]
 [ 11]
 [ 12]
 [ 13]
 [ 14]
 [ 15]
 [ 16]
 [ 17]
 [ 18]
 [ 19]
 [ 20]
 [ 21]
 [ 22]
 [ 23]
 [ 24]
 [ 25]
 [ 26]
 [ 27]
 [ 28]
 [ 29]
 [ 30]
 [ 31]
 [ 32]
 [ 33]
 [ 34]
 [ 35]
 [ 36]
 [ 37]
 [ 38]
 [ 39]
 [ 40]
 [ 41]
 [ 42]
 [ 43]
 [ 44]
 [ 45]
 [ 46]
 [ 47]
 [ 48]
 [ 49]
 [ 50]
 [ 51]
 [ 52]
 [ 53]
 [ 54]
 [ 55]
 [ 56]
 [ 57]
 [ 58]
 [ 59]
 [ 60]
 [ 61]
 [ 62]
 [ 63]
 [ 64]
 [ 65]
 [ 66]
 [ 67]
 [ 68]
 [ 69]
 [ 70]
 [ 71]
 [ 72]
 [ 73]
 [ 74]
 [ 75]
 [ 76]
 [ 77]
 [ 78]
 [ 79]
 [ 80]
 [ 81]
 [ 82]
 [ 83]
 [ 84]
 [ 85]
 [ 86]
 [ 87]
 [ 88]
 [ 89]
 [ 90]
 [ 91]
 [ 92]
 [ 93]
 [ 94]
 [ 95]
 [ 96]
 [ 97]
 [ 98]
 [ 99]
 [100]
 [101]
 [102]
 [103]
 [104]
 [105]
 [106]
 [107]
 [108]
 [109]
 [110]
 [111]
 [112]
 [113]
 [114]
 [115]
 [116]
 [117]
 [118]
 [119]
 [120]
 [121]
 [122]
 [123]
 [124]
 [125]
 [126]
 [127]
 [128]
 [129]
 [130]
 [131]
 [132]
 [133]
 [134]
 [135]
 [136]
 [137]
 [138]
 [139]
 [140]
 [141]
 [142]
 [143]
 [144]
 [145]
 [146]
 [147]
 [148]
 [149]
 [150]
 [151]
 [152]
 [153]
 [154]
 [155]
 [156]
 [157]
 [158]
 [159]
 [160]
 [161]
 [162]
 [163]
 [164]
 [165]
 [166]
 [167]
 [168]
 [169]
 [170]
 [171]
 [172]
 [173]
 [174]
 [175]
 [176]
 [177]
 [178]
 [179]
 [180]
 [181]
 [182]
 [183]
 [184]
 [185]
 [186]
 [187]
 [188]
 [189]
 [190]
 [191]
 [192]
 [193]
 [194]
 [195]
 [196]
 [197]
 [198]
 [199]
 [200]
 [201]
 [202]
 [203]
 [204]
 [205]
 [206]
 [207]
 [208]
 [209]
 [210]
 [211]
 [212]
 [213]
 [214]
 [215]
 [216]
 [217]
 [218]
 [219]
 [220]
 [221]
 [222]
 [223]
 [224]
 [225]
 [226]
 [227]
 [228]
 [229]
 [230]
 [231]
 [232]
 [233]
 [234]
 [235]
 [236]
 [237]
 [238]
 [239]
 [240]
 [241]
 [242]
 [243]
 [244]
 [245]
 [246]
 [247]
 [248]
 [249]
 [250]
 [251]
 [252]
 [253]
 [254]
 [255]
 [256]
 [257]
 [258]
 [259]
 [260]
 [261]
 [262]
 [263]
 [264]
 [265]
 [266]
 [267]
 [268]
 [269]
 [270]
 [271]
 [272]
 [273]
 [274]
 [275]
 [276]
 [277]
 [278]
 [279]
 [280]
 [281]
 [282]
 [283]
 [284]
 [285]
 [286]
 [287]
 [288]
 [289]
 [290]
 [291]
 [292]
 [293]
 [294]
 [295]
 [296]
 [297]
 [298]
 [299]
 [300]
 [301]
 [302]
 [303]
 [304]
 [305]
 [306]
 [307]
 [308]
 [309]
 [310]
 [311]
 [312]
 [313]
 [314]
 [315]
 [316]
 [317]
 [318]
 [319]
 [320]
 [321]
 [322]
 [323]
 [324]
 [325]
 [326]
 [327]
 [328]
 [329]
 [330]
 [331]
 [332]
 [333]
 [334]
 [335]
 [336]
 [337]
 [338]
 [339]
 [340]
 [341]
 [342]
 [343]
 [344]
 [345]
 [346]
 [347]
 [348]
 [349]
 [350]
 [351]
 [352]
 [353]
 [354]
 [355]
 [356]
 [357]
 [358]
 [359]
 [360]
 [361]
 [362]
 [363]
 [364]
 [365]
 [366]
 [367]
 [368]
 [369]
 [370]
 [371]
 [372]
 [373]
 [374]
 [375]
 [376]
 [377]
 [378]
 [379]
 [380]
 [381]
 [382]
 [383]
 [384]
 [385]
 [386]
 [387]
 [388]
 [389]
 [390]
 [391]
 [392]
 [393]
 [394]
 [395]
 [396]
 [397]
 [398]
 [399]
 [400]
 [401]
 [402]
 [403]
 [404]
 [405]
 [406]
 [407]
 [408]
 [409]
 [410]
 [411]
 [412]
 [413]
 [414]
 [415]
 [416]
 [417]
 [418]
 [419]
 [420]
 [421]
 [422]
 [423]
 [424]
 [425]
 [426]
 [427]
 [428]
 [429]
 [430]
 [431]
 [432]
 [433]
 [434]
 [435]
 [436]
 [437]
 [438]
 [439]
 [440]
 [441]
 [442]
 [443]
 [444]
 [445]
 [446]
 [447]
 [448]
 [449]
 [450]
 [451]
 [452]
 [453]
 [454]
 [455]
 [456]
 [457]
 [458]
 [459]
 [460]
 [461]
 [462]
 [463]
 [464]
 [465]
 [466]
 [467]
 [468]
 [469]
 [470]
 [471]
 [472]
 [473]
 [474]
 [475]
 [476]
 [477]
 [478]
 [479]
 [480]
 [481]
 [482]
 [483]
 [484]
 [485]
 [486]
 [487]
 [488]
 [489]
 [490]
 [491]
 [492]
 [493]
 [494]
 [495]
 [496]
 [497]
 [498]
 [499]
 [500]
 [501]
 [502]
 [503]
 [504]
 [505]
 [506]
 [507]
 [508]
 [509]
 [510]
 [511]
 [512]
 [513]
 [514]
 [515]
 [516]
 [517]
 [518]
 [519]
 [520]
 [521]
 [522]
 [523]
 [524]
 [525]
 [526]
 [527]
 [528]
 [529]
 [530]
 [531]
 [532]
 [533]
 [534]
 [535]
 [536]
 [537]
 [538]
 [539]
 [540]
 [541]
 [542]
 [543]
 [544]
 [545]
 [546]
 [547]
 [548]
 [549]
 [550]
 [551]
 [552]
 [553]
 [554]
 [555]
 [556]
 [557]
 [558]
 [559]
 [560]
 [561]
 [562]
 [563]
 [564]
 [565]
 [566]
 [567]
 [568]
 [569]
 [570]
 [571]
 [572]
 [573]
 [574]
 [575]
 [576]
 [577]
 [578]
 [579]
 [580]
 [581]
 [582]
 [583]
 [584]
 [585]
 [586]
 [587]
 [588]
 [589]
 [590]
 [591]
 [592]
 [593]
 [594]
 [595]
 [596]
 [597]
 [598]
 [599]
 [600]
 [601]
 [602]
 [603]
 [604]
 [605]
 [606]
 [607]
 [608]
 [609]
 [610]
 [611]
 [612]
 [613]
 [614]
 [615]
 [616]
 [617]
 [618]
 [619]
 [620]
 [621]
 [622]
 [623]
 [624]
 [625]
 [626]
 [627]
 [628]
 [629]
 [630]
 [631]
 [632]
 [633]
 [634]
 [635]
 [636]
 [637]
 [638]
 [639]
 [640]
 [641]
 [642]
 [643]
 [644]
 [645]
 [646]
 [647]
 [648]
 [649]
 [650]
 [651]
 [652]
 [653]
 [654]
 [655]
 [656]
 [657]
 [658]
 [659]
 [660]
 [661]
 [662]
 [663]
 [664]
 [665]
 [666]
 [667]
 [668]
 [669]
 [670]
 [671]
 [672]
 [673]
 [674]
 [675]]
col_indices
[  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35
  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53
  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71
  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89
  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107
 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125
 126 127]
self.ofmap_addr_matrix
[[  200   201   202 ...   325   326   327]
 [  328   329   330 ...   453   454   455]
 [  456   457   458 ...   581   582   583]
 ...
 [86344 86345 86346 ... 86469 86470 86471]
 [86472 86473 86474 ... 86597 86598 86599]
 [86600 86601 86602 ... 86725 86726 86727]]
these are the operand matrices
(676, 576)
(576, 128)
(676, 128)
[[     0      1      4 ...   7545   7548   7549]
 [   128    129    132 ...   7673   7676   7677]
 [   256    257    260 ...   7801   7804   7805]
 ...
 [ 92544  92545  92548 ... 100089 100092 100093]
 [ 92672  92673  92676 ... 100217 100220 100221]
 [ 92800  92801  92804 ... 100345 100348 100349]]
[[   100   1252   2404 ... 144100 145252 146404]
 [   101   1253   2405 ... 144101 145253 146405]
 [   104   1256   2408 ... 144104 145256 146408]
 ...
 [  1245   2397   3549 ... 145245 146397 147549]
 [  1248   2400   3552 ... 145248 146400 147552]
 [  1249   2401   3553 ... 145249 146401 147553]]
[[  200   201   202 ...   325   326   327]
 [  328   329   330 ...   453   454   455]
 [  456   457   458 ...   581   582   583]
 ...
 [86344 86345 86346 ... 86469 86470 86471]
 [86472 86473 86474 ... 86597 86598 86599]
 [86600 86601 86602 ... 86725 86726 86727]]
layer_calc_params[0] * layer_calc_params[1] * num_filters =  26 26 128
self.num_compute = self.topo.get_layer_num_ofmap_px(self.layer_id) * self.topo.get_layer_window_size(self.layer_id)
Nofmap: Number of OFMAP pixels generated by filter
layer_calc_params[0] * layer_calc_params[1] * num_filters =  26 26 128
99680256 = 86528 * 1152
self.layer_id  9
filter matrix in create_filter_prefetch_mat
[[   100   1252   2404 ... 144100 145252 146404]
 [   101   1253   2405 ... 144101 145253 146405]
 [   104   1256   2408 ... 144104 145256 146408]
 ...
 [  1245   2397   3549 ... 145245 146397 147549]
 [  1248   2400   3552 ... 145248 146400 147552]
 [  1249   2401   3553 ... 145249 146401 147553]]
End
printing self.filter_prefetch_matrix is ws.py
[[   100   1252   2404 ... 144100 145252 146404]
 [   101   1253   2405 ... 144101 145253 146405]
 [   104   1256   2408 ... 144104 145256 146408]
 ...
 [  1245   2397   3549 ... 145245 146397 147549]
 [  1248   2400   3552 ... 145248 146400 147552]
 [  1249   2401   3553 ... 145249 146401 147553]]
173056.0
346112.0
519168.0
692224.0
778752.0
printing self.filter_demand_matrix in ws.py
[[ 3.53000e+02  1.50500e+03  2.65700e+03 ...  1.44353e+05  1.45505e+05
   1.46657e+05]
 [ 3.52000e+02  1.50400e+03  2.65600e+03 ...  1.44352e+05  1.45504e+05
   1.46656e+05]
 [ 3.49000e+02  1.50100e+03  2.65300e+03 ...  1.44349e+05  1.45501e+05
   1.46653e+05]
 ...
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]]
These are the demand matrices
ifmap_demand_mat demand matrix
[[-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 ...
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]]
filter_demand_mat demand matrix
[[ 3.53000e+02  1.50500e+03  2.65700e+03 ...  1.44353e+05  1.45505e+05
   1.46657e+05]
 [ 3.52000e+02  1.50400e+03  2.65600e+03 ...  1.44352e+05  1.45504e+05
   1.46656e+05]
 [ 3.49000e+02  1.50100e+03  2.65300e+03 ...  1.44349e+05  1.45501e+05
   1.46653e+05]
 ...
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]]
ofmap_demand_mat demand matrix
[[-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 ...
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ...  8.6725e+04  8.6598e+04
   8.6471e+04]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00  8.6726e+04
   8.6599e+04]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
   8.6727e+04]]
Compute cycles: 5289
Stall cycles: 0
Overall utilization: 115.03%
Mapping efficiency: 90.00%
Average IFMAP SRAM BW: 441.720 words/cycle
Average Filter SRAM BW: 13.940 words/cycle
Average Filter Metadata SRAM BW: 0.871 words/cycle
Average OFMAP SRAM BW: 81.800 words/cycle
Average IFMAP DRAM BW: 50.000 words/cycle
Average Filter DRAM BW: 50.000 words/cycle
Average OFMAP DRAM BW: 49.999 words/cycle

Running Layer 10
self.filter_addr_matrix
(1152, 256)
[[   100   1252   2404 ... 291556 292708 293860]
 [   101   1253   2405 ... 291557 292709 293861]
 [   102   1254   2406 ... 291558 292710 293862]
 ...
 [  1249   2401   3553 ... 292705 293857 295009]
 [  1250   2402   3554 ... 292706 293858 295010]
 [  1251   2403   3555 ... 292707 293859 295011]]
SPARSITY INSIDE FILTER DEMAND MATRIX CREATION
No sparsity file - creating bitmap
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 ...
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
final sparse array
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 ...
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
after multiplying
(1152, 256)
[[   100   1252   2404 ... 291556 292708 293860]
 [   101   1253   2405 ... 291557 292709 293861]
 [     0      0      0 ...      0      0      0]
 ...
 [  1249   2401   3553 ... 292705 293857 295009]
 [     0      0      0 ...      0      0      0]
 [     0      0      0 ...      0      0      0]]
after reducing the filter array based on sparsity
[[   100    101    104 ...   1245   1248   1249]
 [  1252   1253   1256 ...   2397   2400   2401]
 [  2404   2405   2408 ...   3549   3552   3553]
 ...
 [291556 291557 291560 ... 292701 292704 292705]
 [292708 292709 292712 ... 293853 293856 293857]
 [293860 293861 293864 ... 295005 295008 295009]]
Final
(576, 256)
[[   100   1252   2404 ... 291556 292708 293860]
 [   101   1253   2405 ... 291557 292709 293861]
 [   104   1256   2408 ... 291560 292712 293864]
 ...
 [  1245   2397   3549 ... 292701 293853 295005]
 [  1248   2400   3552 ... 292704 293856 295008]
 [  1249   2401   3553 ... 292705 293857 295009]]
INSIDE INPUT FILTER DEMAND MATRIX CREATION FUNCTION
self.batch_size in ifmap function is  1
Rows = batch_size * ofmap_px_per_filt
self.ifmap_addr_matrix
(196, 1152)
[[    0     1     2 ...  7549  7550  7551]
 [  256   257   258 ...  7805  7806  7807]
 [  512   513   514 ...  8061  8062  8063]
 ...
 [96000 96001 96002 ...    -1    -1    -1]
 [96256 96257 96258 ...    -1    -1    -1]
 [96512 96513 96514 ...    -1    -1    -1]]
Input sparsity being applied
[1 1 0 ... 1 0 0]
[[    0     1     0 ...  7549     0     0]
 [  256   257     0 ...  7805     0     0]
 [  512   513     0 ...  8061     0     0]
 ...
 [96000 96001     0 ...    -1     0     0]
 [96256 96257     0 ...    -1     0     0]
 [96512 96513     0 ...    -1     0     0]]
[[    0     1     4 ...  7545  7548  7549]
 [  256   257   260 ...  7801  7804  7805]
 [  512   513   516 ...  8057  8060  8061]
 ...
 [96000 96001 96004 ...    -1    -1    -1]
 [96256 96257 96260 ...    -1    -1    -1]
 [96512 96513 96516 ...    -1    -1    -1]]
self.ifmap_addr_matrix for sparsity
[[    0     1     4 ...  7545  7548  7549]
 [  256   257   260 ...  7801  7804  7805]
 [  512   513   516 ...  8057  8060  8061]
 ...
 [96000 96001 96004 ...    -1    -1    -1]
 [96256 96257 96260 ...    -1    -1    -1]
 [96512 96513 96516 ...    -1    -1    -1]]
create_ofmap_matrix
row_indices
[[  0]
 [  1]
 [  2]
 [  3]
 [  4]
 [  5]
 [  6]
 [  7]
 [  8]
 [  9]
 [ 10]
 [ 11]
 [ 12]
 [ 13]
 [ 14]
 [ 15]
 [ 16]
 [ 17]
 [ 18]
 [ 19]
 [ 20]
 [ 21]
 [ 22]
 [ 23]
 [ 24]
 [ 25]
 [ 26]
 [ 27]
 [ 28]
 [ 29]
 [ 30]
 [ 31]
 [ 32]
 [ 33]
 [ 34]
 [ 35]
 [ 36]
 [ 37]
 [ 38]
 [ 39]
 [ 40]
 [ 41]
 [ 42]
 [ 43]
 [ 44]
 [ 45]
 [ 46]
 [ 47]
 [ 48]
 [ 49]
 [ 50]
 [ 51]
 [ 52]
 [ 53]
 [ 54]
 [ 55]
 [ 56]
 [ 57]
 [ 58]
 [ 59]
 [ 60]
 [ 61]
 [ 62]
 [ 63]
 [ 64]
 [ 65]
 [ 66]
 [ 67]
 [ 68]
 [ 69]
 [ 70]
 [ 71]
 [ 72]
 [ 73]
 [ 74]
 [ 75]
 [ 76]
 [ 77]
 [ 78]
 [ 79]
 [ 80]
 [ 81]
 [ 82]
 [ 83]
 [ 84]
 [ 85]
 [ 86]
 [ 87]
 [ 88]
 [ 89]
 [ 90]
 [ 91]
 [ 92]
 [ 93]
 [ 94]
 [ 95]
 [ 96]
 [ 97]
 [ 98]
 [ 99]
 [100]
 [101]
 [102]
 [103]
 [104]
 [105]
 [106]
 [107]
 [108]
 [109]
 [110]
 [111]
 [112]
 [113]
 [114]
 [115]
 [116]
 [117]
 [118]
 [119]
 [120]
 [121]
 [122]
 [123]
 [124]
 [125]
 [126]
 [127]
 [128]
 [129]
 [130]
 [131]
 [132]
 [133]
 [134]
 [135]
 [136]
 [137]
 [138]
 [139]
 [140]
 [141]
 [142]
 [143]
 [144]
 [145]
 [146]
 [147]
 [148]
 [149]
 [150]
 [151]
 [152]
 [153]
 [154]
 [155]
 [156]
 [157]
 [158]
 [159]
 [160]
 [161]
 [162]
 [163]
 [164]
 [165]
 [166]
 [167]
 [168]
 [169]
 [170]
 [171]
 [172]
 [173]
 [174]
 [175]
 [176]
 [177]
 [178]
 [179]
 [180]
 [181]
 [182]
 [183]
 [184]
 [185]
 [186]
 [187]
 [188]
 [189]
 [190]
 [191]
 [192]
 [193]
 [194]
 [195]]
col_indices
[  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35
  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53
  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71
  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89
  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107
 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125
 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143
 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161
 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179
 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197
 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215
 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233
 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251
 252 253 254 255]
self.ofmap_addr_matrix
[[  200   201   202 ...   453   454   455]
 [  456   457   458 ...   709   710   711]
 [  712   713   714 ...   965   966   967]
 ...
 [49608 49609 49610 ... 49861 49862 49863]
 [49864 49865 49866 ... 50117 50118 50119]
 [50120 50121 50122 ... 50373 50374 50375]]
these are the operand matrices
(196, 576)
(576, 256)
(196, 256)
[[    0     1     4 ...  7545  7548  7549]
 [  256   257   260 ...  7801  7804  7805]
 [  512   513   516 ...  8057  8060  8061]
 ...
 [96000 96001 96004 ...    -1    -1    -1]
 [96256 96257 96260 ...    -1    -1    -1]
 [96512 96513 96516 ...    -1    -1    -1]]
[[   100   1252   2404 ... 291556 292708 293860]
 [   101   1253   2405 ... 291557 292709 293861]
 [   104   1256   2408 ... 291560 292712 293864]
 ...
 [  1245   2397   3549 ... 292701 293853 295005]
 [  1248   2400   3552 ... 292704 293856 295008]
 [  1249   2401   3553 ... 292705 293857 295009]]
[[  200   201   202 ...   453   454   455]
 [  456   457   458 ...   709   710   711]
 [  712   713   714 ...   965   966   967]
 ...
 [49608 49609 49610 ... 49861 49862 49863]
 [49864 49865 49866 ... 50117 50118 50119]
 [50120 50121 50122 ... 50373 50374 50375]]
layer_calc_params[0] * layer_calc_params[1] * num_filters =  14 14 256
self.num_compute = self.topo.get_layer_num_ofmap_px(self.layer_id) * self.topo.get_layer_window_size(self.layer_id)
Nofmap: Number of OFMAP pixels generated by filter
layer_calc_params[0] * layer_calc_params[1] * num_filters =  14 14 256
57802752 = 50176 * 1152
self.layer_id  10
filter matrix in create_filter_prefetch_mat
[[   100   1252   2404 ... 291556 292708 293860]
 [   101   1253   2405 ... 291557 292709 293861]
 [   104   1256   2408 ... 291560 292712 293864]
 ...
 [  1245   2397   3549 ... 292701 293853 295005]
 [  1248   2400   3552 ... 292704 293856 295008]
 [  1249   2401   3553 ... 292705 293857 295009]]
End
printing self.filter_prefetch_matrix is ws.py
[[   100   1252   2404 ... 144100 145252 146404]
 [   101   1253   2405 ... 144101 145253 146405]
 [   104   1256   2408 ... 144104 145256 146408]
 ...
 [148701 149853 151005 ... 292701 293853 295005]
 [148704 149856 151008 ... 292704 293856 295008]
 [148705 149857 151009 ... 292705 293857 295009]]
50176.0
100352.0
150528.0
200704.0
225792.0
275968.0
326144.0
376320.0
426496.0
451584.0
printing self.filter_demand_matrix in ws.py
[[ 3.53000e+02  1.50500e+03  2.65700e+03 ...  1.44353e+05  1.45505e+05
   1.46657e+05]
 [ 3.52000e+02  1.50400e+03  2.65600e+03 ...  1.44352e+05  1.45504e+05
   1.46656e+05]
 [ 3.49000e+02  1.50100e+03  2.65300e+03 ...  1.44349e+05  1.45501e+05
   1.46653e+05]
 ...
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]]
These are the demand matrices
ifmap_demand_mat demand matrix
[[-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 ...
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]]
filter_demand_mat demand matrix
[[ 3.53000e+02  1.50500e+03  2.65700e+03 ...  1.44353e+05  1.45505e+05
   1.46657e+05]
 [ 3.52000e+02  1.50400e+03  2.65600e+03 ...  1.44352e+05  1.45504e+05
   1.46656e+05]
 [ 3.49000e+02  1.50100e+03  2.65300e+03 ...  1.44349e+05  1.45501e+05
   1.46653e+05]
 ...
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]]
ofmap_demand_mat demand matrix
[[-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 ...
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ...  5.0373e+04  5.0118e+04
   4.9863e+04]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00  5.0374e+04
   5.0119e+04]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
   5.0375e+04]]
Compute cycles: 5779
Stall cycles: 0
Overall utilization: 61.05%
Mapping efficiency: 90.00%
Average IFMAP SRAM BW: 234.427 words/cycle
Average Filter SRAM BW: 25.516 words/cycle
Average Filter Metadata SRAM BW: 1.595 words/cycle
Average OFMAP SRAM BW: 43.412 words/cycle
Average IFMAP DRAM BW: 50.000 words/cycle
Average Filter DRAM BW: 50.000 words/cycle
Average OFMAP DRAM BW: 49.996 words/cycle

Running Layer 11
self.filter_addr_matrix
(2304, 256)
[[   100   2404   4708 ... 583012 585316 587620]
 [   101   2405   4709 ... 583013 585317 587621]
 [   102   2406   4710 ... 583014 585318 587622]
 ...
 [  2401   4705   7009 ... 585313 587617 589921]
 [  2402   4706   7010 ... 585314 587618 589922]
 [  2403   4707   7011 ... 585315 587619 589923]]
SPARSITY INSIDE FILTER DEMAND MATRIX CREATION
No sparsity file - creating bitmap
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 ...
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
final sparse array
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 ...
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
after multiplying
(2304, 256)
[[   100   2404   4708 ... 583012 585316 587620]
 [   101   2405   4709 ... 583013 585317 587621]
 [     0      0      0 ...      0      0      0]
 ...
 [  2401   4705   7009 ... 585313 587617 589921]
 [     0      0      0 ...      0      0      0]
 [     0      0      0 ...      0      0      0]]
after reducing the filter array based on sparsity
[[   100    101    104 ...   2397   2400   2401]
 [  2404   2405   2408 ...   4701   4704   4705]
 [  4708   4709   4712 ...   7005   7008   7009]
 ...
 [583012 583013 583016 ... 585309 585312 585313]
 [585316 585317 585320 ... 587613 587616 587617]
 [587620 587621 587624 ... 589917 589920 589921]]
Final
(1152, 256)
[[   100   2404   4708 ... 583012 585316 587620]
 [   101   2405   4709 ... 583013 585317 587621]
 [   104   2408   4712 ... 583016 585320 587624]
 ...
 [  2397   4701   7005 ... 585309 587613 589917]
 [  2400   4704   7008 ... 585312 587616 589920]
 [  2401   4705   7009 ... 585313 587617 589921]]
INSIDE INPUT FILTER DEMAND MATRIX CREATION FUNCTION
self.batch_size in ifmap function is  1
Rows = batch_size * ofmap_px_per_filt
self.ifmap_addr_matrix
(144, 2304)
[[    0     1     2 ...  7933  7934  7935]
 [  256   257   258 ...  8189  8190  8191]
 [  512   513   514 ...  8445  8446  8447]
 ...
 [41728 41729 41730 ... 49661 49662 49663]
 [41984 41985 41986 ... 49917 49918 49919]
 [42240 42241 42242 ... 50173 50174 50175]]
Input sparsity being applied
[1 1 0 ... 1 0 0]
[[    0     1     0 ...  7933     0     0]
 [  256   257     0 ...  8189     0     0]
 [  512   513     0 ...  8445     0     0]
 ...
 [41728 41729     0 ... 49661     0     0]
 [41984 41985     0 ... 49917     0     0]
 [42240 42241     0 ... 50173     0     0]]
[[    0     1     4 ...  7929  7932  7933]
 [  256   257   260 ...  8185  8188  8189]
 [  512   513   516 ...  8441  8444  8445]
 ...
 [41728 41729 41732 ... 49657 49660 49661]
 [41984 41985 41988 ... 49913 49916 49917]
 [42240 42241 42244 ... 50169 50172 50173]]
self.ifmap_addr_matrix for sparsity
[[    0     1     4 ...  7929  7932  7933]
 [  256   257   260 ...  8185  8188  8189]
 [  512   513   516 ...  8441  8444  8445]
 ...
 [41728 41729 41732 ... 49657 49660 49661]
 [41984 41985 41988 ... 49913 49916 49917]
 [42240 42241 42244 ... 50169 50172 50173]]
create_ofmap_matrix
row_indices
[[  0]
 [  1]
 [  2]
 [  3]
 [  4]
 [  5]
 [  6]
 [  7]
 [  8]
 [  9]
 [ 10]
 [ 11]
 [ 12]
 [ 13]
 [ 14]
 [ 15]
 [ 16]
 [ 17]
 [ 18]
 [ 19]
 [ 20]
 [ 21]
 [ 22]
 [ 23]
 [ 24]
 [ 25]
 [ 26]
 [ 27]
 [ 28]
 [ 29]
 [ 30]
 [ 31]
 [ 32]
 [ 33]
 [ 34]
 [ 35]
 [ 36]
 [ 37]
 [ 38]
 [ 39]
 [ 40]
 [ 41]
 [ 42]
 [ 43]
 [ 44]
 [ 45]
 [ 46]
 [ 47]
 [ 48]
 [ 49]
 [ 50]
 [ 51]
 [ 52]
 [ 53]
 [ 54]
 [ 55]
 [ 56]
 [ 57]
 [ 58]
 [ 59]
 [ 60]
 [ 61]
 [ 62]
 [ 63]
 [ 64]
 [ 65]
 [ 66]
 [ 67]
 [ 68]
 [ 69]
 [ 70]
 [ 71]
 [ 72]
 [ 73]
 [ 74]
 [ 75]
 [ 76]
 [ 77]
 [ 78]
 [ 79]
 [ 80]
 [ 81]
 [ 82]
 [ 83]
 [ 84]
 [ 85]
 [ 86]
 [ 87]
 [ 88]
 [ 89]
 [ 90]
 [ 91]
 [ 92]
 [ 93]
 [ 94]
 [ 95]
 [ 96]
 [ 97]
 [ 98]
 [ 99]
 [100]
 [101]
 [102]
 [103]
 [104]
 [105]
 [106]
 [107]
 [108]
 [109]
 [110]
 [111]
 [112]
 [113]
 [114]
 [115]
 [116]
 [117]
 [118]
 [119]
 [120]
 [121]
 [122]
 [123]
 [124]
 [125]
 [126]
 [127]
 [128]
 [129]
 [130]
 [131]
 [132]
 [133]
 [134]
 [135]
 [136]
 [137]
 [138]
 [139]
 [140]
 [141]
 [142]
 [143]]
col_indices
[  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35
  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53
  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71
  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89
  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107
 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125
 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143
 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161
 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179
 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197
 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215
 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233
 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251
 252 253 254 255]
self.ofmap_addr_matrix
[[  200   201   202 ...   453   454   455]
 [  456   457   458 ...   709   710   711]
 [  712   713   714 ...   965   966   967]
 ...
 [36296 36297 36298 ... 36549 36550 36551]
 [36552 36553 36554 ... 36805 36806 36807]
 [36808 36809 36810 ... 37061 37062 37063]]
these are the operand matrices
(144, 1152)
(1152, 256)
(144, 256)
[[    0     1     4 ...  7929  7932  7933]
 [  256   257   260 ...  8185  8188  8189]
 [  512   513   516 ...  8441  8444  8445]
 ...
 [41728 41729 41732 ... 49657 49660 49661]
 [41984 41985 41988 ... 49913 49916 49917]
 [42240 42241 42244 ... 50169 50172 50173]]
[[   100   2404   4708 ... 583012 585316 587620]
 [   101   2405   4709 ... 583013 585317 587621]
 [   104   2408   4712 ... 583016 585320 587624]
 ...
 [  2397   4701   7005 ... 585309 587613 589917]
 [  2400   4704   7008 ... 585312 587616 589920]
 [  2401   4705   7009 ... 585313 587617 589921]]
[[  200   201   202 ...   453   454   455]
 [  456   457   458 ...   709   710   711]
 [  712   713   714 ...   965   966   967]
 ...
 [36296 36297 36298 ... 36549 36550 36551]
 [36552 36553 36554 ... 36805 36806 36807]
 [36808 36809 36810 ... 37061 37062 37063]]
layer_calc_params[0] * layer_calc_params[1] * num_filters =  12 12 256
self.num_compute = self.topo.get_layer_num_ofmap_px(self.layer_id) * self.topo.get_layer_window_size(self.layer_id)
Nofmap: Number of OFMAP pixels generated by filter
layer_calc_params[0] * layer_calc_params[1] * num_filters =  12 12 256
84934656 = 36864 * 2304
self.layer_id  11
filter matrix in create_filter_prefetch_mat
[[   100   2404   4708 ... 583012 585316 587620]
 [   101   2405   4709 ... 583013 585317 587621]
 [   104   2408   4712 ... 583016 585320 587624]
 ...
 [  2397   4701   7005 ... 585309 587613 589917]
 [  2400   4704   7008 ... 585312 587616 589920]
 [  2401   4705   7009 ... 585313 587617 589921]]
End
printing self.filter_prefetch_matrix is ws.py
[[   100   2404   4708 ... 288100 290404 292708]
 [   101   2405   4709 ... 288101 290405 292709]
 [   104   2408   4712 ... 288104 290408 292712]
 ...
 [297309 299613 301917 ... 585309 587613 589917]
 [297312 299616 301920 ... 585312 587616 589920]
 [297313 299617 301921 ... 585313 587617 589921]]
36864.0
73728.0
110592.0
147456.0
184320.0
221184.0
258048.0
294912.0
331776.0
368640.0
405504.0
442368.0
479232.0
516096.0
552960.0
589824.0
626688.0
663552.0
printing self.filter_demand_matrix in ws.py
[[ 3.53000e+02  2.65700e+03  4.96100e+03 ...  2.88353e+05  2.90657e+05
   2.92961e+05]
 [ 3.52000e+02  2.65600e+03  4.96000e+03 ...  2.88352e+05  2.90656e+05
   2.92960e+05]
 [ 3.49000e+02  2.65300e+03  4.95700e+03 ...  2.88349e+05  2.90653e+05
   2.92957e+05]
 ...
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]]
These are the demand matrices
ifmap_demand_mat demand matrix
[[-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 ...
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]]
filter_demand_mat demand matrix
[[ 3.53000e+02  2.65700e+03  4.96100e+03 ...  2.88353e+05  2.90657e+05
   2.92961e+05]
 [ 3.52000e+02  2.65600e+03  4.96000e+03 ...  2.88352e+05  2.90656e+05
   2.92960e+05]
 [ 3.49000e+02  2.65300e+03  4.95700e+03 ...  2.88349e+05  2.90653e+05
   2.92957e+05]
 ...
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]]
ofmap_demand_mat demand matrix
[[-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 ...
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ...  3.7061e+04  3.6806e+04
   3.6551e+04]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00  3.7062e+04
   3.6807e+04]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
   3.7063e+04]]
Compute cycles: 9467
Stall cycles: 0
Overall utilization: 54.76%
Mapping efficiency: 100.00%
Average IFMAP SRAM BW: 210.273 words/cycle
Average Filter SRAM BW: 31.152 words/cycle
Average Filter Metadata SRAM BW: 1.947 words/cycle
Average OFMAP SRAM BW: 35.046 words/cycle
Average IFMAP DRAM BW: 50.000 words/cycle
Average Filter DRAM BW: 50.000 words/cycle
Average OFMAP DRAM BW: 49.996 words/cycle

Running Layer 12
self.filter_addr_matrix
(128, 256)
[[  100   228   356 ... 32484 32612 32740]
 [  101   229   357 ... 32485 32613 32741]
 [  102   230   358 ... 32486 32614 32742]
 ...
 [  225   353   481 ... 32609 32737 32865]
 [  226   354   482 ... 32610 32738 32866]
 [  227   355   483 ... 32611 32739 32867]]
SPARSITY INSIDE FILTER DEMAND MATRIX CREATION
No sparsity file - creating bitmap
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 ...
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
final sparse array
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 ...
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
after multiplying
(128, 256)
[[  100   228   356 ... 32484 32612 32740]
 [  101   229   357 ... 32485 32613 32741]
 [    0     0     0 ...     0     0     0]
 ...
 [  225   353   481 ... 32609 32737 32865]
 [    0     0     0 ...     0     0     0]
 [    0     0     0 ...     0     0     0]]
after reducing the filter array based on sparsity
[[  100   101   104 ...   221   224   225]
 [  228   229   232 ...   349   352   353]
 [  356   357   360 ...   477   480   481]
 ...
 [32484 32485 32488 ... 32605 32608 32609]
 [32612 32613 32616 ... 32733 32736 32737]
 [32740 32741 32744 ... 32861 32864 32865]]
Final
(64, 256)
[[  100   228   356 ... 32484 32612 32740]
 [  101   229   357 ... 32485 32613 32741]
 [  104   232   360 ... 32488 32616 32744]
 ...
 [  221   349   477 ... 32605 32733 32861]
 [  224   352   480 ... 32608 32736 32864]
 [  225   353   481 ... 32609 32737 32865]]
INSIDE INPUT FILTER DEMAND MATRIX CREATION FUNCTION
self.batch_size in ifmap function is  1
Rows = batch_size * ofmap_px_per_filt
self.ifmap_addr_matrix
(225, 128)
[[  0   1   2 ... 125 126 127]
 [256 257 258 ... 381 382 383]
 [512 513 514 ... 637 638 639]
 ...
 [ -1  -1  -1 ...  -1  -1  -1]
 [ -1  -1  -1 ...  -1  -1  -1]
 [ -1  -1  -1 ...  -1  -1  -1]]
Input sparsity being applied
[1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1
 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1
 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0
 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0]
[[  0   1   0 ... 125   0   0]
 [256 257   0 ... 381   0   0]
 [512 513   0 ... 637   0   0]
 ...
 [ -1  -1   0 ...  -1   0   0]
 [ -1  -1   0 ...  -1   0   0]
 [ -1  -1   0 ...  -1   0   0]]
[[  0   1   4 ... 121 124 125]
 [256 257 260 ... 377 380 381]
 [512 513 516 ... 633 636 637]
 ...
 [ -1  -1  -1 ...  -1  -1  -1]
 [ -1  -1  -1 ...  -1  -1  -1]
 [ -1  -1  -1 ...  -1  -1  -1]]
self.ifmap_addr_matrix for sparsity
[[  0   1   4 ... 121 124 125]
 [256 257 260 ... 377 380 381]
 [512 513 516 ... 633 636 637]
 ...
 [ -1  -1  -1 ...  -1  -1  -1]
 [ -1  -1  -1 ...  -1  -1  -1]
 [ -1  -1  -1 ...  -1  -1  -1]]
create_ofmap_matrix
row_indices
[[  0]
 [  1]
 [  2]
 [  3]
 [  4]
 [  5]
 [  6]
 [  7]
 [  8]
 [  9]
 [ 10]
 [ 11]
 [ 12]
 [ 13]
 [ 14]
 [ 15]
 [ 16]
 [ 17]
 [ 18]
 [ 19]
 [ 20]
 [ 21]
 [ 22]
 [ 23]
 [ 24]
 [ 25]
 [ 26]
 [ 27]
 [ 28]
 [ 29]
 [ 30]
 [ 31]
 [ 32]
 [ 33]
 [ 34]
 [ 35]
 [ 36]
 [ 37]
 [ 38]
 [ 39]
 [ 40]
 [ 41]
 [ 42]
 [ 43]
 [ 44]
 [ 45]
 [ 46]
 [ 47]
 [ 48]
 [ 49]
 [ 50]
 [ 51]
 [ 52]
 [ 53]
 [ 54]
 [ 55]
 [ 56]
 [ 57]
 [ 58]
 [ 59]
 [ 60]
 [ 61]
 [ 62]
 [ 63]
 [ 64]
 [ 65]
 [ 66]
 [ 67]
 [ 68]
 [ 69]
 [ 70]
 [ 71]
 [ 72]
 [ 73]
 [ 74]
 [ 75]
 [ 76]
 [ 77]
 [ 78]
 [ 79]
 [ 80]
 [ 81]
 [ 82]
 [ 83]
 [ 84]
 [ 85]
 [ 86]
 [ 87]
 [ 88]
 [ 89]
 [ 90]
 [ 91]
 [ 92]
 [ 93]
 [ 94]
 [ 95]
 [ 96]
 [ 97]
 [ 98]
 [ 99]
 [100]
 [101]
 [102]
 [103]
 [104]
 [105]
 [106]
 [107]
 [108]
 [109]
 [110]
 [111]
 [112]
 [113]
 [114]
 [115]
 [116]
 [117]
 [118]
 [119]
 [120]
 [121]
 [122]
 [123]
 [124]
 [125]
 [126]
 [127]
 [128]
 [129]
 [130]
 [131]
 [132]
 [133]
 [134]
 [135]
 [136]
 [137]
 [138]
 [139]
 [140]
 [141]
 [142]
 [143]
 [144]
 [145]
 [146]
 [147]
 [148]
 [149]
 [150]
 [151]
 [152]
 [153]
 [154]
 [155]
 [156]
 [157]
 [158]
 [159]
 [160]
 [161]
 [162]
 [163]
 [164]
 [165]
 [166]
 [167]
 [168]
 [169]
 [170]
 [171]
 [172]
 [173]
 [174]
 [175]
 [176]
 [177]
 [178]
 [179]
 [180]
 [181]
 [182]
 [183]
 [184]
 [185]
 [186]
 [187]
 [188]
 [189]
 [190]
 [191]
 [192]
 [193]
 [194]
 [195]
 [196]
 [197]
 [198]
 [199]
 [200]
 [201]
 [202]
 [203]
 [204]
 [205]
 [206]
 [207]
 [208]
 [209]
 [210]
 [211]
 [212]
 [213]
 [214]
 [215]
 [216]
 [217]
 [218]
 [219]
 [220]
 [221]
 [222]
 [223]
 [224]]
col_indices
[  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35
  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53
  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71
  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89
  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107
 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125
 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143
 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161
 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179
 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197
 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215
 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233
 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251
 252 253 254 255]
self.ofmap_addr_matrix
[[  200   201   202 ...   453   454   455]
 [  456   457   458 ...   709   710   711]
 [  712   713   714 ...   965   966   967]
 ...
 [57032 57033 57034 ... 57285 57286 57287]
 [57288 57289 57290 ... 57541 57542 57543]
 [57544 57545 57546 ... 57797 57798 57799]]
these are the operand matrices
(225, 64)
(64, 256)
(225, 256)
[[  0   1   4 ... 121 124 125]
 [256 257 260 ... 377 380 381]
 [512 513 516 ... 633 636 637]
 ...
 [ -1  -1  -1 ...  -1  -1  -1]
 [ -1  -1  -1 ...  -1  -1  -1]
 [ -1  -1  -1 ...  -1  -1  -1]]
[[  100   228   356 ... 32484 32612 32740]
 [  101   229   357 ... 32485 32613 32741]
 [  104   232   360 ... 32488 32616 32744]
 ...
 [  221   349   477 ... 32605 32733 32861]
 [  224   352   480 ... 32608 32736 32864]
 [  225   353   481 ... 32609 32737 32865]]
[[  200   201   202 ...   453   454   455]
 [  456   457   458 ...   709   710   711]
 [  712   713   714 ...   965   966   967]
 ...
 [57032 57033 57034 ... 57285 57286 57287]
 [57288 57289 57290 ... 57541 57542 57543]
 [57544 57545 57546 ... 57797 57798 57799]]
layer_calc_params[0] * layer_calc_params[1] * num_filters =  15 15 256
self.num_compute = self.topo.get_layer_num_ofmap_px(self.layer_id) * self.topo.get_layer_window_size(self.layer_id)
Nofmap: Number of OFMAP pixels generated by filter
layer_calc_params[0] * layer_calc_params[1] * num_filters =  15 15 256
7372800 = 57600 * 128
self.layer_id  12
filter matrix in create_filter_prefetch_mat
[[  100   228   356 ... 32484 32612 32740]
 [  101   229   357 ... 32485 32613 32741]
 [  104   232   360 ... 32488 32616 32744]
 ...
 [  221   349   477 ... 32605 32733 32861]
 [  224   352   480 ... 32608 32736 32864]
 [  225   353   481 ... 32609 32737 32865]]
End
printing self.filter_prefetch_matrix is ws.py
[[  100   228   356 ... 16100 16228 16356]
 [  101   229   357 ... 16101 16229 16357]
 [  104   232   360 ... 16104 16232 16360]
 ...
 [16605 16733 16861 ... 32605 32733 32861]
 [16608 16736 16864 ... 32608 32736 32864]
 [16609 16737 16865 ... 32609 32737 32865]]
28800.0
57600.0
printing self.filter_demand_matrix in ws.py
[[-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 ...
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]]
These are the demand matrices
ifmap_demand_mat demand matrix
[[-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 ...
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]]
filter_demand_mat demand matrix
[[-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 ...
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]]
ofmap_demand_mat demand matrix
[[-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 ...
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ...  5.7797e+04  5.7542e+04
   5.7287e+04]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00  5.7798e+04
   5.7543e+04]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
   5.7799e+04]]
Compute cycles: 1213
Stall cycles: 0
Overall utilization: 37.10%
Mapping efficiency: 50.00%
Average IFMAP SRAM BW: 47.486 words/cycle
Average Filter SRAM BW: 13.507 words/cycle
Average Filter Metadata SRAM BW: 0.844 words/cycle
Average OFMAP SRAM BW: 47.486 words/cycle
Average IFMAP DRAM BW: 50.000 words/cycle
Average Filter DRAM BW: 50.000 words/cycle
Average OFMAP DRAM BW: 50.000 words/cycle

Running Layer 13
self.filter_addr_matrix
(2304, 256)
[[   100   2404   4708 ... 583012 585316 587620]
 [   101   2405   4709 ... 583013 585317 587621]
 [   102   2406   4710 ... 583014 585318 587622]
 ...
 [  2401   4705   7009 ... 585313 587617 589921]
 [  2402   4706   7010 ... 585314 587618 589922]
 [  2403   4707   7011 ... 585315 587619 589923]]
SPARSITY INSIDE FILTER DEMAND MATRIX CREATION
No sparsity file - creating bitmap
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 ...
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
final sparse array
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 ...
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
after multiplying
(2304, 256)
[[   100   2404   4708 ... 583012 585316 587620]
 [   101   2405   4709 ... 583013 585317 587621]
 [     0      0      0 ...      0      0      0]
 ...
 [  2401   4705   7009 ... 585313 587617 589921]
 [     0      0      0 ...      0      0      0]
 [     0      0      0 ...      0      0      0]]
after reducing the filter array based on sparsity
[[   100    101    104 ...   2397   2400   2401]
 [  2404   2405   2408 ...   4701   4704   4705]
 [  4708   4709   4712 ...   7005   7008   7009]
 ...
 [583012 583013 583016 ... 585309 585312 585313]
 [585316 585317 585320 ... 587613 587616 587617]
 [587620 587621 587624 ... 589917 589920 589921]]
Final
(1152, 256)
[[   100   2404   4708 ... 583012 585316 587620]
 [   101   2405   4709 ... 583013 585317 587621]
 [   104   2408   4712 ... 583016 585320 587624]
 ...
 [  2397   4701   7005 ... 585309 587613 589917]
 [  2400   4704   7008 ... 585312 587616 589920]
 [  2401   4705   7009 ... 585313 587617 589921]]
INSIDE INPUT FILTER DEMAND MATRIX CREATION FUNCTION
self.batch_size in ifmap function is  1
Rows = batch_size * ofmap_px_per_filt
self.ifmap_addr_matrix
(144, 2304)
[[    0     1     2 ...  7933  7934  7935]
 [  256   257   258 ...  8189  8190  8191]
 [  512   513   514 ...  8445  8446  8447]
 ...
 [41728 41729 41730 ... 49661 49662 49663]
 [41984 41985 41986 ... 49917 49918 49919]
 [42240 42241 42242 ... 50173 50174 50175]]
Input sparsity being applied
[1 1 0 ... 1 0 0]
[[    0     1     0 ...  7933     0     0]
 [  256   257     0 ...  8189     0     0]
 [  512   513     0 ...  8445     0     0]
 ...
 [41728 41729     0 ... 49661     0     0]
 [41984 41985     0 ... 49917     0     0]
 [42240 42241     0 ... 50173     0     0]]
[[    0     1     4 ...  7929  7932  7933]
 [  256   257   260 ...  8185  8188  8189]
 [  512   513   516 ...  8441  8444  8445]
 ...
 [41728 41729 41732 ... 49657 49660 49661]
 [41984 41985 41988 ... 49913 49916 49917]
 [42240 42241 42244 ... 50169 50172 50173]]
self.ifmap_addr_matrix for sparsity
[[    0     1     4 ...  7929  7932  7933]
 [  256   257   260 ...  8185  8188  8189]
 [  512   513   516 ...  8441  8444  8445]
 ...
 [41728 41729 41732 ... 49657 49660 49661]
 [41984 41985 41988 ... 49913 49916 49917]
 [42240 42241 42244 ... 50169 50172 50173]]
create_ofmap_matrix
row_indices
[[  0]
 [  1]
 [  2]
 [  3]
 [  4]
 [  5]
 [  6]
 [  7]
 [  8]
 [  9]
 [ 10]
 [ 11]
 [ 12]
 [ 13]
 [ 14]
 [ 15]
 [ 16]
 [ 17]
 [ 18]
 [ 19]
 [ 20]
 [ 21]
 [ 22]
 [ 23]
 [ 24]
 [ 25]
 [ 26]
 [ 27]
 [ 28]
 [ 29]
 [ 30]
 [ 31]
 [ 32]
 [ 33]
 [ 34]
 [ 35]
 [ 36]
 [ 37]
 [ 38]
 [ 39]
 [ 40]
 [ 41]
 [ 42]
 [ 43]
 [ 44]
 [ 45]
 [ 46]
 [ 47]
 [ 48]
 [ 49]
 [ 50]
 [ 51]
 [ 52]
 [ 53]
 [ 54]
 [ 55]
 [ 56]
 [ 57]
 [ 58]
 [ 59]
 [ 60]
 [ 61]
 [ 62]
 [ 63]
 [ 64]
 [ 65]
 [ 66]
 [ 67]
 [ 68]
 [ 69]
 [ 70]
 [ 71]
 [ 72]
 [ 73]
 [ 74]
 [ 75]
 [ 76]
 [ 77]
 [ 78]
 [ 79]
 [ 80]
 [ 81]
 [ 82]
 [ 83]
 [ 84]
 [ 85]
 [ 86]
 [ 87]
 [ 88]
 [ 89]
 [ 90]
 [ 91]
 [ 92]
 [ 93]
 [ 94]
 [ 95]
 [ 96]
 [ 97]
 [ 98]
 [ 99]
 [100]
 [101]
 [102]
 [103]
 [104]
 [105]
 [106]
 [107]
 [108]
 [109]
 [110]
 [111]
 [112]
 [113]
 [114]
 [115]
 [116]
 [117]
 [118]
 [119]
 [120]
 [121]
 [122]
 [123]
 [124]
 [125]
 [126]
 [127]
 [128]
 [129]
 [130]
 [131]
 [132]
 [133]
 [134]
 [135]
 [136]
 [137]
 [138]
 [139]
 [140]
 [141]
 [142]
 [143]]
col_indices
[  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35
  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53
  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71
  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89
  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107
 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125
 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143
 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161
 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179
 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197
 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215
 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233
 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251
 252 253 254 255]
self.ofmap_addr_matrix
[[  200   201   202 ...   453   454   455]
 [  456   457   458 ...   709   710   711]
 [  712   713   714 ...   965   966   967]
 ...
 [36296 36297 36298 ... 36549 36550 36551]
 [36552 36553 36554 ... 36805 36806 36807]
 [36808 36809 36810 ... 37061 37062 37063]]
these are the operand matrices
(144, 1152)
(1152, 256)
(144, 256)
[[    0     1     4 ...  7929  7932  7933]
 [  256   257   260 ...  8185  8188  8189]
 [  512   513   516 ...  8441  8444  8445]
 ...
 [41728 41729 41732 ... 49657 49660 49661]
 [41984 41985 41988 ... 49913 49916 49917]
 [42240 42241 42244 ... 50169 50172 50173]]
[[   100   2404   4708 ... 583012 585316 587620]
 [   101   2405   4709 ... 583013 585317 587621]
 [   104   2408   4712 ... 583016 585320 587624]
 ...
 [  2397   4701   7005 ... 585309 587613 589917]
 [  2400   4704   7008 ... 585312 587616 589920]
 [  2401   4705   7009 ... 585313 587617 589921]]
[[  200   201   202 ...   453   454   455]
 [  456   457   458 ...   709   710   711]
 [  712   713   714 ...   965   966   967]
 ...
 [36296 36297 36298 ... 36549 36550 36551]
 [36552 36553 36554 ... 36805 36806 36807]
 [36808 36809 36810 ... 37061 37062 37063]]
layer_calc_params[0] * layer_calc_params[1] * num_filters =  12 12 256
self.num_compute = self.topo.get_layer_num_ofmap_px(self.layer_id) * self.topo.get_layer_window_size(self.layer_id)
Nofmap: Number of OFMAP pixels generated by filter
layer_calc_params[0] * layer_calc_params[1] * num_filters =  12 12 256
84934656 = 36864 * 2304
self.layer_id  13
filter matrix in create_filter_prefetch_mat
[[   100   2404   4708 ... 583012 585316 587620]
 [   101   2405   4709 ... 583013 585317 587621]
 [   104   2408   4712 ... 583016 585320 587624]
 ...
 [  2397   4701   7005 ... 585309 587613 589917]
 [  2400   4704   7008 ... 585312 587616 589920]
 [  2401   4705   7009 ... 585313 587617 589921]]
End
printing self.filter_prefetch_matrix is ws.py
[[   100   2404   4708 ... 288100 290404 292708]
 [   101   2405   4709 ... 288101 290405 292709]
 [   104   2408   4712 ... 288104 290408 292712]
 ...
 [297309 299613 301917 ... 585309 587613 589917]
 [297312 299616 301920 ... 585312 587616 589920]
 [297313 299617 301921 ... 585313 587617 589921]]
36864.0
73728.0
110592.0
147456.0
184320.0
221184.0
258048.0
294912.0
331776.0
368640.0
405504.0
442368.0
479232.0
516096.0
552960.0
589824.0
626688.0
663552.0
printing self.filter_demand_matrix in ws.py
[[ 3.53000e+02  2.65700e+03  4.96100e+03 ...  2.88353e+05  2.90657e+05
   2.92961e+05]
 [ 3.52000e+02  2.65600e+03  4.96000e+03 ...  2.88352e+05  2.90656e+05
   2.92960e+05]
 [ 3.49000e+02  2.65300e+03  4.95700e+03 ...  2.88349e+05  2.90653e+05
   2.92957e+05]
 ...
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]]
These are the demand matrices
ifmap_demand_mat demand matrix
[[-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 ...
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]]
filter_demand_mat demand matrix
[[ 3.53000e+02  2.65700e+03  4.96100e+03 ...  2.88353e+05  2.90657e+05
   2.92961e+05]
 [ 3.52000e+02  2.65600e+03  4.96000e+03 ...  2.88352e+05  2.90656e+05
   2.92960e+05]
 [ 3.49000e+02  2.65300e+03  4.95700e+03 ...  2.88349e+05  2.90653e+05
   2.92957e+05]
 ...
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]]
ofmap_demand_mat demand matrix
[[-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 ...
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ...  3.7061e+04  3.6806e+04
   3.6551e+04]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00  3.7062e+04
   3.6807e+04]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
   3.7063e+04]]
Compute cycles: 9467
Stall cycles: 0
Overall utilization: 54.76%
Mapping efficiency: 100.00%
Average IFMAP SRAM BW: 210.273 words/cycle
Average Filter SRAM BW: 31.152 words/cycle
Average Filter Metadata SRAM BW: 1.947 words/cycle
Average OFMAP SRAM BW: 35.046 words/cycle
Average IFMAP DRAM BW: 50.000 words/cycle
Average Filter DRAM BW: 50.000 words/cycle
Average OFMAP DRAM BW: 49.996 words/cycle

Running Layer 14
self.filter_addr_matrix
(2304, 256)
[[   100   2404   4708 ... 583012 585316 587620]
 [   101   2405   4709 ... 583013 585317 587621]
 [   102   2406   4710 ... 583014 585318 587622]
 ...
 [  2401   4705   7009 ... 585313 587617 589921]
 [  2402   4706   7010 ... 585314 587618 589922]
 [  2403   4707   7011 ... 585315 587619 589923]]
SPARSITY INSIDE FILTER DEMAND MATRIX CREATION
No sparsity file - creating bitmap
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 ...
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
final sparse array
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 ...
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
after multiplying
(2304, 256)
[[   100   2404   4708 ... 583012 585316 587620]
 [   101   2405   4709 ... 583013 585317 587621]
 [     0      0      0 ...      0      0      0]
 ...
 [  2401   4705   7009 ... 585313 587617 589921]
 [     0      0      0 ...      0      0      0]
 [     0      0      0 ...      0      0      0]]
after reducing the filter array based on sparsity
[[   100    101    104 ...   2397   2400   2401]
 [  2404   2405   2408 ...   4701   4704   4705]
 [  4708   4709   4712 ...   7005   7008   7009]
 ...
 [583012 583013 583016 ... 585309 585312 585313]
 [585316 585317 585320 ... 587613 587616 587617]
 [587620 587621 587624 ... 589917 589920 589921]]
Final
(1152, 256)
[[   100   2404   4708 ... 583012 585316 587620]
 [   101   2405   4709 ... 583013 585317 587621]
 [   104   2408   4712 ... 583016 585320 587624]
 ...
 [  2397   4701   7005 ... 585309 587613 589917]
 [  2400   4704   7008 ... 585312 587616 589920]
 [  2401   4705   7009 ... 585313 587617 589921]]
INSIDE INPUT FILTER DEMAND MATRIX CREATION FUNCTION
self.batch_size in ifmap function is  1
Rows = batch_size * ofmap_px_per_filt
self.ifmap_addr_matrix
(144, 2304)
[[    0     1     2 ...  7933  7934  7935]
 [  256   257   258 ...  8189  8190  8191]
 [  512   513   514 ...  8445  8446  8447]
 ...
 [41728 41729 41730 ... 49661 49662 49663]
 [41984 41985 41986 ... 49917 49918 49919]
 [42240 42241 42242 ... 50173 50174 50175]]
Input sparsity being applied
[1 1 0 ... 1 0 0]
[[    0     1     0 ...  7933     0     0]
 [  256   257     0 ...  8189     0     0]
 [  512   513     0 ...  8445     0     0]
 ...
 [41728 41729     0 ... 49661     0     0]
 [41984 41985     0 ... 49917     0     0]
 [42240 42241     0 ... 50173     0     0]]
[[    0     1     4 ...  7929  7932  7933]
 [  256   257   260 ...  8185  8188  8189]
 [  512   513   516 ...  8441  8444  8445]
 ...
 [41728 41729 41732 ... 49657 49660 49661]
 [41984 41985 41988 ... 49913 49916 49917]
 [42240 42241 42244 ... 50169 50172 50173]]
self.ifmap_addr_matrix for sparsity
[[    0     1     4 ...  7929  7932  7933]
 [  256   257   260 ...  8185  8188  8189]
 [  512   513   516 ...  8441  8444  8445]
 ...
 [41728 41729 41732 ... 49657 49660 49661]
 [41984 41985 41988 ... 49913 49916 49917]
 [42240 42241 42244 ... 50169 50172 50173]]
create_ofmap_matrix
row_indices
[[  0]
 [  1]
 [  2]
 [  3]
 [  4]
 [  5]
 [  6]
 [  7]
 [  8]
 [  9]
 [ 10]
 [ 11]
 [ 12]
 [ 13]
 [ 14]
 [ 15]
 [ 16]
 [ 17]
 [ 18]
 [ 19]
 [ 20]
 [ 21]
 [ 22]
 [ 23]
 [ 24]
 [ 25]
 [ 26]
 [ 27]
 [ 28]
 [ 29]
 [ 30]
 [ 31]
 [ 32]
 [ 33]
 [ 34]
 [ 35]
 [ 36]
 [ 37]
 [ 38]
 [ 39]
 [ 40]
 [ 41]
 [ 42]
 [ 43]
 [ 44]
 [ 45]
 [ 46]
 [ 47]
 [ 48]
 [ 49]
 [ 50]
 [ 51]
 [ 52]
 [ 53]
 [ 54]
 [ 55]
 [ 56]
 [ 57]
 [ 58]
 [ 59]
 [ 60]
 [ 61]
 [ 62]
 [ 63]
 [ 64]
 [ 65]
 [ 66]
 [ 67]
 [ 68]
 [ 69]
 [ 70]
 [ 71]
 [ 72]
 [ 73]
 [ 74]
 [ 75]
 [ 76]
 [ 77]
 [ 78]
 [ 79]
 [ 80]
 [ 81]
 [ 82]
 [ 83]
 [ 84]
 [ 85]
 [ 86]
 [ 87]
 [ 88]
 [ 89]
 [ 90]
 [ 91]
 [ 92]
 [ 93]
 [ 94]
 [ 95]
 [ 96]
 [ 97]
 [ 98]
 [ 99]
 [100]
 [101]
 [102]
 [103]
 [104]
 [105]
 [106]
 [107]
 [108]
 [109]
 [110]
 [111]
 [112]
 [113]
 [114]
 [115]
 [116]
 [117]
 [118]
 [119]
 [120]
 [121]
 [122]
 [123]
 [124]
 [125]
 [126]
 [127]
 [128]
 [129]
 [130]
 [131]
 [132]
 [133]
 [134]
 [135]
 [136]
 [137]
 [138]
 [139]
 [140]
 [141]
 [142]
 [143]]
col_indices
[  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35
  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53
  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71
  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89
  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107
 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125
 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143
 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161
 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179
 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197
 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215
 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233
 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251
 252 253 254 255]
self.ofmap_addr_matrix
[[  200   201   202 ...   453   454   455]
 [  456   457   458 ...   709   710   711]
 [  712   713   714 ...   965   966   967]
 ...
 [36296 36297 36298 ... 36549 36550 36551]
 [36552 36553 36554 ... 36805 36806 36807]
 [36808 36809 36810 ... 37061 37062 37063]]
these are the operand matrices
(144, 1152)
(1152, 256)
(144, 256)
[[    0     1     4 ...  7929  7932  7933]
 [  256   257   260 ...  8185  8188  8189]
 [  512   513   516 ...  8441  8444  8445]
 ...
 [41728 41729 41732 ... 49657 49660 49661]
 [41984 41985 41988 ... 49913 49916 49917]
 [42240 42241 42244 ... 50169 50172 50173]]
[[   100   2404   4708 ... 583012 585316 587620]
 [   101   2405   4709 ... 583013 585317 587621]
 [   104   2408   4712 ... 583016 585320 587624]
 ...
 [  2397   4701   7005 ... 585309 587613 589917]
 [  2400   4704   7008 ... 585312 587616 589920]
 [  2401   4705   7009 ... 585313 587617 589921]]
[[  200   201   202 ...   453   454   455]
 [  456   457   458 ...   709   710   711]
 [  712   713   714 ...   965   966   967]
 ...
 [36296 36297 36298 ... 36549 36550 36551]
 [36552 36553 36554 ... 36805 36806 36807]
 [36808 36809 36810 ... 37061 37062 37063]]
layer_calc_params[0] * layer_calc_params[1] * num_filters =  12 12 256
self.num_compute = self.topo.get_layer_num_ofmap_px(self.layer_id) * self.topo.get_layer_window_size(self.layer_id)
Nofmap: Number of OFMAP pixels generated by filter
layer_calc_params[0] * layer_calc_params[1] * num_filters =  12 12 256
84934656 = 36864 * 2304
self.layer_id  14
filter matrix in create_filter_prefetch_mat
[[   100   2404   4708 ... 583012 585316 587620]
 [   101   2405   4709 ... 583013 585317 587621]
 [   104   2408   4712 ... 583016 585320 587624]
 ...
 [  2397   4701   7005 ... 585309 587613 589917]
 [  2400   4704   7008 ... 585312 587616 589920]
 [  2401   4705   7009 ... 585313 587617 589921]]
End
printing self.filter_prefetch_matrix is ws.py
[[   100   2404   4708 ... 288100 290404 292708]
 [   101   2405   4709 ... 288101 290405 292709]
 [   104   2408   4712 ... 288104 290408 292712]
 ...
 [297309 299613 301917 ... 585309 587613 589917]
 [297312 299616 301920 ... 585312 587616 589920]
 [297313 299617 301921 ... 585313 587617 589921]]
36864.0
73728.0
110592.0
147456.0
184320.0
221184.0
258048.0
294912.0
331776.0
368640.0
405504.0
442368.0
479232.0
516096.0
552960.0
589824.0
626688.0
663552.0
printing self.filter_demand_matrix in ws.py
[[ 3.53000e+02  2.65700e+03  4.96100e+03 ...  2.88353e+05  2.90657e+05
   2.92961e+05]
 [ 3.52000e+02  2.65600e+03  4.96000e+03 ...  2.88352e+05  2.90656e+05
   2.92960e+05]
 [ 3.49000e+02  2.65300e+03  4.95700e+03 ...  2.88349e+05  2.90653e+05
   2.92957e+05]
 ...
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]]
These are the demand matrices
ifmap_demand_mat demand matrix
[[-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 ...
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]]
filter_demand_mat demand matrix
[[ 3.53000e+02  2.65700e+03  4.96100e+03 ...  2.88353e+05  2.90657e+05
   2.92961e+05]
 [ 3.52000e+02  2.65600e+03  4.96000e+03 ...  2.88352e+05  2.90656e+05
   2.92960e+05]
 [ 3.49000e+02  2.65300e+03  4.95700e+03 ...  2.88349e+05  2.90653e+05
   2.92957e+05]
 ...
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]]
ofmap_demand_mat demand matrix
[[-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 ...
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ...  3.7061e+04  3.6806e+04
   3.6551e+04]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00  3.7062e+04
   3.6807e+04]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
   3.7063e+04]]
Compute cycles: 9467
Stall cycles: 0
Overall utilization: 54.76%
Mapping efficiency: 100.00%
Average IFMAP SRAM BW: 210.273 words/cycle
Average Filter SRAM BW: 31.152 words/cycle
Average Filter Metadata SRAM BW: 1.947 words/cycle
Average OFMAP SRAM BW: 35.046 words/cycle
Average IFMAP DRAM BW: 50.000 words/cycle
Average Filter DRAM BW: 50.000 words/cycle
Average OFMAP DRAM BW: 49.996 words/cycle

Running Layer 15
self.filter_addr_matrix
(2304, 512)
[[    100    2404    4708 ... 1172836 1175140 1177444]
 [    101    2405    4709 ... 1172837 1175141 1177445]
 [    102    2406    4710 ... 1172838 1175142 1177446]
 ...
 [   2401    4705    7009 ... 1175137 1177441 1179745]
 [   2402    4706    7010 ... 1175138 1177442 1179746]
 [   2403    4707    7011 ... 1175139 1177443 1179747]]
SPARSITY INSIDE FILTER DEMAND MATRIX CREATION
No sparsity file - creating bitmap
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 ...
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
final sparse array
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 ...
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
after multiplying
(2304, 512)
[[    100    2404    4708 ... 1172836 1175140 1177444]
 [    101    2405    4709 ... 1172837 1175141 1177445]
 [      0       0       0 ...       0       0       0]
 ...
 [   2401    4705    7009 ... 1175137 1177441 1179745]
 [      0       0       0 ...       0       0       0]
 [      0       0       0 ...       0       0       0]]
after reducing the filter array based on sparsity
[[    100     101     104 ...    2397    2400    2401]
 [   2404    2405    2408 ...    4701    4704    4705]
 [   4708    4709    4712 ...    7005    7008    7009]
 ...
 [1172836 1172837 1172840 ... 1175133 1175136 1175137]
 [1175140 1175141 1175144 ... 1177437 1177440 1177441]
 [1177444 1177445 1177448 ... 1179741 1179744 1179745]]
Final
(1152, 512)
[[    100    2404    4708 ... 1172836 1175140 1177444]
 [    101    2405    4709 ... 1172837 1175141 1177445]
 [    104    2408    4712 ... 1172840 1175144 1177448]
 ...
 [   2397    4701    7005 ... 1175133 1177437 1179741]
 [   2400    4704    7008 ... 1175136 1177440 1179744]
 [   2401    4705    7009 ... 1175137 1177441 1179745]]
INSIDE INPUT FILTER DEMAND MATRIX CREATION FUNCTION
self.batch_size in ifmap function is  1
Rows = batch_size * ofmap_px_per_filt
self.ifmap_addr_matrix
(49, 2304)
[[    0     1     2 ...  7933  7934  7935]
 [  512   513   514 ...  8445  8446  8447]
 [ 1024  1025  1026 ...  8957  8958  8959]
 ...
 [45056 45057 45058 ...    -1    -1    -1]
 [45568 45569 45570 ...    -1    -1    -1]
 [46080 46081 46082 ...    -1    -1    -1]]
Input sparsity being applied
[1 1 0 ... 1 0 0]
[[    0     1     0 ...  7933     0     0]
 [  512   513     0 ...  8445     0     0]
 [ 1024  1025     0 ...  8957     0     0]
 ...
 [45056 45057     0 ...    -1     0     0]
 [45568 45569     0 ...    -1     0     0]
 [46080 46081     0 ...    -1     0     0]]
[[    0     1     4 ...  7929  7932  7933]
 [  512   513   516 ...  8441  8444  8445]
 [ 1024  1025  1028 ...  8953  8956  8957]
 ...
 [45056 45057 45060 ...    -1    -1    -1]
 [45568 45569 45572 ...    -1    -1    -1]
 [46080 46081 46084 ...    -1    -1    -1]]
self.ifmap_addr_matrix for sparsity
[[    0     1     4 ...  7929  7932  7933]
 [  512   513   516 ...  8441  8444  8445]
 [ 1024  1025  1028 ...  8953  8956  8957]
 ...
 [45056 45057 45060 ...    -1    -1    -1]
 [45568 45569 45572 ...    -1    -1    -1]
 [46080 46081 46084 ...    -1    -1    -1]]
create_ofmap_matrix
row_indices
[[ 0]
 [ 1]
 [ 2]
 [ 3]
 [ 4]
 [ 5]
 [ 6]
 [ 7]
 [ 8]
 [ 9]
 [10]
 [11]
 [12]
 [13]
 [14]
 [15]
 [16]
 [17]
 [18]
 [19]
 [20]
 [21]
 [22]
 [23]
 [24]
 [25]
 [26]
 [27]
 [28]
 [29]
 [30]
 [31]
 [32]
 [33]
 [34]
 [35]
 [36]
 [37]
 [38]
 [39]
 [40]
 [41]
 [42]
 [43]
 [44]
 [45]
 [46]
 [47]
 [48]]
col_indices
[  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35
  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53
  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71
  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89
  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107
 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125
 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143
 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161
 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179
 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197
 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215
 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233
 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251
 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269
 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287
 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305
 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323
 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341
 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359
 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377
 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395
 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413
 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431
 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449
 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467
 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485
 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503
 504 505 506 507 508 509 510 511]
self.ofmap_addr_matrix
[[  200   201   202 ...   709   710   711]
 [  712   713   714 ...  1221  1222  1223]
 [ 1224  1225  1226 ...  1733  1734  1735]
 ...
 [23752 23753 23754 ... 24261 24262 24263]
 [24264 24265 24266 ... 24773 24774 24775]
 [24776 24777 24778 ... 25285 25286 25287]]
these are the operand matrices
(49, 1152)
(1152, 512)
(49, 512)
[[    0     1     4 ...  7929  7932  7933]
 [  512   513   516 ...  8441  8444  8445]
 [ 1024  1025  1028 ...  8953  8956  8957]
 ...
 [45056 45057 45060 ...    -1    -1    -1]
 [45568 45569 45572 ...    -1    -1    -1]
 [46080 46081 46084 ...    -1    -1    -1]]
[[    100    2404    4708 ... 1172836 1175140 1177444]
 [    101    2405    4709 ... 1172837 1175141 1177445]
 [    104    2408    4712 ... 1172840 1175144 1177448]
 ...
 [   2397    4701    7005 ... 1175133 1177437 1179741]
 [   2400    4704    7008 ... 1175136 1177440 1179744]
 [   2401    4705    7009 ... 1175137 1177441 1179745]]
[[  200   201   202 ...   709   710   711]
 [  712   713   714 ...  1221  1222  1223]
 [ 1224  1225  1226 ...  1733  1734  1735]
 ...
 [23752 23753 23754 ... 24261 24262 24263]
 [24264 24265 24266 ... 24773 24774 24775]
 [24776 24777 24778 ... 25285 25286 25287]]
layer_calc_params[0] * layer_calc_params[1] * num_filters =  7 7 512
self.num_compute = self.topo.get_layer_num_ofmap_px(self.layer_id) * self.topo.get_layer_window_size(self.layer_id)
Nofmap: Number of OFMAP pixels generated by filter
layer_calc_params[0] * layer_calc_params[1] * num_filters =  7 7 512
57802752 = 25088 * 2304
self.layer_id  15
filter matrix in create_filter_prefetch_mat
[[    100    2404    4708 ... 1172836 1175140 1177444]
 [    101    2405    4709 ... 1172837 1175141 1177445]
 [    104    2408    4712 ... 1172840 1175144 1177448]
 ...
 [   2397    4701    7005 ... 1175133 1177437 1179741]
 [   2400    4704    7008 ... 1175136 1177440 1179744]
 [   2401    4705    7009 ... 1175137 1177441 1179745]]
End
printing self.filter_prefetch_matrix is ws.py
[[    100    2404    4708 ...  288100  290404  292708]
 [    101    2405    4709 ...  288101  290405  292709]
 [    104    2408    4712 ...  288104  290408  292712]
 ...
 [ 887133  889437  891741 ... 1175133 1177437 1179741]
 [ 887136  889440  891744 ... 1175136 1177440 1179744]
 [ 887137  889441  891745 ... 1175137 1177441 1179745]]
12544.0
25088.0
37632.0
50176.0
62720.0
75264.0
87808.0
100352.0
112896.0
125440.0
137984.0
150528.0
163072.0
175616.0
188160.0
200704.0
213248.0
225792.0
238336.0
250880.0
263424.0
275968.0
288512.0
301056.0
313600.0
326144.0
338688.0
351232.0
363776.0
376320.0
388864.0
401408.0
413952.0
426496.0
439040.0
451584.0
printing self.filter_demand_matrix in ws.py
[[ 3.53000e+02  2.65700e+03  4.96100e+03 ...  2.88353e+05  2.90657e+05
   2.92961e+05]
 [ 3.52000e+02  2.65600e+03  4.96000e+03 ...  2.88352e+05  2.90656e+05
   2.92960e+05]
 [ 3.49000e+02  2.65300e+03  4.95700e+03 ...  2.88349e+05  2.90653e+05
   2.92957e+05]
 ...
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]]
These are the demand matrices
ifmap_demand_mat demand matrix
[[-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 ...
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]]
filter_demand_mat demand matrix
[[ 3.53000e+02  2.65700e+03  4.96100e+03 ...  2.88353e+05  2.90657e+05
   2.92961e+05]
 [ 3.52000e+02  2.65600e+03  4.96000e+03 ...  2.88352e+05  2.90656e+05
   2.92960e+05]
 [ 3.49000e+02  2.65300e+03  4.95700e+03 ...  2.88349e+05  2.90653e+05
   2.92957e+05]
 ...
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]]
ofmap_demand_mat demand matrix
[[-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 ...
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ...  2.5285e+04  2.4774e+04
   2.4263e+04]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00  2.5286e+04
   2.4775e+04]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
   2.5287e+04]]
Compute cycles: 15515
Stall cycles: 0
Overall utilization: 22.74%
Mapping efficiency: 100.00%
Average IFMAP SRAM BW: 87.319 words/cycle
Average Filter SRAM BW: 38.016 words/cycle
Average Filter Metadata SRAM BW: 2.376 words/cycle
Average OFMAP SRAM BW: 14.553 words/cycle
Average IFMAP DRAM BW: 50.000 words/cycle
Average Filter DRAM BW: 50.000 words/cycle
Average OFMAP DRAM BW: 49.998 words/cycle

Running Layer 16
self.filter_addr_matrix
(4608, 512)
[[    100    4708    9316 ... 2345572 2350180 2354788]
 [    101    4709    9317 ... 2345573 2350181 2354789]
 [    102    4710    9318 ... 2345574 2350182 2354790]
 ...
 [   4705    9313   13921 ... 2350177 2354785 2359393]
 [   4706    9314   13922 ... 2350178 2354786 2359394]
 [   4707    9315   13923 ... 2350179 2354787 2359395]]
SPARSITY INSIDE FILTER DEMAND MATRIX CREATION
No sparsity file - creating bitmap
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 ...
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
final sparse array
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 ...
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
after multiplying
(4608, 512)
[[    100    4708    9316 ... 2345572 2350180 2354788]
 [    101    4709    9317 ... 2345573 2350181 2354789]
 [      0       0       0 ...       0       0       0]
 ...
 [   4705    9313   13921 ... 2350177 2354785 2359393]
 [      0       0       0 ...       0       0       0]
 [      0       0       0 ...       0       0       0]]
after reducing the filter array based on sparsity
[[    100     101     104 ...    4701    4704    4705]
 [   4708    4709    4712 ...    9309    9312    9313]
 [   9316    9317    9320 ...   13917   13920   13921]
 ...
 [2345572 2345573 2345576 ... 2350173 2350176 2350177]
 [2350180 2350181 2350184 ... 2354781 2354784 2354785]
 [2354788 2354789 2354792 ... 2359389 2359392 2359393]]
Final
(2304, 512)
[[    100    4708    9316 ... 2345572 2350180 2354788]
 [    101    4709    9317 ... 2345573 2350181 2354789]
 [    104    4712    9320 ... 2345576 2350184 2354792]
 ...
 [   4701    9309   13917 ... 2350173 2354781 2359389]
 [   4704    9312   13920 ... 2350176 2354784 2359392]
 [   4705    9313   13921 ... 2350177 2354785 2359393]]
INSIDE INPUT FILTER DEMAND MATRIX CREATION FUNCTION
self.batch_size in ifmap function is  1
Rows = batch_size * ofmap_px_per_filt
self.ifmap_addr_matrix
(25, 4608)
[[    0     1     2 ...  8701  8702  8703]
 [  512   513   514 ...  9213  9214  9215]
 [ 1024  1025  1026 ...  9725  9726  9727]
 ...
 [15360 15361 15362 ... 24061 24062 24063]
 [15872 15873 15874 ... 24573 24574 24575]
 [16384 16385 16386 ... 25085 25086 25087]]
Input sparsity being applied
[1 1 0 ... 1 0 0]
[[    0     1     0 ...  8701     0     0]
 [  512   513     0 ...  9213     0     0]
 [ 1024  1025     0 ...  9725     0     0]
 ...
 [15360 15361     0 ... 24061     0     0]
 [15872 15873     0 ... 24573     0     0]
 [16384 16385     0 ... 25085     0     0]]
[[    0     1     4 ...  8697  8700  8701]
 [  512   513   516 ...  9209  9212  9213]
 [ 1024  1025  1028 ...  9721  9724  9725]
 ...
 [15360 15361 15364 ... 24057 24060 24061]
 [15872 15873 15876 ... 24569 24572 24573]
 [16384 16385 16388 ... 25081 25084 25085]]
self.ifmap_addr_matrix for sparsity
[[    0     1     4 ...  8697  8700  8701]
 [  512   513   516 ...  9209  9212  9213]
 [ 1024  1025  1028 ...  9721  9724  9725]
 ...
 [15360 15361 15364 ... 24057 24060 24061]
 [15872 15873 15876 ... 24569 24572 24573]
 [16384 16385 16388 ... 25081 25084 25085]]
create_ofmap_matrix
row_indices
[[ 0]
 [ 1]
 [ 2]
 [ 3]
 [ 4]
 [ 5]
 [ 6]
 [ 7]
 [ 8]
 [ 9]
 [10]
 [11]
 [12]
 [13]
 [14]
 [15]
 [16]
 [17]
 [18]
 [19]
 [20]
 [21]
 [22]
 [23]
 [24]]
col_indices
[  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35
  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53
  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71
  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89
  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107
 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125
 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143
 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161
 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179
 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197
 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215
 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233
 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251
 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269
 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287
 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305
 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323
 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341
 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359
 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377
 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395
 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413
 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431
 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449
 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467
 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485
 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503
 504 505 506 507 508 509 510 511]
self.ofmap_addr_matrix
[[  200   201   202 ...   709   710   711]
 [  712   713   714 ...  1221  1222  1223]
 [ 1224  1225  1226 ...  1733  1734  1735]
 ...
 [11464 11465 11466 ... 11973 11974 11975]
 [11976 11977 11978 ... 12485 12486 12487]
 [12488 12489 12490 ... 12997 12998 12999]]
these are the operand matrices
(25, 2304)
(2304, 512)
(25, 512)
[[    0     1     4 ...  8697  8700  8701]
 [  512   513   516 ...  9209  9212  9213]
 [ 1024  1025  1028 ...  9721  9724  9725]
 ...
 [15360 15361 15364 ... 24057 24060 24061]
 [15872 15873 15876 ... 24569 24572 24573]
 [16384 16385 16388 ... 25081 25084 25085]]
[[    100    4708    9316 ... 2345572 2350180 2354788]
 [    101    4709    9317 ... 2345573 2350181 2354789]
 [    104    4712    9320 ... 2345576 2350184 2354792]
 ...
 [   4701    9309   13917 ... 2350173 2354781 2359389]
 [   4704    9312   13920 ... 2350176 2354784 2359392]
 [   4705    9313   13921 ... 2350177 2354785 2359393]]
[[  200   201   202 ...   709   710   711]
 [  712   713   714 ...  1221  1222  1223]
 [ 1224  1225  1226 ...  1733  1734  1735]
 ...
 [11464 11465 11466 ... 11973 11974 11975]
 [11976 11977 11978 ... 12485 12486 12487]
 [12488 12489 12490 ... 12997 12998 12999]]
layer_calc_params[0] * layer_calc_params[1] * num_filters =  5 5 512
self.num_compute = self.topo.get_layer_num_ofmap_px(self.layer_id) * self.topo.get_layer_window_size(self.layer_id)
Nofmap: Number of OFMAP pixels generated by filter
layer_calc_params[0] * layer_calc_params[1] * num_filters =  5 5 512
58982400 = 12800 * 4608
self.layer_id  16
filter matrix in create_filter_prefetch_mat
[[    100    4708    9316 ... 2345572 2350180 2354788]
 [    101    4709    9317 ... 2345573 2350181 2354789]
 [    104    4712    9320 ... 2345576 2350184 2354792]
 ...
 [   4701    9309   13917 ... 2350173 2354781 2359389]
 [   4704    9312   13920 ... 2350176 2354784 2359392]
 [   4705    9313   13921 ... 2350177 2354785 2359393]]
End
printing self.filter_prefetch_matrix is ws.py
[[    100    4708    9316 ...  576100  580708  585316]
 [    101    4709    9317 ...  576101  580709  585317]
 [    104    4712    9320 ...  576104  580712  585320]
 ...
 [1774173 1778781 1783389 ... 2350173 2354781 2359389]
 [1774176 1778784 1783392 ... 2350176 2354784 2359392]
 [1774177 1778785 1783393 ... 2350177 2354785 2359393]]
6400.0
12800.0
19200.0
25600.0
32000.0
38400.0
44800.0
51200.0
57600.0
64000.0
70400.0
76800.0
83200.0
89600.0
96000.0
102400.0
108800.0
115200.0
121600.0
128000.0
134400.0
140800.0
147200.0
153600.0
160000.0
166400.0
172800.0
179200.0
185600.0
192000.0
198400.0
204800.0
211200.0
217600.0
224000.0
230400.0
236800.0
243200.0
249600.0
256000.0
262400.0
268800.0
275200.0
281600.0
288000.0
294400.0
300800.0
307200.0
313600.0
320000.0
326400.0
332800.0
339200.0
345600.0
352000.0
358400.0
364800.0
371200.0
377600.0
384000.0
390400.0
396800.0
403200.0
409600.0
416000.0
422400.0
428800.0
435200.0
441600.0
448000.0
454400.0
460800.0
printing self.filter_demand_matrix in ws.py
[[ 3.53000e+02  4.96100e+03  9.56900e+03 ...  5.76353e+05  5.80961e+05
   5.85569e+05]
 [ 3.52000e+02  4.96000e+03  9.56800e+03 ...  5.76352e+05  5.80960e+05
   5.85568e+05]
 [ 3.49000e+02  4.95700e+03  9.56500e+03 ...  5.76349e+05  5.80957e+05
   5.85565e+05]
 ...
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]]
These are the demand matrices
ifmap_demand_mat demand matrix
[[-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 ...
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]]
filter_demand_mat demand matrix
[[ 3.53000e+02  4.96100e+03  9.56900e+03 ...  5.76353e+05  5.80961e+05
   5.85569e+05]
 [ 3.52000e+02  4.96000e+03  9.56800e+03 ...  5.76352e+05  5.80960e+05
   5.85568e+05]
 [ 3.49000e+02  4.95700e+03  9.56500e+03 ...  5.76349e+05  5.80957e+05
   5.85565e+05]
 ...
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]]
ofmap_demand_mat demand matrix
[[-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 ...
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ...  1.2997e+04  1.2486e+04
   1.1975e+04]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00  1.2998e+04
   1.2487e+04]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
   1.2999e+04]]
Compute cycles: 29303
Stall cycles: 0
Overall utilization: 12.29%
Mapping efficiency: 100.00%
Average IFMAP SRAM BW: 47.176 words/cycle
Average Filter SRAM BW: 40.257 words/cycle
Average Filter Metadata SRAM BW: 2.516 words/cycle
Average OFMAP SRAM BW: 7.863 words/cycle
Average IFMAP DRAM BW: 50.000 words/cycle
Average Filter DRAM BW: 50.000 words/cycle
Average OFMAP DRAM BW: 50.000 words/cycle

Running Layer 17
self.filter_addr_matrix
(256, 512)
[[   100    356    612 ... 130404 130660 130916]
 [   101    357    613 ... 130405 130661 130917]
 [   102    358    614 ... 130406 130662 130918]
 ...
 [   353    609    865 ... 130657 130913 131169]
 [   354    610    866 ... 130658 130914 131170]
 [   355    611    867 ... 130659 130915 131171]]
SPARSITY INSIDE FILTER DEMAND MATRIX CREATION
No sparsity file - creating bitmap
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 ...
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
final sparse array
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 ...
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
after multiplying
(256, 512)
[[   100    356    612 ... 130404 130660 130916]
 [   101    357    613 ... 130405 130661 130917]
 [     0      0      0 ...      0      0      0]
 ...
 [   353    609    865 ... 130657 130913 131169]
 [     0      0      0 ...      0      0      0]
 [     0      0      0 ...      0      0      0]]
after reducing the filter array based on sparsity
[[   100    101    104 ...    349    352    353]
 [   356    357    360 ...    605    608    609]
 [   612    613    616 ...    861    864    865]
 ...
 [130404 130405 130408 ... 130653 130656 130657]
 [130660 130661 130664 ... 130909 130912 130913]
 [130916 130917 130920 ... 131165 131168 131169]]
Final
(128, 512)
[[   100    356    612 ... 130404 130660 130916]
 [   101    357    613 ... 130405 130661 130917]
 [   104    360    616 ... 130408 130664 130920]
 ...
 [   349    605    861 ... 130653 130909 131165]
 [   352    608    864 ... 130656 130912 131168]
 [   353    609    865 ... 130657 130913 131169]]
INSIDE INPUT FILTER DEMAND MATRIX CREATION FUNCTION
self.batch_size in ifmap function is  1
Rows = batch_size * ofmap_px_per_filt
self.ifmap_addr_matrix
(64, 256)
[[   0    1    2 ...  253  254  255]
 [ 512  513  514 ...  765  766  767]
 [1024 1025 1026 ... 1277 1278 1279]
 ...
 [  -1   -1   -1 ...   -1   -1   -1]
 [  -1   -1   -1 ...   -1   -1   -1]
 [  -1   -1   -1 ...   -1   -1   -1]]
Input sparsity being applied
[1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1
 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1
 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0
 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0
 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1
 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1
 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0]
[[   0    1    0 ...  253    0    0]
 [ 512  513    0 ...  765    0    0]
 [1024 1025    0 ... 1277    0    0]
 ...
 [  -1   -1    0 ...   -1    0    0]
 [  -1   -1    0 ...   -1    0    0]
 [  -1   -1    0 ...   -1    0    0]]
[[   0    1    4 ...  249  252  253]
 [ 512  513  516 ...  761  764  765]
 [1024 1025 1028 ... 1273 1276 1277]
 ...
 [  -1   -1   -1 ...   -1   -1   -1]
 [  -1   -1   -1 ...   -1   -1   -1]
 [  -1   -1   -1 ...   -1   -1   -1]]
self.ifmap_addr_matrix for sparsity
[[   0    1    4 ...  249  252  253]
 [ 512  513  516 ...  761  764  765]
 [1024 1025 1028 ... 1273 1276 1277]
 ...
 [  -1   -1   -1 ...   -1   -1   -1]
 [  -1   -1   -1 ...   -1   -1   -1]
 [  -1   -1   -1 ...   -1   -1   -1]]
create_ofmap_matrix
row_indices
[[ 0]
 [ 1]
 [ 2]
 [ 3]
 [ 4]
 [ 5]
 [ 6]
 [ 7]
 [ 8]
 [ 9]
 [10]
 [11]
 [12]
 [13]
 [14]
 [15]
 [16]
 [17]
 [18]
 [19]
 [20]
 [21]
 [22]
 [23]
 [24]
 [25]
 [26]
 [27]
 [28]
 [29]
 [30]
 [31]
 [32]
 [33]
 [34]
 [35]
 [36]
 [37]
 [38]
 [39]
 [40]
 [41]
 [42]
 [43]
 [44]
 [45]
 [46]
 [47]
 [48]
 [49]
 [50]
 [51]
 [52]
 [53]
 [54]
 [55]
 [56]
 [57]
 [58]
 [59]
 [60]
 [61]
 [62]
 [63]]
col_indices
[  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35
  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53
  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71
  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89
  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107
 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125
 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143
 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161
 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179
 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197
 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215
 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233
 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251
 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269
 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287
 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305
 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323
 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341
 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359
 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377
 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395
 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413
 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431
 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449
 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467
 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485
 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503
 504 505 506 507 508 509 510 511]
self.ofmap_addr_matrix
[[  200   201   202 ...   709   710   711]
 [  712   713   714 ...  1221  1222  1223]
 [ 1224  1225  1226 ...  1733  1734  1735]
 ...
 [31432 31433 31434 ... 31941 31942 31943]
 [31944 31945 31946 ... 32453 32454 32455]
 [32456 32457 32458 ... 32965 32966 32967]]
these are the operand matrices
(64, 128)
(128, 512)
(64, 512)
[[   0    1    4 ...  249  252  253]
 [ 512  513  516 ...  761  764  765]
 [1024 1025 1028 ... 1273 1276 1277]
 ...
 [  -1   -1   -1 ...   -1   -1   -1]
 [  -1   -1   -1 ...   -1   -1   -1]
 [  -1   -1   -1 ...   -1   -1   -1]]
[[   100    356    612 ... 130404 130660 130916]
 [   101    357    613 ... 130405 130661 130917]
 [   104    360    616 ... 130408 130664 130920]
 ...
 [   349    605    861 ... 130653 130909 131165]
 [   352    608    864 ... 130656 130912 131168]
 [   353    609    865 ... 130657 130913 131169]]
[[  200   201   202 ...   709   710   711]
 [  712   713   714 ...  1221  1222  1223]
 [ 1224  1225  1226 ...  1733  1734  1735]
 ...
 [31432 31433 31434 ... 31941 31942 31943]
 [31944 31945 31946 ... 32453 32454 32455]
 [32456 32457 32458 ... 32965 32966 32967]]
layer_calc_params[0] * layer_calc_params[1] * num_filters =  8 8 512
self.num_compute = self.topo.get_layer_num_ofmap_px(self.layer_id) * self.topo.get_layer_window_size(self.layer_id)
Nofmap: Number of OFMAP pixels generated by filter
layer_calc_params[0] * layer_calc_params[1] * num_filters =  8 8 512
8388608 = 32768 * 256
self.layer_id  17
filter matrix in create_filter_prefetch_mat
[[   100    356    612 ... 130404 130660 130916]
 [   101    357    613 ... 130405 130661 130917]
 [   104    360    616 ... 130408 130664 130920]
 ...
 [   349    605    861 ... 130653 130909 131165]
 [   352    608    864 ... 130656 130912 131168]
 [   353    609    865 ... 130657 130913 131169]]
End
printing self.filter_prefetch_matrix is ws.py
[[   100    356    612 ...  32100  32356  32612]
 [   101    357    613 ...  32101  32357  32613]
 [   104    360    616 ...  32104  32360  32616]
 ...
 [ 98653  98909  99165 ... 130653 130909 131165]
 [ 98656  98912  99168 ... 130656 130912 131168]
 [ 98657  98913  99169 ... 130657 130913 131169]]
16384.0
32768.0
49152.0
65536.0
printing self.filter_demand_matrix in ws.py
[[ 3.5300e+02  6.0900e+02  8.6500e+02 ...  3.2353e+04  3.2609e+04
   3.2865e+04]
 [ 3.5200e+02  6.0800e+02  8.6400e+02 ...  3.2352e+04  3.2608e+04
   3.2864e+04]
 [ 3.4900e+02  6.0500e+02  8.6100e+02 ...  3.2349e+04  3.2605e+04
   3.2861e+04]
 ...
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]]
These are the demand matrices
ifmap_demand_mat demand matrix
[[-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 ...
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]]
filter_demand_mat demand matrix
[[ 3.5300e+02  6.0900e+02  8.6500e+02 ...  3.2353e+04  3.2609e+04
   3.2865e+04]
 [ 3.5200e+02  6.0800e+02  8.6400e+02 ...  3.2352e+04  3.2608e+04
   3.2864e+04]
 [ 3.4900e+02  6.0500e+02  8.6100e+02 ...  3.2349e+04  3.2605e+04
   3.2861e+04]
 ...
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]]
ofmap_demand_mat demand matrix
[[-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 ...
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ...  3.2965e+04  3.2454e+04
   3.1943e+04]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00  3.2966e+04
   3.2455e+04]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
   3.2967e+04]]
Compute cycles: 1783
Stall cycles: 0
Overall utilization: 28.72%
Mapping efficiency: 100.00%
Average IFMAP SRAM BW: 36.756 words/cycle
Average Filter SRAM BW: 36.756 words/cycle
Average Filter Metadata SRAM BW: 2.297 words/cycle
Average OFMAP SRAM BW: 18.378 words/cycle
Average IFMAP DRAM BW: 50.000 words/cycle
Average Filter DRAM BW: 50.000 words/cycle
Average OFMAP DRAM BW: 49.951 words/cycle

Running Layer 18
self.filter_addr_matrix
(4608, 512)
[[    100    4708    9316 ... 2345572 2350180 2354788]
 [    101    4709    9317 ... 2345573 2350181 2354789]
 [    102    4710    9318 ... 2345574 2350182 2354790]
 ...
 [   4705    9313   13921 ... 2350177 2354785 2359393]
 [   4706    9314   13922 ... 2350178 2354786 2359394]
 [   4707    9315   13923 ... 2350179 2354787 2359395]]
SPARSITY INSIDE FILTER DEMAND MATRIX CREATION
No sparsity file - creating bitmap
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 ...
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
final sparse array
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 ...
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
after multiplying
(4608, 512)
[[    100    4708    9316 ... 2345572 2350180 2354788]
 [    101    4709    9317 ... 2345573 2350181 2354789]
 [      0       0       0 ...       0       0       0]
 ...
 [   4705    9313   13921 ... 2350177 2354785 2359393]
 [      0       0       0 ...       0       0       0]
 [      0       0       0 ...       0       0       0]]
after reducing the filter array based on sparsity
[[    100     101     104 ...    4701    4704    4705]
 [   4708    4709    4712 ...    9309    9312    9313]
 [   9316    9317    9320 ...   13917   13920   13921]
 ...
 [2345572 2345573 2345576 ... 2350173 2350176 2350177]
 [2350180 2350181 2350184 ... 2354781 2354784 2354785]
 [2354788 2354789 2354792 ... 2359389 2359392 2359393]]
Final
(2304, 512)
[[    100    4708    9316 ... 2345572 2350180 2354788]
 [    101    4709    9317 ... 2345573 2350181 2354789]
 [    104    4712    9320 ... 2345576 2350184 2354792]
 ...
 [   4701    9309   13917 ... 2350173 2354781 2359389]
 [   4704    9312   13920 ... 2350176 2354784 2359392]
 [   4705    9313   13921 ... 2350177 2354785 2359393]]
INSIDE INPUT FILTER DEMAND MATRIX CREATION FUNCTION
self.batch_size in ifmap function is  1
Rows = batch_size * ofmap_px_per_filt
self.ifmap_addr_matrix
(25, 4608)
[[    0     1     2 ...  8701  8702  8703]
 [  512   513   514 ...  9213  9214  9215]
 [ 1024  1025  1026 ...  9725  9726  9727]
 ...
 [15360 15361 15362 ... 24061 24062 24063]
 [15872 15873 15874 ... 24573 24574 24575]
 [16384 16385 16386 ... 25085 25086 25087]]
Input sparsity being applied
[1 1 0 ... 1 0 0]
[[    0     1     0 ...  8701     0     0]
 [  512   513     0 ...  9213     0     0]
 [ 1024  1025     0 ...  9725     0     0]
 ...
 [15360 15361     0 ... 24061     0     0]
 [15872 15873     0 ... 24573     0     0]
 [16384 16385     0 ... 25085     0     0]]
[[    0     1     4 ...  8697  8700  8701]
 [  512   513   516 ...  9209  9212  9213]
 [ 1024  1025  1028 ...  9721  9724  9725]
 ...
 [15360 15361 15364 ... 24057 24060 24061]
 [15872 15873 15876 ... 24569 24572 24573]
 [16384 16385 16388 ... 25081 25084 25085]]
self.ifmap_addr_matrix for sparsity
[[    0     1     4 ...  8697  8700  8701]
 [  512   513   516 ...  9209  9212  9213]
 [ 1024  1025  1028 ...  9721  9724  9725]
 ...
 [15360 15361 15364 ... 24057 24060 24061]
 [15872 15873 15876 ... 24569 24572 24573]
 [16384 16385 16388 ... 25081 25084 25085]]
create_ofmap_matrix
row_indices
[[ 0]
 [ 1]
 [ 2]
 [ 3]
 [ 4]
 [ 5]
 [ 6]
 [ 7]
 [ 8]
 [ 9]
 [10]
 [11]
 [12]
 [13]
 [14]
 [15]
 [16]
 [17]
 [18]
 [19]
 [20]
 [21]
 [22]
 [23]
 [24]]
col_indices
[  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35
  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53
  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71
  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89
  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107
 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125
 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143
 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161
 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179
 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197
 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215
 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233
 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251
 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269
 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287
 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305
 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323
 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341
 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359
 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377
 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395
 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413
 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431
 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449
 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467
 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485
 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503
 504 505 506 507 508 509 510 511]
self.ofmap_addr_matrix
[[  200   201   202 ...   709   710   711]
 [  712   713   714 ...  1221  1222  1223]
 [ 1224  1225  1226 ...  1733  1734  1735]
 ...
 [11464 11465 11466 ... 11973 11974 11975]
 [11976 11977 11978 ... 12485 12486 12487]
 [12488 12489 12490 ... 12997 12998 12999]]
these are the operand matrices
(25, 2304)
(2304, 512)
(25, 512)
[[    0     1     4 ...  8697  8700  8701]
 [  512   513   516 ...  9209  9212  9213]
 [ 1024  1025  1028 ...  9721  9724  9725]
 ...
 [15360 15361 15364 ... 24057 24060 24061]
 [15872 15873 15876 ... 24569 24572 24573]
 [16384 16385 16388 ... 25081 25084 25085]]
[[    100    4708    9316 ... 2345572 2350180 2354788]
 [    101    4709    9317 ... 2345573 2350181 2354789]
 [    104    4712    9320 ... 2345576 2350184 2354792]
 ...
 [   4701    9309   13917 ... 2350173 2354781 2359389]
 [   4704    9312   13920 ... 2350176 2354784 2359392]
 [   4705    9313   13921 ... 2350177 2354785 2359393]]
[[  200   201   202 ...   709   710   711]
 [  712   713   714 ...  1221  1222  1223]
 [ 1224  1225  1226 ...  1733  1734  1735]
 ...
 [11464 11465 11466 ... 11973 11974 11975]
 [11976 11977 11978 ... 12485 12486 12487]
 [12488 12489 12490 ... 12997 12998 12999]]
layer_calc_params[0] * layer_calc_params[1] * num_filters =  5 5 512
self.num_compute = self.topo.get_layer_num_ofmap_px(self.layer_id) * self.topo.get_layer_window_size(self.layer_id)
Nofmap: Number of OFMAP pixels generated by filter
layer_calc_params[0] * layer_calc_params[1] * num_filters =  5 5 512
58982400 = 12800 * 4608
self.layer_id  18
filter matrix in create_filter_prefetch_mat
[[    100    4708    9316 ... 2345572 2350180 2354788]
 [    101    4709    9317 ... 2345573 2350181 2354789]
 [    104    4712    9320 ... 2345576 2350184 2354792]
 ...
 [   4701    9309   13917 ... 2350173 2354781 2359389]
 [   4704    9312   13920 ... 2350176 2354784 2359392]
 [   4705    9313   13921 ... 2350177 2354785 2359393]]
End
printing self.filter_prefetch_matrix is ws.py
[[    100    4708    9316 ...  576100  580708  585316]
 [    101    4709    9317 ...  576101  580709  585317]
 [    104    4712    9320 ...  576104  580712  585320]
 ...
 [1774173 1778781 1783389 ... 2350173 2354781 2359389]
 [1774176 1778784 1783392 ... 2350176 2354784 2359392]
 [1774177 1778785 1783393 ... 2350177 2354785 2359393]]
6400.0
12800.0
19200.0
25600.0
32000.0
38400.0
44800.0
51200.0
57600.0
64000.0
70400.0
76800.0
83200.0
89600.0
96000.0
102400.0
108800.0
115200.0
121600.0
128000.0
134400.0
140800.0
147200.0
153600.0
160000.0
166400.0
172800.0
179200.0
185600.0
192000.0
198400.0
204800.0
211200.0
217600.0
224000.0
230400.0
236800.0
243200.0
249600.0
256000.0
262400.0
268800.0
275200.0
281600.0
288000.0
294400.0
300800.0
307200.0
313600.0
320000.0
326400.0
332800.0
339200.0
345600.0
352000.0
358400.0
364800.0
371200.0
377600.0
384000.0
390400.0
396800.0
403200.0
409600.0
416000.0
422400.0
428800.0
435200.0
441600.0
448000.0
454400.0
460800.0
printing self.filter_demand_matrix in ws.py
[[ 3.53000e+02  4.96100e+03  9.56900e+03 ...  5.76353e+05  5.80961e+05
   5.85569e+05]
 [ 3.52000e+02  4.96000e+03  9.56800e+03 ...  5.76352e+05  5.80960e+05
   5.85568e+05]
 [ 3.49000e+02  4.95700e+03  9.56500e+03 ...  5.76349e+05  5.80957e+05
   5.85565e+05]
 ...
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]]
These are the demand matrices
ifmap_demand_mat demand matrix
[[-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 ...
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]]
filter_demand_mat demand matrix
[[ 3.53000e+02  4.96100e+03  9.56900e+03 ...  5.76353e+05  5.80961e+05
   5.85569e+05]
 [ 3.52000e+02  4.96000e+03  9.56800e+03 ...  5.76352e+05  5.80960e+05
   5.85568e+05]
 [ 3.49000e+02  4.95700e+03  9.56500e+03 ...  5.76349e+05  5.80957e+05
   5.85565e+05]
 ...
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]]
ofmap_demand_mat demand matrix
[[-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 ...
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ...  1.2997e+04  1.2486e+04
   1.1975e+04]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00  1.2998e+04
   1.2487e+04]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
   1.2999e+04]]
Compute cycles: 29303
Stall cycles: 0
Overall utilization: 12.29%
Mapping efficiency: 100.00%
Average IFMAP SRAM BW: 47.176 words/cycle
Average Filter SRAM BW: 40.257 words/cycle
Average Filter Metadata SRAM BW: 2.516 words/cycle
Average OFMAP SRAM BW: 7.863 words/cycle
Average IFMAP DRAM BW: 50.000 words/cycle
Average Filter DRAM BW: 50.000 words/cycle
Average OFMAP DRAM BW: 50.000 words/cycle

Running Layer 19
self.filter_addr_matrix
(4608, 512)
[[    100    4708    9316 ... 2345572 2350180 2354788]
 [    101    4709    9317 ... 2345573 2350181 2354789]
 [    102    4710    9318 ... 2345574 2350182 2354790]
 ...
 [   4705    9313   13921 ... 2350177 2354785 2359393]
 [   4706    9314   13922 ... 2350178 2354786 2359394]
 [   4707    9315   13923 ... 2350179 2354787 2359395]]
SPARSITY INSIDE FILTER DEMAND MATRIX CREATION
No sparsity file - creating bitmap
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 ...
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
final sparse array
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 ...
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
after multiplying
(4608, 512)
[[    100    4708    9316 ... 2345572 2350180 2354788]
 [    101    4709    9317 ... 2345573 2350181 2354789]
 [      0       0       0 ...       0       0       0]
 ...
 [   4705    9313   13921 ... 2350177 2354785 2359393]
 [      0       0       0 ...       0       0       0]
 [      0       0       0 ...       0       0       0]]
after reducing the filter array based on sparsity
[[    100     101     104 ...    4701    4704    4705]
 [   4708    4709    4712 ...    9309    9312    9313]
 [   9316    9317    9320 ...   13917   13920   13921]
 ...
 [2345572 2345573 2345576 ... 2350173 2350176 2350177]
 [2350180 2350181 2350184 ... 2354781 2354784 2354785]
 [2354788 2354789 2354792 ... 2359389 2359392 2359393]]
Final
(2304, 512)
[[    100    4708    9316 ... 2345572 2350180 2354788]
 [    101    4709    9317 ... 2345573 2350181 2354789]
 [    104    4712    9320 ... 2345576 2350184 2354792]
 ...
 [   4701    9309   13917 ... 2350173 2354781 2359389]
 [   4704    9312   13920 ... 2350176 2354784 2359392]
 [   4705    9313   13921 ... 2350177 2354785 2359393]]
INSIDE INPUT FILTER DEMAND MATRIX CREATION FUNCTION
self.batch_size in ifmap function is  1
Rows = batch_size * ofmap_px_per_filt
self.ifmap_addr_matrix
(25, 4608)
[[    0     1     2 ...  8701  8702  8703]
 [  512   513   514 ...  9213  9214  9215]
 [ 1024  1025  1026 ...  9725  9726  9727]
 ...
 [15360 15361 15362 ... 24061 24062 24063]
 [15872 15873 15874 ... 24573 24574 24575]
 [16384 16385 16386 ... 25085 25086 25087]]
Input sparsity being applied
[1 1 0 ... 1 0 0]
[[    0     1     0 ...  8701     0     0]
 [  512   513     0 ...  9213     0     0]
 [ 1024  1025     0 ...  9725     0     0]
 ...
 [15360 15361     0 ... 24061     0     0]
 [15872 15873     0 ... 24573     0     0]
 [16384 16385     0 ... 25085     0     0]]
[[    0     1     4 ...  8697  8700  8701]
 [  512   513   516 ...  9209  9212  9213]
 [ 1024  1025  1028 ...  9721  9724  9725]
 ...
 [15360 15361 15364 ... 24057 24060 24061]
 [15872 15873 15876 ... 24569 24572 24573]
 [16384 16385 16388 ... 25081 25084 25085]]
self.ifmap_addr_matrix for sparsity
[[    0     1     4 ...  8697  8700  8701]
 [  512   513   516 ...  9209  9212  9213]
 [ 1024  1025  1028 ...  9721  9724  9725]
 ...
 [15360 15361 15364 ... 24057 24060 24061]
 [15872 15873 15876 ... 24569 24572 24573]
 [16384 16385 16388 ... 25081 25084 25085]]
create_ofmap_matrix
row_indices
[[ 0]
 [ 1]
 [ 2]
 [ 3]
 [ 4]
 [ 5]
 [ 6]
 [ 7]
 [ 8]
 [ 9]
 [10]
 [11]
 [12]
 [13]
 [14]
 [15]
 [16]
 [17]
 [18]
 [19]
 [20]
 [21]
 [22]
 [23]
 [24]]
col_indices
[  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35
  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53
  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71
  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89
  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107
 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125
 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143
 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161
 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179
 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197
 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215
 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233
 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251
 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269
 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287
 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305
 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323
 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341
 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359
 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377
 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395
 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413
 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431
 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449
 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467
 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485
 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503
 504 505 506 507 508 509 510 511]
self.ofmap_addr_matrix
[[  200   201   202 ...   709   710   711]
 [  712   713   714 ...  1221  1222  1223]
 [ 1224  1225  1226 ...  1733  1734  1735]
 ...
 [11464 11465 11466 ... 11973 11974 11975]
 [11976 11977 11978 ... 12485 12486 12487]
 [12488 12489 12490 ... 12997 12998 12999]]
these are the operand matrices
(25, 2304)
(2304, 512)
(25, 512)
[[    0     1     4 ...  8697  8700  8701]
 [  512   513   516 ...  9209  9212  9213]
 [ 1024  1025  1028 ...  9721  9724  9725]
 ...
 [15360 15361 15364 ... 24057 24060 24061]
 [15872 15873 15876 ... 24569 24572 24573]
 [16384 16385 16388 ... 25081 25084 25085]]
[[    100    4708    9316 ... 2345572 2350180 2354788]
 [    101    4709    9317 ... 2345573 2350181 2354789]
 [    104    4712    9320 ... 2345576 2350184 2354792]
 ...
 [   4701    9309   13917 ... 2350173 2354781 2359389]
 [   4704    9312   13920 ... 2350176 2354784 2359392]
 [   4705    9313   13921 ... 2350177 2354785 2359393]]
[[  200   201   202 ...   709   710   711]
 [  712   713   714 ...  1221  1222  1223]
 [ 1224  1225  1226 ...  1733  1734  1735]
 ...
 [11464 11465 11466 ... 11973 11974 11975]
 [11976 11977 11978 ... 12485 12486 12487]
 [12488 12489 12490 ... 12997 12998 12999]]
layer_calc_params[0] * layer_calc_params[1] * num_filters =  5 5 512
self.num_compute = self.topo.get_layer_num_ofmap_px(self.layer_id) * self.topo.get_layer_window_size(self.layer_id)
Nofmap: Number of OFMAP pixels generated by filter
layer_calc_params[0] * layer_calc_params[1] * num_filters =  5 5 512
58982400 = 12800 * 4608
self.layer_id  19
filter matrix in create_filter_prefetch_mat
[[    100    4708    9316 ... 2345572 2350180 2354788]
 [    101    4709    9317 ... 2345573 2350181 2354789]
 [    104    4712    9320 ... 2345576 2350184 2354792]
 ...
 [   4701    9309   13917 ... 2350173 2354781 2359389]
 [   4704    9312   13920 ... 2350176 2354784 2359392]
 [   4705    9313   13921 ... 2350177 2354785 2359393]]
End
printing self.filter_prefetch_matrix is ws.py
[[    100    4708    9316 ...  576100  580708  585316]
 [    101    4709    9317 ...  576101  580709  585317]
 [    104    4712    9320 ...  576104  580712  585320]
 ...
 [1774173 1778781 1783389 ... 2350173 2354781 2359389]
 [1774176 1778784 1783392 ... 2350176 2354784 2359392]
 [1774177 1778785 1783393 ... 2350177 2354785 2359393]]
6400.0
12800.0
19200.0
25600.0
32000.0
38400.0
44800.0
51200.0
57600.0
64000.0
70400.0
76800.0
83200.0
89600.0
96000.0
102400.0
108800.0
115200.0
121600.0
128000.0
134400.0
140800.0
147200.0
153600.0
160000.0
166400.0
172800.0
179200.0
185600.0
192000.0
198400.0
204800.0
211200.0
217600.0
224000.0
230400.0
236800.0
243200.0
249600.0
256000.0
262400.0
268800.0
275200.0
281600.0
288000.0
294400.0
300800.0
307200.0
313600.0
320000.0
326400.0
332800.0
339200.0
345600.0
352000.0
358400.0
364800.0
371200.0
377600.0
384000.0
390400.0
396800.0
403200.0
409600.0
416000.0
422400.0
428800.0
435200.0
441600.0
448000.0
454400.0
460800.0
printing self.filter_demand_matrix in ws.py
[[ 3.53000e+02  4.96100e+03  9.56900e+03 ...  5.76353e+05  5.80961e+05
   5.85569e+05]
 [ 3.52000e+02  4.96000e+03  9.56800e+03 ...  5.76352e+05  5.80960e+05
   5.85568e+05]
 [ 3.49000e+02  4.95700e+03  9.56500e+03 ...  5.76349e+05  5.80957e+05
   5.85565e+05]
 ...
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]]
These are the demand matrices
ifmap_demand_mat demand matrix
[[-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 ...
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]]
filter_demand_mat demand matrix
[[ 3.53000e+02  4.96100e+03  9.56900e+03 ...  5.76353e+05  5.80961e+05
   5.85569e+05]
 [ 3.52000e+02  4.96000e+03  9.56800e+03 ...  5.76352e+05  5.80960e+05
   5.85568e+05]
 [ 3.49000e+02  4.95700e+03  9.56500e+03 ...  5.76349e+05  5.80957e+05
   5.85565e+05]
 ...
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [-1.00000e+00 -1.00000e+00 -1.00000e+00 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]]
ofmap_demand_mat demand matrix
[[-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 ...
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ...  1.2997e+04  1.2486e+04
   1.1975e+04]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00  1.2998e+04
   1.2487e+04]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
   1.2999e+04]]
Compute cycles: 29303
Stall cycles: 0
Overall utilization: 12.29%
Mapping efficiency: 100.00%
Average IFMAP SRAM BW: 47.176 words/cycle
Average Filter SRAM BW: 40.257 words/cycle
Average Filter Metadata SRAM BW: 2.516 words/cycle
Average OFMAP SRAM BW: 7.863 words/cycle
Average IFMAP DRAM BW: 50.000 words/cycle
Average Filter DRAM BW: 50.000 words/cycle
Average OFMAP DRAM BW: 50.000 words/cycle

Running Layer 20
self.filter_addr_matrix
(512, 1000)
[[   100    612   1124 ... 510564 511076 511588]
 [   101    613   1125 ... 510565 511077 511589]
 [   102    614   1126 ... 510566 511078 511590]
 ...
 [   609   1121   1633 ... 511073 511585 512097]
 [   610   1122   1634 ... 511074 511586 512098]
 [   611   1123   1635 ... 511075 511587 512099]]
SPARSITY INSIDE FILTER DEMAND MATRIX CREATION
No sparsity file - creating bitmap
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 ...
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
final sparse array
[[1 1 1 ... 1 1 1]
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 ...
 [1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
after multiplying
(512, 1000)
[[   100    612   1124 ... 510564 511076 511588]
 [   101    613   1125 ... 510565 511077 511589]
 [     0      0      0 ...      0      0      0]
 ...
 [   609   1121   1633 ... 511073 511585 512097]
 [     0      0      0 ...      0      0      0]
 [     0      0      0 ...      0      0      0]]
after reducing the filter array based on sparsity
[[   100    101    104 ...    605    608    609]
 [   612    613    616 ...   1117   1120   1121]
 [  1124   1125   1128 ...   1629   1632   1633]
 ...
 [510564 510565 510568 ... 511069 511072 511073]
 [511076 511077 511080 ... 511581 511584 511585]
 [511588 511589 511592 ... 512093 512096 512097]]
Final
(256, 1000)
[[   100    612   1124 ... 510564 511076 511588]
 [   101    613   1125 ... 510565 511077 511589]
 [   104    616   1128 ... 510568 511080 511592]
 ...
 [   605   1117   1629 ... 511069 511581 512093]
 [   608   1120   1632 ... 511072 511584 512096]
 [   609   1121   1633 ... 511073 511585 512097]]
INSIDE INPUT FILTER DEMAND MATRIX CREATION FUNCTION
self.batch_size in ifmap function is  1
Rows = batch_size * ofmap_px_per_filt
self.ifmap_addr_matrix
(1, 512)
[[  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
   18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35
   36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53
   54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71
   72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89
   90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107
  108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125
  126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143
  144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161
  162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179
  180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197
  198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215
  216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233
  234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251
  252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269
  270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287
  288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305
  306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323
  324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341
  342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359
  360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377
  378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395
  396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413
  414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431
  432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449
  450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467
  468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485
  486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503
  504 505 506 507 508 509 510 511]]
Input sparsity being applied
[1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1
 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1
 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0
 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0
 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1
 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1
 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0
 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0
 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1
 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1
 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0
 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0
 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1
 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0]
[[  0   1   0   0   4   5   0   0   8   9   0   0  12  13   0   0  16  17
    0   0  20  21   0   0  24  25   0   0  28  29   0   0  32  33   0   0
   36  37   0   0  40  41   0   0  44  45   0   0  48  49   0   0  52  53
    0   0  56  57   0   0  60  61   0   0  64  65   0   0  68  69   0   0
   72  73   0   0  76  77   0   0  80  81   0   0  84  85   0   0  88  89
    0   0  92  93   0   0  96  97   0   0 100 101   0   0 104 105   0   0
  108 109   0   0 112 113   0   0 116 117   0   0 120 121   0   0 124 125
    0   0 128 129   0   0 132 133   0   0 136 137   0   0 140 141   0   0
  144 145   0   0 148 149   0   0 152 153   0   0 156 157   0   0 160 161
    0   0 164 165   0   0 168 169   0   0 172 173   0   0 176 177   0   0
  180 181   0   0 184 185   0   0 188 189   0   0 192 193   0   0 196 197
    0   0 200 201   0   0 204 205   0   0 208 209   0   0 212 213   0   0
  216 217   0   0 220 221   0   0 224 225   0   0 228 229   0   0 232 233
    0   0 236 237   0   0 240 241   0   0 244 245   0   0 248 249   0   0
  252 253   0   0 256 257   0   0 260 261   0   0 264 265   0   0 268 269
    0   0 272 273   0   0 276 277   0   0 280 281   0   0 284 285   0   0
  288 289   0   0 292 293   0   0 296 297   0   0 300 301   0   0 304 305
    0   0 308 309   0   0 312 313   0   0 316 317   0   0 320 321   0   0
  324 325   0   0 328 329   0   0 332 333   0   0 336 337   0   0 340 341
    0   0 344 345   0   0 348 349   0   0 352 353   0   0 356 357   0   0
  360 361   0   0 364 365   0   0 368 369   0   0 372 373   0   0 376 377
    0   0 380 381   0   0 384 385   0   0 388 389   0   0 392 393   0   0
  396 397   0   0 400 401   0   0 404 405   0   0 408 409   0   0 412 413
    0   0 416 417   0   0 420 421   0   0 424 425   0   0 428 429   0   0
  432 433   0   0 436 437   0   0 440 441   0   0 444 445   0   0 448 449
    0   0 452 453   0   0 456 457   0   0 460 461   0   0 464 465   0   0
  468 469   0   0 472 473   0   0 476 477   0   0 480 481   0   0 484 485
    0   0 488 489   0   0 492 493   0   0 496 497   0   0 500 501   0   0
  504 505   0   0 508 509   0   0]]
[[  0   1   4   5   8   9  12  13  16  17  20  21  24  25  28  29  32  33
   36  37  40  41  44  45  48  49  52  53  56  57  60  61  64  65  68  69
   72  73  76  77  80  81  84  85  88  89  92  93  96  97 100 101 104 105
  108 109 112 113 116 117 120 121 124 125 128 129 132 133 136 137 140 141
  144 145 148 149 152 153 156 157 160 161 164 165 168 169 172 173 176 177
  180 181 184 185 188 189 192 193 196 197 200 201 204 205 208 209 212 213
  216 217 220 221 224 225 228 229 232 233 236 237 240 241 244 245 248 249
  252 253 256 257 260 261 264 265 268 269 272 273 276 277 280 281 284 285
  288 289 292 293 296 297 300 301 304 305 308 309 312 313 316 317 320 321
  324 325 328 329 332 333 336 337 340 341 344 345 348 349 352 353 356 357
  360 361 364 365 368 369 372 373 376 377 380 381 384 385 388 389 392 393
  396 397 400 401 404 405 408 409 412 413 416 417 420 421 424 425 428 429
  432 433 436 437 440 441 444 445 448 449 452 453 456 457 460 461 464 465
  468 469 472 473 476 477 480 481 484 485 488 489 492 493 496 497 500 501
  504 505 508 509]]
self.ifmap_addr_matrix for sparsity
[[  0   1   4   5   8   9  12  13  16  17  20  21  24  25  28  29  32  33
   36  37  40  41  44  45  48  49  52  53  56  57  60  61  64  65  68  69
   72  73  76  77  80  81  84  85  88  89  92  93  96  97 100 101 104 105
  108 109 112 113 116 117 120 121 124 125 128 129 132 133 136 137 140 141
  144 145 148 149 152 153 156 157 160 161 164 165 168 169 172 173 176 177
  180 181 184 185 188 189 192 193 196 197 200 201 204 205 208 209 212 213
  216 217 220 221 224 225 228 229 232 233 236 237 240 241 244 245 248 249
  252 253 256 257 260 261 264 265 268 269 272 273 276 277 280 281 284 285
  288 289 292 293 296 297 300 301 304 305 308 309 312 313 316 317 320 321
  324 325 328 329 332 333 336 337 340 341 344 345 348 349 352 353 356 357
  360 361 364 365 368 369 372 373 376 377 380 381 384 385 388 389 392 393
  396 397 400 401 404 405 408 409 412 413 416 417 420 421 424 425 428 429
  432 433 436 437 440 441 444 445 448 449 452 453 456 457 460 461 464 465
  468 469 472 473 476 477 480 481 484 485 488 489 492 493 496 497 500 501
  504 505 508 509]]
create_ofmap_matrix
row_indices
[[0]]
col_indices
[  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35
  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53
  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71
  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89
  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107
 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125
 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143
 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161
 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179
 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197
 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215
 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233
 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251
 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269
 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287
 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305
 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323
 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341
 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359
 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377
 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395
 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413
 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431
 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449
 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467
 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485
 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503
 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521
 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539
 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557
 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575
 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593
 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611
 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629
 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647
 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665
 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683
 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701
 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719
 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737
 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755
 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773
 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791
 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809
 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827
 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845
 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863
 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881
 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899
 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917
 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935
 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953
 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971
 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989
 990 991 992 993 994 995 996 997 998 999]
self.ofmap_addr_matrix
[[ 200  201  202  203  204  205  206  207  208  209  210  211  212  213
   214  215  216  217  218  219  220  221  222  223  224  225  226  227
   228  229  230  231  232  233  234  235  236  237  238  239  240  241
   242  243  244  245  246  247  248  249  250  251  252  253  254  255
   256  257  258  259  260  261  262  263  264  265  266  267  268  269
   270  271  272  273  274  275  276  277  278  279  280  281  282  283
   284  285  286  287  288  289  290  291  292  293  294  295  296  297
   298  299  300  301  302  303  304  305  306  307  308  309  310  311
   312  313  314  315  316  317  318  319  320  321  322  323  324  325
   326  327  328  329  330  331  332  333  334  335  336  337  338  339
   340  341  342  343  344  345  346  347  348  349  350  351  352  353
   354  355  356  357  358  359  360  361  362  363  364  365  366  367
   368  369  370  371  372  373  374  375  376  377  378  379  380  381
   382  383  384  385  386  387  388  389  390  391  392  393  394  395
   396  397  398  399  400  401  402  403  404  405  406  407  408  409
   410  411  412  413  414  415  416  417  418  419  420  421  422  423
   424  425  426  427  428  429  430  431  432  433  434  435  436  437
   438  439  440  441  442  443  444  445  446  447  448  449  450  451
   452  453  454  455  456  457  458  459  460  461  462  463  464  465
   466  467  468  469  470  471  472  473  474  475  476  477  478  479
   480  481  482  483  484  485  486  487  488  489  490  491  492  493
   494  495  496  497  498  499  500  501  502  503  504  505  506  507
   508  509  510  511  512  513  514  515  516  517  518  519  520  521
   522  523  524  525  526  527  528  529  530  531  532  533  534  535
   536  537  538  539  540  541  542  543  544  545  546  547  548  549
   550  551  552  553  554  555  556  557  558  559  560  561  562  563
   564  565  566  567  568  569  570  571  572  573  574  575  576  577
   578  579  580  581  582  583  584  585  586  587  588  589  590  591
   592  593  594  595  596  597  598  599  600  601  602  603  604  605
   606  607  608  609  610  611  612  613  614  615  616  617  618  619
   620  621  622  623  624  625  626  627  628  629  630  631  632  633
   634  635  636  637  638  639  640  641  642  643  644  645  646  647
   648  649  650  651  652  653  654  655  656  657  658  659  660  661
   662  663  664  665  666  667  668  669  670  671  672  673  674  675
   676  677  678  679  680  681  682  683  684  685  686  687  688  689
   690  691  692  693  694  695  696  697  698  699  700  701  702  703
   704  705  706  707  708  709  710  711  712  713  714  715  716  717
   718  719  720  721  722  723  724  725  726  727  728  729  730  731
   732  733  734  735  736  737  738  739  740  741  742  743  744  745
   746  747  748  749  750  751  752  753  754  755  756  757  758  759
   760  761  762  763  764  765  766  767  768  769  770  771  772  773
   774  775  776  777  778  779  780  781  782  783  784  785  786  787
   788  789  790  791  792  793  794  795  796  797  798  799  800  801
   802  803  804  805  806  807  808  809  810  811  812  813  814  815
   816  817  818  819  820  821  822  823  824  825  826  827  828  829
   830  831  832  833  834  835  836  837  838  839  840  841  842  843
   844  845  846  847  848  849  850  851  852  853  854  855  856  857
   858  859  860  861  862  863  864  865  866  867  868  869  870  871
   872  873  874  875  876  877  878  879  880  881  882  883  884  885
   886  887  888  889  890  891  892  893  894  895  896  897  898  899
   900  901  902  903  904  905  906  907  908  909  910  911  912  913
   914  915  916  917  918  919  920  921  922  923  924  925  926  927
   928  929  930  931  932  933  934  935  936  937  938  939  940  941
   942  943  944  945  946  947  948  949  950  951  952  953  954  955
   956  957  958  959  960  961  962  963  964  965  966  967  968  969
   970  971  972  973  974  975  976  977  978  979  980  981  982  983
   984  985  986  987  988  989  990  991  992  993  994  995  996  997
   998  999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011
  1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025
  1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039
  1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053
  1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067
  1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081
  1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095
  1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109
  1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123
  1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137
  1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151
  1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165
  1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179
  1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193
  1194 1195 1196 1197 1198 1199]]
these are the operand matrices
(1, 256)
(256, 1000)
(1, 1000)
[[  0   1   4   5   8   9  12  13  16  17  20  21  24  25  28  29  32  33
   36  37  40  41  44  45  48  49  52  53  56  57  60  61  64  65  68  69
   72  73  76  77  80  81  84  85  88  89  92  93  96  97 100 101 104 105
  108 109 112 113 116 117 120 121 124 125 128 129 132 133 136 137 140 141
  144 145 148 149 152 153 156 157 160 161 164 165 168 169 172 173 176 177
  180 181 184 185 188 189 192 193 196 197 200 201 204 205 208 209 212 213
  216 217 220 221 224 225 228 229 232 233 236 237 240 241 244 245 248 249
  252 253 256 257 260 261 264 265 268 269 272 273 276 277 280 281 284 285
  288 289 292 293 296 297 300 301 304 305 308 309 312 313 316 317 320 321
  324 325 328 329 332 333 336 337 340 341 344 345 348 349 352 353 356 357
  360 361 364 365 368 369 372 373 376 377 380 381 384 385 388 389 392 393
  396 397 400 401 404 405 408 409 412 413 416 417 420 421 424 425 428 429
  432 433 436 437 440 441 444 445 448 449 452 453 456 457 460 461 464 465
  468 469 472 473 476 477 480 481 484 485 488 489 492 493 496 497 500 501
  504 505 508 509]]
[[   100    612   1124 ... 510564 511076 511588]
 [   101    613   1125 ... 510565 511077 511589]
 [   104    616   1128 ... 510568 511080 511592]
 ...
 [   605   1117   1629 ... 511069 511581 512093]
 [   608   1120   1632 ... 511072 511584 512096]
 [   609   1121   1633 ... 511073 511585 512097]]
[[ 200  201  202  203  204  205  206  207  208  209  210  211  212  213
   214  215  216  217  218  219  220  221  222  223  224  225  226  227
   228  229  230  231  232  233  234  235  236  237  238  239  240  241
   242  243  244  245  246  247  248  249  250  251  252  253  254  255
   256  257  258  259  260  261  262  263  264  265  266  267  268  269
   270  271  272  273  274  275  276  277  278  279  280  281  282  283
   284  285  286  287  288  289  290  291  292  293  294  295  296  297
   298  299  300  301  302  303  304  305  306  307  308  309  310  311
   312  313  314  315  316  317  318  319  320  321  322  323  324  325
   326  327  328  329  330  331  332  333  334  335  336  337  338  339
   340  341  342  343  344  345  346  347  348  349  350  351  352  353
   354  355  356  357  358  359  360  361  362  363  364  365  366  367
   368  369  370  371  372  373  374  375  376  377  378  379  380  381
   382  383  384  385  386  387  388  389  390  391  392  393  394  395
   396  397  398  399  400  401  402  403  404  405  406  407  408  409
   410  411  412  413  414  415  416  417  418  419  420  421  422  423
   424  425  426  427  428  429  430  431  432  433  434  435  436  437
   438  439  440  441  442  443  444  445  446  447  448  449  450  451
   452  453  454  455  456  457  458  459  460  461  462  463  464  465
   466  467  468  469  470  471  472  473  474  475  476  477  478  479
   480  481  482  483  484  485  486  487  488  489  490  491  492  493
   494  495  496  497  498  499  500  501  502  503  504  505  506  507
   508  509  510  511  512  513  514  515  516  517  518  519  520  521
   522  523  524  525  526  527  528  529  530  531  532  533  534  535
   536  537  538  539  540  541  542  543  544  545  546  547  548  549
   550  551  552  553  554  555  556  557  558  559  560  561  562  563
   564  565  566  567  568  569  570  571  572  573  574  575  576  577
   578  579  580  581  582  583  584  585  586  587  588  589  590  591
   592  593  594  595  596  597  598  599  600  601  602  603  604  605
   606  607  608  609  610  611  612  613  614  615  616  617  618  619
   620  621  622  623  624  625  626  627  628  629  630  631  632  633
   634  635  636  637  638  639  640  641  642  643  644  645  646  647
   648  649  650  651  652  653  654  655  656  657  658  659  660  661
   662  663  664  665  666  667  668  669  670  671  672  673  674  675
   676  677  678  679  680  681  682  683  684  685  686  687  688  689
   690  691  692  693  694  695  696  697  698  699  700  701  702  703
   704  705  706  707  708  709  710  711  712  713  714  715  716  717
   718  719  720  721  722  723  724  725  726  727  728  729  730  731
   732  733  734  735  736  737  738  739  740  741  742  743  744  745
   746  747  748  749  750  751  752  753  754  755  756  757  758  759
   760  761  762  763  764  765  766  767  768  769  770  771  772  773
   774  775  776  777  778  779  780  781  782  783  784  785  786  787
   788  789  790  791  792  793  794  795  796  797  798  799  800  801
   802  803  804  805  806  807  808  809  810  811  812  813  814  815
   816  817  818  819  820  821  822  823  824  825  826  827  828  829
   830  831  832  833  834  835  836  837  838  839  840  841  842  843
   844  845  846  847  848  849  850  851  852  853  854  855  856  857
   858  859  860  861  862  863  864  865  866  867  868  869  870  871
   872  873  874  875  876  877  878  879  880  881  882  883  884  885
   886  887  888  889  890  891  892  893  894  895  896  897  898  899
   900  901  902  903  904  905  906  907  908  909  910  911  912  913
   914  915  916  917  918  919  920  921  922  923  924  925  926  927
   928  929  930  931  932  933  934  935  936  937  938  939  940  941
   942  943  944  945  946  947  948  949  950  951  952  953  954  955
   956  957  958  959  960  961  962  963  964  965  966  967  968  969
   970  971  972  973  974  975  976  977  978  979  980  981  982  983
   984  985  986  987  988  989  990  991  992  993  994  995  996  997
   998  999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011
  1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025
  1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039
  1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053
  1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067
  1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081
  1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095
  1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109
  1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123
  1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137
  1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151
  1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165
  1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179
  1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193
  1194 1195 1196 1197 1198 1199]]
layer_calc_params[0] * layer_calc_params[1] * num_filters =  1 1 1000
self.num_compute = self.topo.get_layer_num_ofmap_px(self.layer_id) * self.topo.get_layer_window_size(self.layer_id)
Nofmap: Number of OFMAP pixels generated by filter
layer_calc_params[0] * layer_calc_params[1] * num_filters =  1 1 1000
512000 = 1000 * 512
self.layer_id  20
filter matrix in create_filter_prefetch_mat
[[   100    612   1124 ... 510564 511076 511588]
 [   101    613   1125 ... 510565 511077 511589]
 [   104    616   1128 ... 510568 511080 511592]
 ...
 [   605   1117   1629 ... 511069 511581 512093]
 [   608   1120   1632 ... 511072 511584 512096]
 [   609   1121   1633 ... 511073 511585 512097]]
End
printing self.filter_prefetch_matrix is ws.py
[[ 1.00000e+02  6.12000e+02  1.12400e+03 ...  6.41000e+04  6.46120e+04
   6.51240e+04]
 [ 1.01000e+02  6.13000e+02  1.12500e+03 ...  6.41010e+04  6.46130e+04
   6.51250e+04]
 [ 1.04000e+02  6.16000e+02  1.12800e+03 ...  6.41040e+04  6.46160e+04
   6.51280e+04]
 ...
 [ 4.59357e+05  4.59869e+05  4.60381e+05 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [ 4.59360e+05  4.59872e+05  4.60384e+05 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]
 [ 4.59361e+05  4.59873e+05  4.60385e+05 ... -1.00000e+00 -1.00000e+00
  -1.00000e+00]]
256.0
512.0
768.0
1024.0
1280.0
1536.0
1792.0
2048.0
2304.0
2560.0
2816.0
3072.0
3328.0
3584.0
3840.0
4096.0
printing self.filter_demand_matrix in ws.py
[[ 3.5300e+02  8.6500e+02  1.3770e+03 ...  6.4353e+04  6.4865e+04
   6.5377e+04]
 [ 3.5200e+02  8.6400e+02  1.3760e+03 ...  6.4352e+04  6.4864e+04
   6.5376e+04]
 [ 3.4900e+02  8.6100e+02  1.3730e+03 ...  6.4349e+04  6.4861e+04
   6.5373e+04]
 ...
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]]
These are the demand matrices
ifmap_demand_mat demand matrix
[[-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 ...
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]]
filter_demand_mat demand matrix
[[ 3.5300e+02  8.6500e+02  1.3770e+03 ...  6.4353e+04  6.4865e+04
   6.5377e+04]
 [ 3.5200e+02  8.6400e+02  1.3760e+03 ...  6.4352e+04  6.4864e+04
   6.5376e+04]
 [ 3.4900e+02  8.6100e+02  1.3730e+03 ...  6.4349e+04  6.4861e+04
   6.5373e+04]
 ...
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]
 [-1.0000e+00 -1.0000e+00 -1.0000e+00 ... -1.0000e+00 -1.0000e+00
  -1.0000e+00]]
ofmap_demand_mat demand matrix
[[-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 ...
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]]
Compute cycles: 6127
Stall cycles: 0
Overall utilization: 0.51%
Mapping efficiency: 97.66%
Average IFMAP SRAM BW: 0.669 words/cycle
Average Filter SRAM BW: 41.782 words/cycle
Average Filter Metadata SRAM BW: 2.611 words/cycle
Average OFMAP SRAM BW: 0.326 words/cycle
Average IFMAP DRAM BW: 50.000 words/cycle
Average Filter DRAM BW: 50.000 words/cycle
Average OFMAP DRAM BW: 50.000 words/cycle
************ SCALE SIM Run Complete ****************
