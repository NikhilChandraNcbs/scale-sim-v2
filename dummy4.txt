row in load_array_gemm
Layer Name, M, N, K,

row in load_array_gemm
GEMM_1, 1, 5, 16,

printing entry
['GEMM_1', 1, 16, 1, 16, 1, 5, 1, 1, None]
topo arrays after append_topo_arrays
[['GEMM_1', 1, 16, 1, 16, 1, 5, 1, 1, None]]
====================================================
******************* SCALE SIM **********************
====================================================
Array Size: 	4x4
SRAM IFMAP (kB): 	1
SRAM Filter (kB): 	1
SRAM OFMAP (kB): 	1
Dataflow: 	Weight Stationary
CSV file path: 	topologies/sparsity/gemm_mix.csv
Bandwidth: 	50
Working in USE USER BANDWIDTH mode.
====================================================

Running Layer 0
self.filter_addr_matrix
(16, 5)
[[100 116 132 148 164]
 [101 117 133 149 165]
 [102 118 134 150 166]
 [103 119 135 151 167]
 [104 120 136 152 168]
 [105 121 137 153 169]
 [106 122 138 154 170]
 [107 123 139 155 171]
 [108 124 140 156 172]
 [109 125 141 157 173]
 [110 126 142 158 174]
 [111 127 143 159 175]
 [112 128 144 160 176]
 [113 129 145 161 177]
 [114 130 146 162 178]
 [115 131 147 163 179]]
SPARSITY INSIDE FILTER DEMAND MATRIX CREATION
No sparsity file - creating bitmap
[[1 1 1 1 1]
 [0 0 0 0 0]
 [0 0 0 0 0]
 [0 0 0 0 0]
 [1 1 1 1 1]
 [0 0 0 0 0]
 [0 0 0 0 0]
 [0 0 0 0 0]
 [1 1 1 1 1]
 [0 0 0 0 0]
 [0 0 0 0 0]
 [0 0 0 0 0]
 [1 1 1 1 1]
 [0 0 0 0 0]
 [0 0 0 0 0]
 [0 0 0 0 0]]
final sparse array
[[1 1 1 1 1]
 [0 0 0 0 0]
 [0 0 0 0 0]
 [0 0 0 0 0]
 [1 1 1 1 1]
 [0 0 0 0 0]
 [0 0 0 0 0]
 [0 0 0 0 0]
 [1 1 1 1 1]
 [0 0 0 0 0]
 [0 0 0 0 0]
 [0 0 0 0 0]
 [1 1 1 1 1]
 [0 0 0 0 0]
 [0 0 0 0 0]
 [0 0 0 0 0]]
after multiplying
(16, 5)
[[100 116 132 148 164]
 [  0   0   0   0   0]
 [  0   0   0   0   0]
 [  0   0   0   0   0]
 [104 120 136 152 168]
 [  0   0   0   0   0]
 [  0   0   0   0   0]
 [  0   0   0   0   0]
 [108 124 140 156 172]
 [  0   0   0   0   0]
 [  0   0   0   0   0]
 [  0   0   0   0   0]
 [112 128 144 160 176]
 [  0   0   0   0   0]
 [  0   0   0   0   0]
 [  0   0   0   0   0]]
after reducing the filter array based on sparsity
[[100 104 108 112]
 [116 120 124 128]
 [132 136 140 144]
 [148 152 156 160]
 [164 168 172 176]]
Final
(4, 5)
[[100 116 132 148 164]
 [104 120 136 152 168]
 [108 124 140 156 172]
 [112 128 144 160 176]]
INSIDE INPUT FILTER DEMAND MATRIX CREATION FUNCTION
self.batch_size in ifmap function is  1
self.ifmap_addr_matrix
(1, 16)
[[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15]]
Input sparsity being applied
1
4
0.25
16 * 0.25 = 4
4 is the number
self.ifmap_addr_matrix for sparsity
[[0 1 2 3]]
col_indices
[0 1 2 3 4]
self.ofmap_addr_matrix
[[200 201 202 203 204]]
these are the operand matrices
(1, 4)
(4, 5)
(1, 5)
[[0 1 2 3]]
[[100 116 132 148 164]
 [104 120 136 152 168]
 [108 124 140 156 172]
 [112 128 144 160 176]]
[[200 201 202 203 204]]
layer_calc_params[0] * layer_calc_params[1] * num_filters =  1 1 5
self.num_compute = self.topo.get_layer_num_ofmap_px(self.layer_id) * self.topo.get_layer_window_size(self.layer_id)
Nofmap: Number of OFMAP pixels generated by filter
layer_calc_params[0] * layer_calc_params[1] * num_filters =  1 1 5
80 = 5 * 16
self.layer_id  0
filter matrix in create_filter_prefetch_mat
[[100 116 132 148 164]
 [104 120 136 152 168]
 [108 124 140 156 172]
 [112 128 144 160 176]]
End
printing self.filter_prefetch_matrix is ws.py
[[100. 116. 132. 148.]
 [104. 120. 136. 152.]
 [108. 124. 140. 156.]
 [112. 128. 144. 160.]
 [164.  -1.  -1.  -1.]
 [168.  -1.  -1.  -1.]
 [172.  -1.  -1.  -1.]
 [176.  -1.  -1.  -1.]]
<<<<<<<<<<<<<<<<<<this_fold_demand>>>>>>>>>>>>>>>>>>>>>>>
[[0 1 2 3]]
16.0
[[-1. -1. -1. -1.]
 [-1. -1. -1. -1.]
 [-1. -1. -1. -1.]
 [-1. -1. -1. -1.]
 [ 0. -1. -1. -1.]
 [-1.  1. -1. -1.]
 [-1. -1.  2. -1.]
 [-1. -1. -1.  3.]
 [-1. -1. -1. -1.]
 [-1. -1. -1. -1.]
 [-1. -1. -1. -1.]]
<<<<<<<<<<<<<<<<<<this_fold_demand>>>>>>>>>>>>>>>>>>>>>>>
[[0 1 2 3]]
32.0
[[-1. -1. -1. -1.]
 [-1. -1. -1. -1.]
 [-1. -1. -1. -1.]
 [-1. -1. -1. -1.]
 [ 0. -1. -1. -1.]
 [-1.  1. -1. -1.]
 [-1. -1.  2. -1.]
 [-1. -1. -1.  3.]
 [-1. -1. -1. -1.]
 [-1. -1. -1. -1.]
 [-1. -1. -1. -1.]]
printing self.filter_demand_matrix in ws.py
[[112. 128. 144. 160.]
 [108. 124. 140. 156.]
 [104. 120. 136. 152.]
 [100. 116. 132. 148.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [176.  -1.  -1.  -1.]
 [172.  -1.  -1.  -1.]
 [168.  -1.  -1.  -1.]
 [164.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]]
These are the demand matrices
ifmap_demand_mat demand matrix
[[-1. -1. -1. -1.]
 [-1. -1. -1. -1.]
 [-1. -1. -1. -1.]
 [-1. -1. -1. -1.]
 [ 0. -1. -1. -1.]
 [-1.  1. -1. -1.]
 [-1. -1.  2. -1.]
 [-1. -1. -1.  3.]
 [-1. -1. -1. -1.]
 [-1. -1. -1. -1.]
 [-1. -1. -1. -1.]
 [-1. -1. -1. -1.]
 [-1. -1. -1. -1.]
 [-1. -1. -1. -1.]
 [-1. -1. -1. -1.]
 [ 0. -1. -1. -1.]
 [-1.  1. -1. -1.]
 [-1. -1.  2. -1.]
 [-1. -1. -1.  3.]
 [-1. -1. -1. -1.]
 [-1. -1. -1. -1.]
 [-1. -1. -1. -1.]]
filter_demand_mat demand matrix
[[112. 128. 144. 160.]
 [108. 124. 140. 156.]
 [104. 120. 136. 152.]
 [100. 116. 132. 148.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [176.  -1.  -1.  -1.]
 [172.  -1.  -1.  -1.]
 [168.  -1.  -1.  -1.]
 [164.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]]
ofmap_demand_mat demand matrix
[[ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [200.  -1.  -1.  -1.]
 [ -1. 201.  -1.  -1.]
 [ -1.  -1. 202.  -1.]
 [ -1.  -1.  -1. 203.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [204.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]
 [ -1.  -1.  -1.  -1.]]
Compute cycles: 21
Stall cycles: 0
Overall utilization: 23.81%
Mapping efficiency: 62.50%
Average IFMAP SRAM BW: 1.524 words/cycle
Average Filter SRAM BW: 0.952 words/cycle
Average Filter Metadata SRAM BW: 0.060 words/cycle
Average OFMAP SRAM BW: 0.238 words/cycle
Average IFMAP DRAM BW: 50.000 words/cycle
Average Filter DRAM BW: 50.000 words/cycle
Average OFMAP DRAM BW: 5.000 words/cycle
************ SCALE SIM Run Complete ****************
