printing entry
['Convolution Layer 1', 30, 30, 5, 5, 1, 6, 1, 1, None]
printing entry
['Convolution Layer 2', 10, 10, 5, 5, 6, 16, 1, 1, None]
====================================================
******************* SCALE SIM **********************
====================================================
Array Size: 	8x8
SRAM IFMAP (kB): 	1
SRAM Filter (kB): 	1
SRAM OFMAP (kB): 	1
Dataflow: 	Weight Stationary
CSV file path: 	topologies/sparsity/lenet_conv.csv
Bandwidth: 	50
Working in USE USER BANDWIDTH mode.
====================================================

Running Layer 0
self.filter_addr_matrix
(25, 6)
[[100 125 150 175 200 225]
 [101 126 151 176 201 226]
 [102 127 152 177 202 227]
 [103 128 153 178 203 228]
 [104 129 154 179 204 229]
 [105 130 155 180 205 230]
 [106 131 156 181 206 231]
 [107 132 157 182 207 232]
 [108 133 158 183 208 233]
 [109 134 159 184 209 234]
 [110 135 160 185 210 235]
 [111 136 161 186 211 236]
 [112 137 162 187 212 237]
 [113 138 163 188 213 238]
 [114 139 164 189 214 239]
 [115 140 165 190 215 240]
 [116 141 166 191 216 241]
 [117 142 167 192 217 242]
 [118 143 168 193 218 243]
 [119 144 169 194 219 244]
 [120 145 170 195 220 245]
 [121 146 171 196 221 246]
 [122 147 172 197 222 247]
 [123 148 173 198 223 248]
 [124 149 174 199 224 249]]
SPARSITY INSIDE FILTER DEMAND MATRIX CREATION
No sparsity file - creating bitmap
[[1 1 1 1 1 1]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]
 [1 1 1 1 1 1]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]
 [1 1 1 1 1 1]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]
 [1 1 1 1 1 1]]
after multiplying
[[100 125 150 175 200 225]
 [  0   0   0   0   0   0]
 [  0   0   0   0   0   0]
 [  0   0   0   0   0   0]
 [  0   0   0   0   0   0]
 [  0   0   0   0   0   0]
 [  0   0   0   0   0   0]
 [  0   0   0   0   0   0]
 [108 133 158 183 208 233]
 [  0   0   0   0   0   0]
 [  0   0   0   0   0   0]
 [  0   0   0   0   0   0]
 [  0   0   0   0   0   0]
 [  0   0   0   0   0   0]
 [  0   0   0   0   0   0]
 [  0   0   0   0   0   0]
 [116 141 166 191 216 241]
 [  0   0   0   0   0   0]
 [  0   0   0   0   0   0]
 [  0   0   0   0   0   0]
 [  0   0   0   0   0   0]
 [  0   0   0   0   0   0]
 [  0   0   0   0   0   0]
 [  0   0   0   0   0   0]
 [124 149 174 199 224 249]]
after reducing the filter array based on sparsity
[[100 108 116 124]
 [125 133 141 149]
 [150 158 166 174]
 [175 183 191 199]
 [200 208 216 224]
 [225 233 241 249]]
Final
[[100 125 150 175 200 225]
 [108 133 158 183 208 233]
 [116 141 166 191 216 241]
 [124 149 174 199 224 249]]
INSIDE INPUT FILTER DEMAND MATRIX CREATION FUNCTION
self.batch_size in ifmap function is  1
self.ifmap_addr_matrix
(676, 25)
[[  0   1   2 ... 122 123 124]
 [  1   2   3 ... 123 124 125]
 [  2   3   4 ... 124 125 126]
 ...
 [773 774 775 ... 895 896 897]
 [774 775 776 ... 896 897 898]
 [775 776 777 ... 897 898 899]]
Input sparsity being applied
1
8
0.125
25 * 0.125 = 4
self.ifmap_addr_matrix for sparsity
[[  0   1   2   3]
 [  1   2   3   4]
 [  2   3   4   5]
 ...
 [773 774 775 776]
 [774 775 776 777]
 [775 776 777 778]]
col_indices
[0 1 2 3 4 5]
self.ofmap_addr_matrix
[[ 200  201  202  203  204  205]
 [ 206  207  208  209  210  211]
 [ 212  213  214  215  216  217]
 ...
 [4238 4239 4240 4241 4242 4243]
 [4244 4245 4246 4247 4248 4249]
 [4250 4251 4252 4253 4254 4255]]
these are the operand matrices
(676, 4)
(4, 6)
(676, 6)
[[  0   1   2   3]
 [  1   2   3   4]
 [  2   3   4   5]
 ...
 [773 774 775 776]
 [774 775 776 777]
 [775 776 777 778]]
[[100 125 150 175 200 225]
 [108 133 158 183 208 233]
 [116 141 166 191 216 241]
 [124 149 174 199 224 249]]
[[ 200  201  202  203  204  205]
 [ 206  207  208  209  210  211]
 [ 212  213  214  215  216  217]
 ...
 [4238 4239 4240 4241 4242 4243]
 [4244 4245 4246 4247 4248 4249]
 [4250 4251 4252 4253 4254 4255]]
layer_calc_params[0] * layer_calc_params[1] * num_filters =  26 26 6
self.num_compute = self.topo.get_layer_num_ofmap_px(self.layer_id) * self.topo.get_layer_window_size(self.layer_id)
Nofmap: Number of OFMAP pixels generated by filter
layer_calc_params[0] * layer_calc_params[1] * num_filters =  26 26 6
101400 = 4056 * 25
self.layer_id  0
filter matrix in create_filter_prefetch_mat
[[100 125 150 175 200 225]
 [108 133 158 183 208 233]
 [116 141 166 191 216 241]
 [124 149 174 199 224 249]]
End
These are the demand matrices
[[-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 ...
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]]
[[-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 ...
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]]
[[-1.000e+00 -1.000e+00 -1.000e+00 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [-1.000e+00 -1.000e+00 -1.000e+00 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [-1.000e+00 -1.000e+00 -1.000e+00 ... -1.000e+00 -1.000e+00 -1.000e+00]
 ...
 [-1.000e+00 -1.000e+00 -1.000e+00 ...  4.255e+03 -1.000e+00 -1.000e+00]
 [-1.000e+00 -1.000e+00 -1.000e+00 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [-1.000e+00 -1.000e+00 -1.000e+00 ... -1.000e+00 -1.000e+00 -1.000e+00]]
Compute cycles: 697
Stall cycles: 0
Overall utilization: 227.31%
Mapping efficiency: 37.50%
Average IFMAP SRAM BW: 0.115 words/cycle
Average Filter SRAM BW: 0.034 words/cycle
Average Filter Metadata SRAM BW: 0.002 words/cycle
Average OFMAP SRAM BW: 5.819 words/cycle
Average IFMAP DRAM BW: 46.479 words/cycle
Average Filter DRAM BW: 50.000 words/cycle
Average OFMAP DRAM BW: 6.704 words/cycle

Running Layer 1
self.filter_addr_matrix
(150, 16)
[[ 100  250  400 ... 2050 2200 2350]
 [ 101  251  401 ... 2051 2201 2351]
 [ 102  252  402 ... 2052 2202 2352]
 ...
 [ 247  397  547 ... 2197 2347 2497]
 [ 248  398  548 ... 2198 2348 2498]
 [ 249  399  549 ... 2199 2349 2499]]
SPARSITY INSIDE FILTER DEMAND MATRIX CREATION
No sparsity file - creating bitmap
[[1 1 1 ... 1 1 1]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 ...
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
after multiplying
[[ 100  250  400 ... 2050 2200 2350]
 [   0    0    0 ...    0    0    0]
 [   0    0    0 ...    0    0    0]
 ...
 [   0    0    0 ...    0    0    0]
 [   0    0    0 ...    0    0    0]
 [   0    0    0 ...    0    0    0]]
after reducing the filter array based on sparsity
[[ 100  108  116  124  132  140  148  156  164  172  180  188  196  204
   212  220  228  236  244]
 [ 250  258  266  274  282  290  298  306  314  322  330  338  346  354
   362  370  378  386  394]
 [ 400  408  416  424  432  440  448  456  464  472  480  488  496  504
   512  520  528  536  544]
 [ 550  558  566  574  582  590  598  606  614  622  630  638  646  654
   662  670  678  686  694]
 [ 700  708  716  724  732  740  748  756  764  772  780  788  796  804
   812  820  828  836  844]
 [ 850  858  866  874  882  890  898  906  914  922  930  938  946  954
   962  970  978  986  994]
 [1000 1008 1016 1024 1032 1040 1048 1056 1064 1072 1080 1088 1096 1104
  1112 1120 1128 1136 1144]
 [1150 1158 1166 1174 1182 1190 1198 1206 1214 1222 1230 1238 1246 1254
  1262 1270 1278 1286 1294]
 [1300 1308 1316 1324 1332 1340 1348 1356 1364 1372 1380 1388 1396 1404
  1412 1420 1428 1436 1444]
 [1450 1458 1466 1474 1482 1490 1498 1506 1514 1522 1530 1538 1546 1554
  1562 1570 1578 1586 1594]
 [1600 1608 1616 1624 1632 1640 1648 1656 1664 1672 1680 1688 1696 1704
  1712 1720 1728 1736 1744]
 [1750 1758 1766 1774 1782 1790 1798 1806 1814 1822 1830 1838 1846 1854
  1862 1870 1878 1886 1894]
 [1900 1908 1916 1924 1932 1940 1948 1956 1964 1972 1980 1988 1996 2004
  2012 2020 2028 2036 2044]
 [2050 2058 2066 2074 2082 2090 2098 2106 2114 2122 2130 2138 2146 2154
  2162 2170 2178 2186 2194]
 [2200 2208 2216 2224 2232 2240 2248 2256 2264 2272 2280 2288 2296 2304
  2312 2320 2328 2336 2344]
 [2350 2358 2366 2374 2382 2390 2398 2406 2414 2422 2430 2438 2446 2454
  2462 2470 2478 2486 2494]]
Final
[[ 100  250  400  550  700  850 1000 1150 1300 1450 1600 1750 1900 2050
  2200 2350]
 [ 108  258  408  558  708  858 1008 1158 1308 1458 1608 1758 1908 2058
  2208 2358]
 [ 116  266  416  566  716  866 1016 1166 1316 1466 1616 1766 1916 2066
  2216 2366]
 [ 124  274  424  574  724  874 1024 1174 1324 1474 1624 1774 1924 2074
  2224 2374]
 [ 132  282  432  582  732  882 1032 1182 1332 1482 1632 1782 1932 2082
  2232 2382]
 [ 140  290  440  590  740  890 1040 1190 1340 1490 1640 1790 1940 2090
  2240 2390]
 [ 148  298  448  598  748  898 1048 1198 1348 1498 1648 1798 1948 2098
  2248 2398]
 [ 156  306  456  606  756  906 1056 1206 1356 1506 1656 1806 1956 2106
  2256 2406]
 [ 164  314  464  614  764  914 1064 1214 1364 1514 1664 1814 1964 2114
  2264 2414]
 [ 172  322  472  622  772  922 1072 1222 1372 1522 1672 1822 1972 2122
  2272 2422]
 [ 180  330  480  630  780  930 1080 1230 1380 1530 1680 1830 1980 2130
  2280 2430]
 [ 188  338  488  638  788  938 1088 1238 1388 1538 1688 1838 1988 2138
  2288 2438]
 [ 196  346  496  646  796  946 1096 1246 1396 1546 1696 1846 1996 2146
  2296 2446]
 [ 204  354  504  654  804  954 1104 1254 1404 1554 1704 1854 2004 2154
  2304 2454]
 [ 212  362  512  662  812  962 1112 1262 1412 1562 1712 1862 2012 2162
  2312 2462]
 [ 220  370  520  670  820  970 1120 1270 1420 1570 1720 1870 2020 2170
  2320 2470]
 [ 228  378  528  678  828  978 1128 1278 1428 1578 1728 1878 2028 2178
  2328 2478]
 [ 236  386  536  686  836  986 1136 1286 1436 1586 1736 1886 2036 2186
  2336 2486]
 [ 244  394  544  694  844  994 1144 1294 1444 1594 1744 1894 2044 2194
  2344 2494]]
INSIDE INPUT FILTER DEMAND MATRIX CREATION FUNCTION
self.batch_size in ifmap function is  1
self.ifmap_addr_matrix
(36, 150)
[[  0   1   2 ... 267 268 269]
 [  6   7   8 ... 273 274 275]
 [ 12  13  14 ... 279 280 281]
 ...
 [318 319 320 ... 585 586 587]
 [324 325 326 ... 591 592 593]
 [330 331 332 ... 597 598 599]]
Input sparsity being applied
1
8
0.125
150 * 0.125 = 19
self.ifmap_addr_matrix for sparsity
[[  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
   18]
 [  6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23
   24]
 [ 12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29
   30]
 [ 18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35
   36]
 [ 24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41
   42]
 [ 30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47
   48]
 [ 60  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77
   78]
 [ 66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83
   84]
 [ 72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89
   90]
 [ 78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95
   96]
 [ 84  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101
  102]
 [ 90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107
  108]
 [120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137
  138]
 [126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143
  144]
 [132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149
  150]
 [138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155
  156]
 [144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161
  162]
 [150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167
  168]
 [180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197
  198]
 [186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203
  204]
 [192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209
  210]
 [198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215
  216]
 [204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221
  222]
 [210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227
  228]
 [240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257
  258]
 [246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263
  264]
 [252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269
  270]
 [258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275
  276]
 [264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281
  282]
 [270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287
  288]
 [300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317
  318]
 [306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323
  324]
 [312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329
  330]
 [318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335
  336]
 [324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341
  342]
 [330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347
  348]]
col_indices
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15]
self.ofmap_addr_matrix
[[200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215]
 [216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231]
 [232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247]
 [248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263]
 [264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279]
 [280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295]
 [296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311]
 [312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327]
 [328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343]
 [344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359]
 [360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375]
 [376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391]
 [392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407]
 [408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423]
 [424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439]
 [440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455]
 [456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471]
 [472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487]
 [488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503]
 [504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519]
 [520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535]
 [536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551]
 [552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567]
 [568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583]
 [584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599]
 [600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615]
 [616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631]
 [632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647]
 [648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663]
 [664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679]
 [680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695]
 [696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711]
 [712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727]
 [728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743]
 [744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759]
 [760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775]]
these are the operand matrices
(36, 19)
(19, 16)
(36, 16)
[[  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
   18]
 [  6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23
   24]
 [ 12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29
   30]
 [ 18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35
   36]
 [ 24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41
   42]
 [ 30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47
   48]
 [ 60  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77
   78]
 [ 66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83
   84]
 [ 72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89
   90]
 [ 78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95
   96]
 [ 84  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101
  102]
 [ 90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107
  108]
 [120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137
  138]
 [126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143
  144]
 [132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149
  150]
 [138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155
  156]
 [144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161
  162]
 [150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167
  168]
 [180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197
  198]
 [186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203
  204]
 [192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209
  210]
 [198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215
  216]
 [204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221
  222]
 [210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227
  228]
 [240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257
  258]
 [246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263
  264]
 [252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269
  270]
 [258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275
  276]
 [264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281
  282]
 [270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287
  288]
 [300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317
  318]
 [306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323
  324]
 [312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329
  330]
 [318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335
  336]
 [324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341
  342]
 [330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347
  348]]
[[ 100  250  400  550  700  850 1000 1150 1300 1450 1600 1750 1900 2050
  2200 2350]
 [ 108  258  408  558  708  858 1008 1158 1308 1458 1608 1758 1908 2058
  2208 2358]
 [ 116  266  416  566  716  866 1016 1166 1316 1466 1616 1766 1916 2066
  2216 2366]
 [ 124  274  424  574  724  874 1024 1174 1324 1474 1624 1774 1924 2074
  2224 2374]
 [ 132  282  432  582  732  882 1032 1182 1332 1482 1632 1782 1932 2082
  2232 2382]
 [ 140  290  440  590  740  890 1040 1190 1340 1490 1640 1790 1940 2090
  2240 2390]
 [ 148  298  448  598  748  898 1048 1198 1348 1498 1648 1798 1948 2098
  2248 2398]
 [ 156  306  456  606  756  906 1056 1206 1356 1506 1656 1806 1956 2106
  2256 2406]
 [ 164  314  464  614  764  914 1064 1214 1364 1514 1664 1814 1964 2114
  2264 2414]
 [ 172  322  472  622  772  922 1072 1222 1372 1522 1672 1822 1972 2122
  2272 2422]
 [ 180  330  480  630  780  930 1080 1230 1380 1530 1680 1830 1980 2130
  2280 2430]
 [ 188  338  488  638  788  938 1088 1238 1388 1538 1688 1838 1988 2138
  2288 2438]
 [ 196  346  496  646  796  946 1096 1246 1396 1546 1696 1846 1996 2146
  2296 2446]
 [ 204  354  504  654  804  954 1104 1254 1404 1554 1704 1854 2004 2154
  2304 2454]
 [ 212  362  512  662  812  962 1112 1262 1412 1562 1712 1862 2012 2162
  2312 2462]
 [ 220  370  520  670  820  970 1120 1270 1420 1570 1720 1870 2020 2170
  2320 2470]
 [ 228  378  528  678  828  978 1128 1278 1428 1578 1728 1878 2028 2178
  2328 2478]
 [ 236  386  536  686  836  986 1136 1286 1436 1586 1736 1886 2036 2186
  2336 2486]
 [ 244  394  544  694  844  994 1144 1294 1444 1594 1744 1894 2044 2194
  2344 2494]]
[[200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215]
 [216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231]
 [232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247]
 [248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263]
 [264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279]
 [280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295]
 [296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311]
 [312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327]
 [328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343]
 [344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359]
 [360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375]
 [376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391]
 [392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407]
 [408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423]
 [424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439]
 [440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455]
 [456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471]
 [472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487]
 [488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503]
 [504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519]
 [520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535]
 [536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551]
 [552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567]
 [568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583]
 [584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599]
 [600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615]
 [616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631]
 [632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647]
 [648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663]
 [664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679]
 [680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695]
 [696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711]
 [712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727]
 [728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743]
 [744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759]
 [760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775]]
layer_calc_params[0] * layer_calc_params[1] * num_filters =  6 6 16
self.num_compute = self.topo.get_layer_num_ofmap_px(self.layer_id) * self.topo.get_layer_window_size(self.layer_id)
Nofmap: Number of OFMAP pixels generated by filter
layer_calc_params[0] * layer_calc_params[1] * num_filters =  6 6 16
86400 = 576 * 150
self.layer_id  1
filter matrix in create_filter_prefetch_mat
[[ 100  250  400  550  700  850 1000 1150 1300 1450 1600 1750 1900 2050
  2200 2350]
 [ 108  258  408  558  708  858 1008 1158 1308 1458 1608 1758 1908 2058
  2208 2358]
 [ 116  266  416  566  716  866 1016 1166 1316 1466 1616 1766 1916 2066
  2216 2366]
 [ 124  274  424  574  724  874 1024 1174 1324 1474 1624 1774 1924 2074
  2224 2374]
 [ 132  282  432  582  732  882 1032 1182 1332 1482 1632 1782 1932 2082
  2232 2382]
 [ 140  290  440  590  740  890 1040 1190 1340 1490 1640 1790 1940 2090
  2240 2390]
 [ 148  298  448  598  748  898 1048 1198 1348 1498 1648 1798 1948 2098
  2248 2398]
 [ 156  306  456  606  756  906 1056 1206 1356 1506 1656 1806 1956 2106
  2256 2406]
 [ 164  314  464  614  764  914 1064 1214 1364 1514 1664 1814 1964 2114
  2264 2414]
 [ 172  322  472  622  772  922 1072 1222 1372 1522 1672 1822 1972 2122
  2272 2422]
 [ 180  330  480  630  780  930 1080 1230 1380 1530 1680 1830 1980 2130
  2280 2430]
 [ 188  338  488  638  788  938 1088 1238 1388 1538 1688 1838 1988 2138
  2288 2438]
 [ 196  346  496  646  796  946 1096 1246 1396 1546 1696 1846 1996 2146
  2296 2446]
 [ 204  354  504  654  804  954 1104 1254 1404 1554 1704 1854 2004 2154
  2304 2454]
 [ 212  362  512  662  812  962 1112 1262 1412 1562 1712 1862 2012 2162
  2312 2462]
 [ 220  370  520  670  820  970 1120 1270 1420 1570 1720 1870 2020 2170
  2320 2470]
 [ 228  378  528  678  828  978 1128 1278 1428 1578 1728 1878 2028 2178
  2328 2478]
 [ 236  386  536  686  836  986 1136 1286 1436 1586 1736 1886 2036 2186
  2336 2486]
 [ 244  394  544  694  844  994 1144 1294 1444 1594 1744 1894 2044 2194
  2344 2494]]
End
These are the demand matrices
[[-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 ...
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]
 [-1. -1. -1. ... -1. -1. -1.]]
[[ 1.560e+02  3.060e+02  4.560e+02 ...  9.060e+02  1.056e+03  1.206e+03]
 [ 1.480e+02  2.980e+02  4.480e+02 ...  8.980e+02  1.048e+03  1.198e+03]
 [ 1.400e+02  2.900e+02  4.400e+02 ...  8.900e+02  1.040e+03  1.190e+03]
 ...
 [-1.000e+00 -1.000e+00 -1.000e+00 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [-1.000e+00 -1.000e+00 -1.000e+00 ... -1.000e+00 -1.000e+00 -1.000e+00]
 [-1.000e+00 -1.000e+00 -1.000e+00 ... -1.000e+00 -1.000e+00 -1.000e+00]]
[[ -1.  -1.  -1. ...  -1.  -1.  -1.]
 [ -1.  -1.  -1. ...  -1.  -1.  -1.]
 [ -1.  -1.  -1. ...  -1.  -1.  -1.]
 ...
 [ -1.  -1.  -1. ... 773. 758. 743.]
 [ -1.  -1.  -1. ...  -1. 774. 759.]
 [ -1.  -1.  -1. ...  -1.  -1. 775.]]
Compute cycles: 347
Stall cycles: 0
Overall utilization: 389.05%
Mapping efficiency: 79.17%
Average IFMAP SRAM BW: 1.383 words/cycle
Average Filter SRAM BW: 0.876 words/cycle
Average Filter Metadata SRAM BW: 0.055 words/cycle
Average OFMAP SRAM BW: 4.980 words/cycle
Average IFMAP DRAM BW: 46.479 words/cycle
Average Filter DRAM BW: 50.000 words/cycle
Average OFMAP DRAM BW: 6.996 words/cycle
************ SCALE SIM Run Complete ****************
